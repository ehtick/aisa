{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/examples/bobs/BobScene.ts","webpack:///./src/examples/bobs/Application.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Vertex.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/assets/atlantis.png","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/assets/ball2.png","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Framebuffer_1","math_1","Vertex_1","AbstractClipEdge_1","BottomClipEdge","AbstractClipEdge","Framebuffer","minWindow","position","p1","p2","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","TopClipEdge","maxWindow","LeftClipEdge","AbstractScene_1","texture_1","BobScene","AbstractScene","Promise","all","TextureUtils","load","then","texture","texture5","texture7","fastFramebufferCopy","drawBobs","Date","now","time","scaledTime","cos","sin","drawTextureNoClipAlpha","Canvas_1","BobScene_1","canvas","Canvas","appendTo","document","getElementById","init","main","RightClipEdge","Texture_1","Texture","TextureUtils_1","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","add","buildMesh","alpha","ScaleClipBlitter","xp","yp","width","height","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","RandomNumberGenerator_1","resolve","Uint32Array","rng","default","setSeed","getFloat","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","TexturingRenderingPipeline","points2","vertexArray","p3","uv","clipConvexPolygon2","zClipTriangle2","t1","computeNearPlaneIntersection2","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","TexturedTriangleRasterizer","temp","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","yDistanceLeft","yDistanceRight","slope1","slope2","tslope1u","tslope2u","tslope1v","tslope2v","zslope1","zslope2","curx1","curx2","curz1","curz2","curu1","curv1","curu2","curv2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","spanuStep","spanvStep","wStart","uStart","vStart","wBuffer","bob","color2","t2","t3","TriangleRasterizer","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","plane","getNormal","getDistance","mat","multiplyHom","angle","xScale","yScale","zScale","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","elapsedTime","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","element","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","scene","coords","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"bobs.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 136);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class BobScene extends AbstractScene {\n\n    private texture5: Texture;\n    private texture7: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(texture => this.texture5 = texture),\n            TextureUtils.load(require('../../assets/ball2.png'), true).then(texture => this.texture7 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.texture5.texture);\n        this.drawBobs(framebuffer, this.texture7, Date.now());\n    }\n\n    public drawBobs(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        let scaledTime = time * 0.2;\n        const BALL_SIZE = 16;\n        for (let i = 0; i < 30; i++) {\n            let x = (Math.cos(3 * scaledTime * 0.002 + i * 0.11) * (320 / 2 - BALL_SIZE / 2)) | 0;\n            let y = (Math.sin(4 * scaledTime * 0.002 + i * 0.11) * (200 / 2 - BALL_SIZE / 2)) | 0;\n\n            framebuffer.drawTextureNoClipAlpha(320 / 2 - BALL_SIZE / 2 + x, 200 / 2 - BALL_SIZE / 2 + y, texture);\n        }\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { BobScene } from './BobScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new BobScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","module.exports = __webpack_public_path__ + \"f4f2b50d7d886d02949a38f94c217a86.png\";","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}