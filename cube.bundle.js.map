{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/Vertex.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/geometrical-objects/Cube.ts","webpack:///./src/examples/cube/Application.ts","webpack:///./src/examples/cube/CubeScene.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","TextureCoordinate","u","v","Vertex","Geometry_1","CullFace_1","Vertex_1","texture_1","math_1","RandomNumberGenerator_1","Color_1","RightClipEdge_1","LeftClipEdge_1","TopClipEdge_1","BottomClipEdge_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","Framebuffer","width","height","cullMode","CullFace","BACK","torus","Torus","linerClipper","CohenSutherlandLineClipper","triangleRasterizer","TriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","renderingPipeline","FlatShadingRenderingPipeline","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","Uint32Array","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","wBuffer","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","framebuffer","face","texture","bob","texture2","data","set","color","toColor","count","fill","alpha2","index","alpha","inverseAlpha","g","b","red","start","j","text","xpos","firstIndex","charCodeAt","tx","floor","ty","drawTextureRectFastAlpha","interpolate","sin","Date","now","xs","ys","xt","yt","w","h","texIndex","frIndex","fbPixel","txPixel","min","drawBox2","readPixel","drawLineDDA","xoff","yoff","end","current","time","offset","round","fastFramebufferCopyOffset","startTime","fadeArray","Array","rng","default","setSeed","getFloat","clear","drawTextureRect","src","dest","k","elapsedTime","xdist","ydist","dist","angle","atan2","PI","color1","distScale","xp","yp","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","max","index2","textureIndex","alphaBlend","alphaScale","framebufferPixel","texturePixel","zDist","fastFramebufferCopy","Texture","drawScaledTextureClip","getBilinearFilteredPixel2","framebufferIndex","textureRowOffset","framebufferRowOffset","div","points","modelViewMartrix","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","forEach","element","transformed","multiply","push","nearPlaneClipping","t1","t2","cohenSutherlandLineClipper","project","ratio","t3","theta","phi","cos","maxWindow","minWindow","x1","y1","sphere","matrix","pos","sphereFunction2","getRadius","add","getCenter","multiplyHom","v1","v2","v3","file","disp","flat","scene","coords","normals","uv","vertices","ComputationalGeometryUtils","computeBoundingSphere","obj","faces","map","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","Color","WHITE","toPackedFormat","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","sub","normalize","vn2","vn3","divideSphere","pointsA","point","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","normal","vertex","textureCoordinate","tex","subject","output","clipRegion","edge","input","S","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","temp","drawTexture","drawTextureRectAdd","dx","dy","xDistance","yDistance","sign","xPosition","yPosition","wStart","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","AbstractClipEdge","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","Framebuffer_1","AbstractClipEdge_1","position","p1","p2","textCoord","AbstractRenderingPipeline","NEAR_PLANE_Z","det","v4","Texture_1","TextureUtils_1","TextureUtils","AbstractGeometricObject","cross","inverse","mesh","transformedPoints","transformedNormals","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","flatShading","lightDirection","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","renderConvexPolygon","zClipTriangle","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","computeColor","triangulateConvexPolygon","drawTriangleDDA","scalar","dot","AbstractGeometricObject_1","invert","super","frame","torusFunction","frame2","up","right","buildMesh","index_1","Sphere_1","Error","Sphere","center","radius","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tz","sx","sy","sz","result","vector","Promise","resolve","filename","transparency","image","Image","onload","getImageData","onerror","withAlpha","canvas","document","createElement","context","getContext","drawImage","conv","Canvas","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","init","then","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","xScale","yScale","zScale","plane","getNormal","getDistance","mat","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","p3","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition2","spanzStep","yDistanceLeft","yDistanceRight","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","color2","isInside","computeIntersection","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","AbstractScene","all","Cube","Canvas_1","CubeScene_1","CubeScene","appendTo","getElementById","main","Cube_1","AbstractScene_1","cubeMesh","setCullFace","BACKGROUND_COLOR","getModelViewMatrix"],"mappings":"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","file":"cube.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 106);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        let a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { CubeScene } from './CubeScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new CubeScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { FlatShadingRenderingPipeline } from '../../rendering-pipelines/FlatShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class CubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private renderingPipeline: FlatShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new FlatShadingRenderingPipeline(framebuffer);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const elapsedTime: number = Date.now() * 0.02;\n\n        framebuffer.clearColorBuffer(CubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        this.renderingPipeline.draw(this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime), 100, 200, 100);\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(0, 0, -9).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n"],"sourceRoot":""}