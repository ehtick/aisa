{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/examples/abstract-cube/Application.ts","webpack:///./src/examples/abstract-cube/AbstractCubeScene.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/assets/blurredBackground.png","webpack:///./src/blender/BlenderJsonParser.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Canvas_1","AbstractCubeScene_1","canvas","Canvas","AbstractCubeScene","appendTo","document","getElementById","init","main","BlenderJsonParser_1","FlatShadingRenderingPipeline_1","AbstractScene_1","texture_1","AbstractScene","accumulationBuffer","Uint32Array","renderingPipeline","FlatShadingRenderingPipeline","setCullFace","scene","BlenderJsonParser","parse","Promise","all","load","then","texture","blurred","generateProceduralNoise","noise","time","Date","now","fastFramebufferCopy","drawBlenderScene2","texture3","drawTexture","elapsedTime","clearDepthBuffer","camera","constructTranslationMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","mv","constructScaleMatrix","model","draw","constructZRotationMatrix","PI","cosineInterpolate","floor","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","frame2","up","right","pos","sin","add","cos","buildMesh","alpha","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","RandomNumberGenerator_1","resolve","rng","default","setSeed","getFloat","width","height","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","element","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","points2","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","num","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","dirt","blenderObj4","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","f","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"abstract-cube.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 164);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { AbstractCubeScene } from './AbstractCubeScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new AbstractCubeScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Canvas } from '../../Canvas';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix3f, Matrix4f, Vector3f } from '../../math';\nimport { TriangleRasterizer } from '../../rasterizer/TriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from '../../rendering-pipelines/FlatShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class AbstractCubeScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n    private renderingPipeline: FlatShadingRenderingPipeline;\n\n    private scene: Array<FlatshadedMesh>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new FlatShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.scene = BlenderJsonParser.parse(require('../../assets/stravaganza.json'), false);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.drawBlenderScene2(framebuffer, time);\n        /*\n            [\n                { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt);\n            */\n        const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene2(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model: FlatshadedMesh = this.scene[0];\n        this.renderingPipeline.draw(model, mv, 246, 165, 177);\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * framebuffer.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * framebuffer.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.scene[1];\n        this.renderingPipeline.draw(model, mv, 186, 165, 197);\n\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","module.exports = __webpack_public_path__ + \"bbaba2795420534ca9f0184e07fb74f8.png\";","import { FlatShadedFace } from '../geometrical-objects/Face';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\n\nexport class BlenderJsonParser {\n\n    public static parse(file: any, disp: boolean = true, flat: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    normal: f.normals[0],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}