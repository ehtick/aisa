{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/examples/torus-knot-tunnel/Application.ts","webpack:///./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/geometrical-objects/TorusKnot.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Canvas_1","TorusKnotTunnelScene_1","canvas","Canvas","TorusKnotTunnelScene","appendTo","document","getElementById","init","main","AbstractScene_1","texture_1","TorusKnot_1","AbstractScene","torusKnot","TorusKnot","accumulationBuffer","Uint32Array","setCullFace","FRONT","Promise","all","TextureUtils","generateProceduralNoise","then","texture","noise","generateProceduralParticleTexture2","particleTexture","time","Date","now","torusTunnel","texture3","Texture","drawTexture","fastFramebufferCopy","elapsedTime","sync","clearDepthBuffer","frame","torusFunction3","frame2","tangent","sub","normalize","up","add","right","cross","translation","constructIdentityMatrix","m14","m24","m34","rotation","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","multiplyMatrix","modelViewMartrix","constructScaleMatrix","constructYRotationMatrix","constructTranslationMatrix","constructXRotationMatrix","constructZRotationMatrix","renderingPipeline","draw","getMesh","ppoints","Array","j","PI","pos","sin","cos","push","ppoints2","forEach","element","transformed","project","multiply","sort","a","b","size","drawParticle","interpolate","alpha","Texture_1","TextureUtils_1","AbstractGeometricObject","points","index","normals","normal","inverse","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","torusFunction","buildMesh","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","matrix","m41","m42","m43","m44","inverseTranslation","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","RandomNumberGenerator_1","resolve","rng","default","setSeed","getFloat","width","height","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","points2","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","num","WHITE","drawLineDDANoZ","dirt","camera","mv","blenderObj4","model","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,uFClFA,IAAAC,EAAApC,EAAA,GAASE,EAAAmC,SAAAD,EAAAC,SACT,IAAAC,EAAAtC,EAAA,GAASE,EAAAqC,SAAAD,EAAAC,SAET,IAAAC,EAAAxC,EAAA,IAASE,EAAAuC,SAAAD,EAAAC,SACT,IAAAC,EAAA1C,EAAA,IAASE,EAAAyC,SAAAD,EAAAC,gGCJIJ,EAMTK,YAAYC,EAAWC,EAAUC,GAC7BC,KAAKH,EAAEA,EACPG,KAAKF,EAAEA,EACPE,KAAKD,EAAEA,EAGJH,KAAKK,GACR,OAAO,IAAIV,EAASS,KAAKH,EAAEI,EAAOD,KAAKF,EAAIG,EAAOD,KAAKD,EAAIE,GAG/DL,IAAIM,GACA,OAAO,IAAIX,EAASS,KAAKH,EAAIK,EAAIL,EAAGG,KAAKF,EAAII,EAAIJ,EAAGE,KAAKD,EAAIG,EAAIH,GAGrEH,KAAKO,EAAgBC,GAClBJ,KAAKH,EAAIM,EAAKN,EAAIO,EAAKP,EACvBG,KAAKF,EAAIK,EAAKL,EAAIM,EAAKN,EACvBE,KAAKD,EAAKI,EAAKJ,EAAIK,EAAKL,EAG3BH,IAAIS,GACA,OAAO,IAAId,EAASS,KAAKH,EAAIQ,EAAML,KAAKF,EAAIO,EAAML,KAAKD,EAAIM,GAG/DT,IAAIM,GACA,OAAO,IAAIX,EAASS,KAAKH,EAAIK,EAAIL,EAAGG,KAAKF,EAAII,EAAIJ,EAAGE,KAAKD,EAAIG,EAAIH,GAGrEH,KAAKM,EAAcE,GACfJ,KAAKH,EAAIK,EAAIL,EAAIO,EAAKP,EACtBG,KAAKF,EAAKI,EAAIJ,EAAIM,EAAKN,EACvBE,KAAKD,EAAKG,EAAIH,EAAIK,EAAKL,EAG3BH,MAAMM,GACF,OAAO,IAAIX,EAASS,KAAKF,EAAII,EAAIH,EAAIC,KAAKD,EAAIG,EAAIJ,EAC9CE,KAAKD,EAAIG,EAAIL,EAAIG,KAAKH,EAAIK,EAAIH,EAC9BC,KAAKH,EAAIK,EAAIJ,EAAIE,KAAKF,EAAII,EAAIL,GAGtCD,OAAOO,EAAeC,GAClBJ,KAAKH,EAAGM,EAAKL,EAAIM,EAAKL,EAAII,EAAKJ,EAAIK,EAAKN,EACxCE,KAAKF,EAAGK,EAAKJ,EAAIK,EAAKP,EAAIM,EAAKN,EAAIO,EAAKL,EACxCC,KAAKD,EAAGI,EAAKN,EAAIO,EAAKN,EAAIK,EAAKL,EAAIM,EAAKP,EAG5CD,SACI,OAAOU,KAAKC,KAAKP,KAAKH,EAAEG,KAAKH,EAAGG,KAAKF,EAAEE,KAAKF,EAAGE,KAAKD,EAAEC,KAAKD,GAG/DH,YACI,IAAIY,EAAO,EAAIR,KAAKS,SACpB,OAAOT,KAAKU,IAAIF,GAGpBZ,aACI,IAAIY,EAAO,EAAIR,KAAKS,SACrBT,KAAKH,GAAKW,EACVR,KAAKF,GAAKU,EACVR,KAAKD,GAAKS,EAGbZ,IAAIM,GACA,OAAOF,KAAKH,EAAEK,EAAIL,EAAEG,KAAKF,EAAEI,EAAIJ,EAAEE,KAAKD,EAAEG,EAAIH,GArEpD7C,EAAAqC,6FCAA,MAAAoB,EAAA3D,EAAA,GACAsC,EAAAtC,EAAA,GACA4D,EAAA5D,EAAA,GACA6D,EAAA7D,EAAA,GACAoC,EAAApC,EAAA,GAEAE,EAAA4D,4BAAmCD,EAAAE,iBAExBnB,SAASV,GACZ,OAAOA,EAAEW,EAAI,IAGVD,UAAUV,GACb,OAAOA,EAAE8B,SAASnB,EAAI,IAGnBD,oBAAoBqB,EAAcC,GACrC,OAAO,IAAI5B,EAAAC,SAASoB,EAAAQ,YAAYC,UAAUvB,EAAI,EAC1CS,KAAKe,MAAMJ,EAAGnB,GAAKoB,EAAGpB,EAAImB,EAAGnB,IAAMa,EAAAQ,YAAYC,UAAUvB,EAAI,EAAIoB,EAAGpB,IAAMqB,EAAGrB,EAAIoB,EAAGpB,IACpF,GAAK,EAAIoB,EAAGlB,GAAK,EAAImB,EAAGnB,EAAI,EAAIkB,EAAGlB,IAAMY,EAAAQ,YAAYC,UAAUvB,EAAI,EAAIoB,EAAGpB,IAAMqB,EAAGrB,EAAIoB,EAAGpB,KAG3FD,qBAAqBqB,EAAYC,GACpC,IAAII,EAAS,IAAIV,EAAAW,OACjBD,EAAON,SACH,IAAI5B,EAAAC,SAASsB,EAAAQ,YAAYC,UAAUvB,EAAI,EACnCS,KAAKe,MAAMJ,EAAGD,SAASlB,GAAKoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAMa,EAAAQ,YAAYC,UAAUvB,EAAI,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAC1I,GAAK,EAAIoB,EAAGD,SAASjB,GAAK,EAAImB,EAAGF,SAASjB,EAAI,EAAIkB,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYC,UAAUvB,EAAI,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,KAExJ,IAAI2B,EAAY,IAAIZ,EAAAa,kBAChB1B,EAAIuB,EAAON,SAASjB,EAKxB,OAJAyB,EAAUE,GAAKT,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBD,EAAIR,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYC,UAAUvB,EAAI,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAAME,EAC/NyB,EAAUI,GAAKX,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBC,EAAIV,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYC,UAAUvB,EAAI,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAAME,EAE/NuB,EAAOK,kBAAoBH,EACpBF,sFCnCf,MAAAT,EAAA7D,EAAA,GACAsC,EAAAtC,EAAA,GACA4D,EAAA5D,EAAA,GACA2D,EAAA3D,EAAA,GACAoC,EAAApC,EAAA,GAEAE,EAAA2E,2BAAkChB,EAAAE,iBAEvBnB,SAASV,GACZ,OAAOA,EAAEW,GAAK,EAGXD,UAAUV,GACb,OAAOA,EAAE8B,SAASnB,GAAK,EAGpBD,oBAAoBqB,EAAcC,GACrC,OAAO,IAAI5B,EAAAC,SAASoB,EAAAQ,YAAYW,UAAUjC,EACtCS,KAAKe,MAAMJ,EAAGnB,GAAKoB,EAAGpB,EAAImB,EAAGnB,IAAMa,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGpB,IAAMqB,EAAGrB,EAAIoB,EAAGpB,IAChF,GAAK,EAAIoB,EAAGlB,GAAK,EAAImB,EAAGnB,EAAI,EAAIkB,EAAGlB,IAAMY,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGpB,IAAMqB,EAAGrB,EAAIoB,EAAGpB,KAGvFD,qBAAqBqB,EAAYC,GACpC,IAAII,EAAS,IAAIV,EAAAW,OACjBD,EAAON,SACH,IAAI5B,EAAAC,SAASsB,EAAAQ,YAAYW,UAAUjC,EAC/BS,KAAKe,MAAMJ,EAAGD,SAASlB,GAAKoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAMa,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IACtI,GAAK,EAAIoB,EAAGD,SAASjB,GAAK,EAAImB,EAAGF,SAASjB,EAAI,EAAIkB,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,KAEpJ,IAAI2B,EAAY,IAAIZ,EAAAa,kBAChB1B,EAAIuB,EAAON,SAASjB,EAKxB,OAJAyB,EAAUE,GAAKT,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBD,EAAIR,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAAME,EAC3NyB,EAAUI,GAAKX,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBC,EAAIV,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAAME,EAC3NuB,EAAOK,kBAAoBH,EAEpBF,sFCnCf,MAAAX,EAAA3D,EAAA,GACA+E,EAAA/E,EAAA,GACA4D,EAAA5D,EAAA,GACA6D,EAAA7D,EAAA,GAEAE,EAAA8E,0BAAiCnB,EAAAE,iBAEtBnB,SAASV,GACZ,OAAOA,EAAEY,EAAIa,EAAAQ,YAAYC,UAAUtB,EAAI,EAGpCF,UAAUV,GACb,OAAOA,EAAE8B,SAASlB,EAAIa,EAAAQ,YAAYC,UAAUtB,EAAI,EAG7CF,oBAAoBqB,EAAcC,GACrC,OAAO,IAAIa,EAAAxC,SACPe,KAAKe,MAAMJ,EAAGpB,GAAKqB,EAAGrB,EAAIoB,EAAGpB,IAAMc,EAAAQ,YAAYC,UAAUtB,EAAI,EAAImB,EAAGnB,IAAMoB,EAAGpB,EAAImB,EAAGnB,IACpFa,EAAAQ,YAAYC,UAAUtB,EAAI,EAC1B,GAAK,EAAImB,EAAGlB,GAAK,EAAImB,EAAGnB,EAAI,EAAIkB,EAAGlB,IAAMY,EAAAQ,YAAYC,UAAUtB,EAAI,EAAImB,EAAGnB,IAAMoB,EAAGpB,EAAImB,EAAGnB,KAG3FF,qBAAqBqB,EAAYC,GACpC,IAAII,EAAS,IAAIV,EAAAW,OACjBD,EAAON,SACH,IAAIe,EAAA1C,SACAiB,KAAKe,MAAMJ,EAAGD,SAASnB,GAAKqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAAMc,EAAAQ,YAAYC,UAAUtB,EAAI,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAC1Ia,EAAAQ,YAAYC,UAAUtB,EAAI,EAC1B,GAAK,EAAImB,EAAGD,SAASjB,GAAK,EAAImB,EAAGF,SAASjB,EAAI,EAAIkB,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYC,UAAUtB,EAAI,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,KAExJ,IAAI0B,EAAY,IAAIZ,EAAAa,kBAChB1B,EAAIuB,EAAON,SAASjB,EAKxB,OAJAyB,EAAUE,GAAKT,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBD,EAAIR,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYC,UAAUtB,EAAI,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAMC,EAC/NyB,EAAUI,GAAKX,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBC,EAAIV,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYC,UAAUtB,EAAI,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAMC,EAE/NuB,EAAOK,kBAAoBH,EACpBF,sFCpCf,MAAAX,EAAA3D,EAAA,GACA+E,EAAA/E,EAAA,GACA4D,EAAA5D,EAAA,GACA6D,EAAA7D,EAAA,GAEAE,EAAA+E,6BAAoCpB,EAAAE,iBAEzBnB,SAASV,GACZ,OAAOA,EAAEY,GAAKa,EAAAQ,YAAYW,UAAUhC,EAGjCF,UAAUV,GACb,OAAOA,EAAE8B,SAASlB,GAAKa,EAAAQ,YAAYW,UAAUhC,EAG1CF,oBAAoBqB,EAAcC,GACrC,OAAO,IAAIa,EAAAxC,SACPe,KAAKe,MAAMJ,EAAGpB,GAAKqB,EAAGrB,EAAIoB,EAAGpB,IAAMc,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGnB,IAAMoB,EAAGpB,EAAImB,EAAGnB,IAChFa,EAAAQ,YAAYW,UAAUhC,EACtB,GAAK,EAAImB,EAAGlB,GAAK,EAAImB,EAAGnB,EAAI,EAAIkB,EAAGlB,IAAMY,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGnB,IAAMoB,EAAGpB,EAAImB,EAAGnB,KAGvFF,qBAAqBqB,EAAYC,GACpC,MAAMI,EAAiB,IAAIV,EAAAW,OAC3BD,EAAON,SACH,IAAIe,EAAA1C,SACAiB,KAAKe,MAAMJ,EAAGD,SAASnB,GAAKqB,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,IAAMc,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IACtIa,EAAAQ,YAAYW,UAAUhC,EACtB,GAAK,EAAImB,EAAGD,SAASjB,GAAK,EAAImB,EAAGF,SAASjB,EAAI,EAAIkB,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,KAEpJ,MAAM0B,EAA+B,IAAIZ,EAAAa,kBACnC1B,EAAYuB,EAAON,SAASjB,EAKlC,OAJAyB,EAAUE,GAAKT,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBD,EAAIR,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBD,EAAIT,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAMC,EAC3NyB,EAAUI,GAAKX,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,GAAKmB,EAAGS,kBAAkBC,EAAIV,EAAGF,SAASjB,EAAIkB,EAAGU,kBAAkBC,EAAIX,EAAGD,SAASjB,IAAMY,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGD,SAASlB,IAAMoB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAMC,EAC3NuB,EAAOK,kBAAoBH,EAEpBF,sFCpCf,MAAAY,EAAAlF,EAAA,GAGAE,EAAAiF,gCAKIvC,YAAsBwC,GAAApC,KAAAoC,cAHfpC,KAAAqC,cAAwB,IACvBrC,KAAAsC,SAAqBJ,EAAAK,SAASC,KAI/B5C,YAAY6C,GACfzC,KAAKsC,SAAWG,EAGb7C,qBAAqBV,GACxB,OAAOA,EAAEa,EAAIC,KAAKqC,aAkBfzC,cAAc8C,EACAC,EACAC,GACjB,MAAMC,EACFH,EAAG7C,EAAI8C,EAAG7C,EAAI6C,EAAG9C,EAAI6C,EAAG5C,EACxB6C,EAAG9C,EAAI+C,EAAG9C,EAAI8C,EAAG/C,EAAI8C,EAAG7C,EACxB8C,EAAG/C,EAAI6C,EAAG5C,EAAI4C,EAAG7C,EAAI+C,EAAG9C,EAC5B,OAAIE,KAAKsC,WAAaJ,EAAAK,SAASC,KACpBK,EAAM,EAENA,EAAM,EAIdjD,eAAe8C,EACAC,EACAC,EACAE,GAClB,MAAMD,EACFH,EAAG7C,EAAI8C,EAAG7C,EAAI6C,EAAG9C,EAAI6C,EAAG5C,EACxB6C,EAAG9C,EAAI+C,EAAG9C,EAAI8C,EAAG/C,EAAI8C,EAAG7C,EACxB8C,EAAG/C,EAAIiD,EAAGhD,EAAIgD,EAAGjD,EAAI+C,EAAG9C,EACxBgD,EAAGjD,EAAI6C,EAAG5C,EAAI4C,EAAG7C,EAAIiD,EAAGhD,EAC5B,OAAIE,KAAKsC,WAAaJ,EAAAK,SAASC,KACpBK,EAAM,EAENA,EAAM,uFC3DzB,MAAAE,EAAA/F,EAAA,IACAgG,EAAAhG,EAAA,YAIW4C,cACH,MAAMqD,EAAiB,IAAIF,EAAAG,OAAO,IAAK,IAAK,IAAIF,EAAAG,sBAChDF,EAAOG,SAASC,SAASC,eAAe,SACxCL,EAAOM,UAKHC,0FCZZ,MAAAtB,EAAAlF,EAAA,GAEA+E,EAAA/E,EAAA,GACAyG,EAAAzG,EAAA,IACA0G,EAAA1G,EAAA,IACA2G,EAAA3G,EAAA,IAEAE,EAAAiG,mCAA0CM,EAAAG,cAA1ChE,kCAIYI,KAAA6D,UAAY,IAAIF,EAAAG,UAEhB9D,KAAA+D,mBAAkC,IAAIC,YAAY,MAEnDpE,KAAKwC,GAER,OADAA,EAAY6B,YAAY/B,EAAAK,SAAS2B,OAC1BC,QAAQC,KACXV,EAAAW,aAAaC,0BAA0BC,KAAMC,GAAqBxE,KAAKyE,MAAQD,GAC/Ed,EAAAW,aAAaK,qCAAqCH,KAAMC,GAAqBxE,KAAK2E,gBAAkBH,KAUrG5E,OAAOwC,GACV,MAAMwC,EAAeC,KAAKC,MAE1B9E,KAAK+E,YAAY3C,EAAoB,IAAPwC,EAAaC,KAAKC,MAAO9E,KAAK2E,iBAE5D,MAAMK,EAAoB,IAAItB,EAAAuB,QAAQjF,KAAK+D,mBAAoB,IAAK,KACpE3B,EAAY8C,YAAY,EAAG,EAAGF,EAAU,KACxC5C,EAAY+C,oBAAoBnF,KAAK+D,mBAAoB3B,EAAYA,aACrEA,EAAYqC,MAAMG,EAAM5E,KAAKyE,OAG1B7E,YAAYwC,EAA0BgD,EAAqBC,EAAcb,GAC5EpC,EAAYkD,mBAEZ,IAEIC,EAAQvF,KAAKwF,eAA6B,IAAdJ,GAC5BK,EAASzF,KAAKwF,eAA6B,IAAdJ,EAAqB,KAElDM,EAAUD,EAAOE,IAAIJ,GAAOK,YAC5BC,EAAKN,EAAMO,IAAIL,GAAQG,YACvBG,EAAQL,EAAQM,MAAMH,GAAID,YAC9BC,EAAKE,EAAMC,MAAMN,GAASE,YAE1B,IAAIK,EAAclE,EAAApC,SAASuG,0BAE3BD,EAAYE,KAAOZ,EAAM1F,EACzBoG,EAAYG,KAAOb,EAAMzF,EACzBmG,EAAYI,KAAOd,EAAMxF,EAEzB,IAAIuG,EAAWvE,EAAApC,SAASuG,0BAExBI,EAASC,IAAMR,EAAMlG,EACrByG,EAASE,IAAMT,EAAMjG,EACrBwG,EAASG,IAAMV,EAAMhG,EAGrBuG,EAASI,IAAMb,EAAGhG,EAClByG,EAASK,IAAMd,EAAG/F,EAClBwG,EAASM,IAAMf,EAAG9F,EAGlBuG,EAASO,KAAOnB,EAAQ7F,EACxByG,EAASQ,KAAOpB,EAAQ5F,EACxBwG,EAASS,KAAOrB,EAAQ3F,EAExB,IAAIiH,EAAcV,EAASW,YAAYC,eAAejB,GAElDkB,EAAmBpF,EAAApC,SAASyH,qBAlCpB,OAkC8DF,eAAenF,EAAApC,SAAS0H,yBAAuC,KAAdjC,IAC3H+B,EAAmBpF,EAAApC,SAAS2H,2BAA2B,EAAG,GAAI,IAAIJ,eAAeC,EAAiBD,eAAenF,EAAApC,SAAS4H,yBAAuC,IAAdnC,KACnJ+B,EAAmBpF,EAAApC,SAAS6H,yBAAuC,IAAdpC,GAAoB8B,eAAeF,GAExF5E,EAAYqF,kBAAkBC,KAAK1H,KAAK6D,UAAU8D,UAAWR,EAAkB,IAAK,GAAI,IAExF,IAAIS,EAAU,IAAIC,MAGlB,IAAK,IAAIC,EAAI,EAAGA,EAFJ,GAEaA,IAAK,CAC1B,IAAIvC,EAAQvF,KAAKwF,eAAmB,EAAJsC,EAAQxH,KAAKyH,GAHrC,IAIJtC,EAASzF,KAAKwF,eAAmB,EAAJsC,EAAQxH,KAAKyH,GAJtC,GAIiD,IAErDrC,EAAUD,EAAOE,IAAIJ,GACrBM,EAAKN,EAAMO,IAAIL,GAAQG,YACvBG,EAAQL,EAAQM,MAAMH,GAAID,YAAYlF,IAAI,MAC9CmF,EAAKE,EAAMC,MAAMN,GAASE,YAAYlF,IAAI,MAE1C,IAAK,IAAIxC,EAAI,EAAGA,EAVJ,GAUiBA,IAAK,CAC9B,IAAI8J,EAAMnC,EAAGnF,IAAIJ,KAAK2H,IAAQ,EAAJ/J,EAAQoC,KAAKyH,GAX/B,KAW8CjC,IAAIC,EAAMrF,IAAIJ,KAAK4H,IAAQ,EAAJhK,EAAQoC,KAAKyH,GAXlF,MAWkGjC,IAAIP,GAC9GqC,EAAQO,KAAK,IAAIpG,EAAAxC,SAASyI,EAAInI,EAAGmI,EAAIlI,EAAGkI,EAAIjI,KAKpD,IAAIqI,EAA4B,IAAIP,MAAgBD,EAAQnH,QAC5DmH,EAAQS,QAAQC,IAGZ,IAAIC,EAAcnG,EAAYoG,QAAQrB,EAAiBsB,SAASH,IAEhEF,EAASD,KAAKI,KAGlBH,EAASM,KAAK,SAAUC,EAAGC,GACvB,OAAOD,EAAE5I,EAAI6I,EAAE7I,IAGnBqI,EAASC,QAAQC,IAEb,IAAIO,EAAe,KAAN,IAAaP,EAAS,EAC/BA,EAAQvI,GAAK,GACjBqC,EAAY0G,aACJxI,KAAKe,MAAMiH,EAAQzI,EAAIgJ,EAAO,GAC9BvI,KAAKe,MAAMiH,EAAQxI,EAAI+I,EAAO,GAC9BvI,KAAKe,MAAMwH,GAAOvI,KAAKe,MAAMwH,GAAOrE,EAAS,EAAI8D,EAAQvI,EAAGqC,EAAY2G,aAAa,IAAK,GAAIT,EAAQvI,MAI9GH,eAAeoJ,GACnB,IACI9K,EAAI,IAAO,EAAIoC,KAAK2H,IADT,EACiBe,IAChC,OAAO,IAAIjH,EAAA1C,SAASnB,EAAIoC,KAAK4H,IAFrB,EAE6Bc,GACjC9K,EAAIoC,KAAK4H,IAHE,EAGMc,GACjB9K,EAAIoC,KAAK2H,IAJL,EAIae,IAAQtI,IAAI,wFCpIzC,IAAAuI,EAAAjM,EAAA,GAASE,EAAA+H,QAAAgE,EAAAhE,QACT,IAAAiE,EAAAlM,EAAA,IAASE,EAAAmH,aAAA6E,EAAA7E,+FCDT,MAAAtC,EAAA/E,EAAA,GAIAE,EAAAiM,8BAKcvJ,UAAUwJ,EAAyBC,GACzC,MAAMC,EAA2B,IAAIzB,MAKrC,IAAK,IAAIzK,EAAI,EAAGA,EAAIiM,EAAM5I,OAAQrD,GAAK,EAAG,CACtC,IAAImM,EAASH,EAAOC,EAAMjM,EAAI,IAAIuI,IAAIyD,EAAOC,EAAMjM,KAAK4I,MAAMoD,EAAOC,EAAMjM,EAAI,IAAIuI,IAAIyD,EAAOC,EAAMjM,MACpGkM,EAAQnB,KAAKnI,KAAKwJ,QAAUD,EAAO3D,YAAYlF,KAAK,GAAK6I,EAAO3D,aAIpE,IAAI6D,EAA+B,IAAI5B,MAEvC,IAAK,IAAIzK,EAAI,EAAGA,EAAIiM,EAAM5I,OAAQrD,GAAK,EAEnCqM,EAAMtB,MACFzF,GAAI2G,EAAM,EAAIjM,GACduF,GAAI0G,EAAM,EAAIjM,GACdwF,GAAIyG,EAAM,EAAIjM,GACdmM,OAAQnM,EAAI,IAKpB4C,KAAK0J,MACDN,OAAQA,EACRE,QAASA,EACTG,MAAOA,EACPE,kBAAmBP,EAAOQ,IAAI,IAAM,IAAI7H,EAAA1C,SAAS,EAAG,EAAG,EAAG,IAC1DwK,mBAAoBP,EAAQM,IAAI,IAAM,IAAI7H,EAAA1C,SAAS,EAAG,EAAG,EAAG,KAI7DO,UACH,OAAOI,KAAK0J,yFC5CpB,MAAAI,EAAA9M,EAAA,GAEA+E,EAAA/E,EAAA,GAEA+M,EAAA/M,EAAA,IACAgN,EAAAhN,EAAA,IAeAE,EAAA+M,2CAAkDD,EAAA7H,0BAAlDvC,kCAEWI,KAAAkK,aAAuB,EACtBlK,KAAAmK,eAA2B,IAAIpI,EAAA1C,SAAS,GAAK,GAAK,GAAK,GAAKuG,YAE7DhG,KAAK8J,EAAsBvC,EACtBiD,EAAaC,EAAeC,GAEpC,MAAMC,EAAyBpD,EAAiBqD,sBAEhD,IAAK,IAAIpN,EAAY,EAAGA,EAAIsM,EAAKJ,QAAQ7I,OAAQrD,IAC7CmN,EAAaE,eAAef,EAAKJ,QAAQlM,GAAIsM,EAAKG,mBAAmBzM,IAGzE,IAAK,IAAIA,EAAY,EAAGA,EAAIsM,EAAKN,OAAO3I,OAAQrD,IAC5C+J,EAAiBsD,eAAef,EAAKN,OAAOhM,GAAIsM,EAAKC,kBAAkBvM,IAG3E,IAAK,IAAIA,EAAY,EAAGA,EAAIsM,EAAKD,MAAMhJ,OAAQrD,IAAK,CAChD,MAAMsF,EAAegH,EAAKC,kBAAkBD,EAAKD,MAAMrM,GAAGsF,IACpDC,EAAe+G,EAAKC,kBAAkBD,EAAKD,MAAMrM,GAAGuF,IACpDC,EAAe8G,EAAKC,kBAAkBD,EAAKD,MAAMrM,GAAGwF,IAEpD2G,EAAmBG,EAAKG,mBAAmBH,EAAKD,MAAMrM,GAAGmM,QAE/D,GAAIvJ,KAAK0K,qBAAqBhI,IAAO1C,KAAK0K,qBAAqB/H,IAAO3C,KAAK0K,qBAAqB9H,GAAK,CACjG,MAAM+H,GACF3K,KAAKoC,YAAYoG,QAAQ9F,GACzB1C,KAAKoC,YAAYoG,QAAQ7F,GACzB3C,KAAKoC,YAAYoG,QAAQ5F,IAG7B5C,KAAK4K,oBAAoBD,EAAWpB,EAAQa,EAAKC,EAAOC,OACrD,MAAKtK,KAAK0K,qBAAqBhI,IACjC1C,KAAK0K,qBAAqB/H,IAC1B3C,KAAK0K,qBAAqB9H,IAC3B,SACG,CACH,MAAMiI,EAA0B7K,KAAK8K,cAAc,IAAIjD,MAAgBnF,EAAIC,EAAIC,IAE/E,GAAIiI,EAAOpK,OAAS,EAChB,OAGJ,MAAMkK,EAA6BE,EAAOjB,IAAehI,GAC9C5B,KAAKoC,YAAYoG,QAAQ5G,IAGpC5B,KAAK4K,oBAAoBD,EAAWpB,EAAQa,EAAKC,EAAOC,MAK7D1K,6BAA6BqB,EAAcC,GAC9C,MAAM6J,GAAiB/K,KAAKqC,aAAepB,EAAGlB,IAAMmB,EAAGnB,EAAIkB,EAAGlB,GAC9D,OAAO,IAAIgC,EAAA1C,SACP0L,GAAS7J,EAAGrB,EAAIoB,EAAGpB,GAAKoB,EAAGpB,EAC3BkL,GAAS7J,EAAGpB,EAAImB,EAAGnB,GAAKmB,EAAGnB,EAC3BE,KAAKqC,cAINzC,cAAcoL,GACjB,MAAMC,EAAyBD,EACzBH,EAA0B,IAAIhD,MACpC,IAAIqD,EAAcD,EAAMA,EAAMxK,OAAS,GAEvC,IAAK,IAAIrD,EAAY,EAAGA,EAAI6N,EAAMxK,OAAQrD,IAAK,CAC3C,MAAM+N,EAAkBF,EAAM7N,GAC1B4C,KAAK0K,qBAAqBS,IACrBnL,KAAK0K,qBAAqBQ,IAC3BL,EAAO1C,KAAKnI,KAAKoL,6BAA6BF,EAAGC,IAErDN,EAAO1C,KAAKgD,IACLnL,KAAK0K,qBAAqBQ,IACjCL,EAAO1C,KAAKnI,KAAKoL,6BAA6BF,EAAGC,IAErDD,EAAIC,EAGR,OAAON,EAGHjL,oBAAoB+K,EAA4BpB,EAC5Ba,EAAaC,EAAeC,GACpD,GAAyB,IAArBK,EAAUlK,SACTT,KAAKqL,cAAcV,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAC1D,OAGJ,GAAyB,IAArBA,EAAUlK,SACTT,KAAKsL,eACFX,EAAU,GACVA,EAAU,GACVA,EAAU,GACVA,EAAU,IAEd,OAGJ,MAAMY,EAAkCxB,EAAAyB,2BAA2BC,kBAAkBd,GAErF,GAAIY,EAAe9K,OAAS,EACxB,OAGJ,MAAMiL,EAAgB1L,KAAK2L,aAAapC,EAAQvJ,KAAKmK,eAAgBC,EAAKC,EAAOC,GAEjFtK,KAAK4L,yBAAyBL,EAAgBG,GAG1C9L,yBAAyB2L,EAAiCG,GAC9D,IAAK,IAAI5D,EAAY,EAAGA,EAAIyD,EAAe9K,OAAS,EAAGqH,IACnD9H,KAAKoC,YAAYyJ,mBAAmBC,gBAChCP,EAAe,GACfA,EAAe,EAAIzD,GACnByD,EAAe,EAAIzD,GACnB4D,GAKJ9L,aAAa2J,EAAkBY,EAA0BC,EAAaC,EAAeC,GAEzF,GAAItK,KAAKkK,YACL,OAAO,KAAO,GAAKI,GAAQ,GAAKD,GAAS,EAAID,EAIjD,IAAI2B,EAAiBzL,KAAK0L,IAAK1L,KAAK2L,IAAI,EAAK1C,EAAO2C,IAAI/B,IAAmB,GAE3E,OADA4B,EAAkB,IAATA,EAAgB,IAClB,IAAIjC,EAAAqC,MAAMJ,EAAS3B,EAAK2B,EAAS1B,EAAO0B,EAASzB,EAAM,KAAK8B,qGCvJ3E,MAAAhN,EAAApC,EAAA,GACAqP,EAAArP,EAAA,IAEAsC,EAAAtC,EAAA,GAEAE,EAAAoP,oBAA2BD,EAAAlD,wBAEvBvJ,YAAmB2M,GAAkB,GACjCC,QAEA,MAAMpD,KAONpJ,KAAKwJ,QAAU+C,EAEf,IAAK,IAAInP,EAAI,EAAGA,EAPF,GAOaA,IAAK,CAC5B,IAAImI,EAAQvF,KAAKyM,cAAkB,EAAJrP,EAAQkD,KAAKyH,GARlC,IASNtC,EAASzF,KAAKyM,cAAkB,EAAJrP,EAAQkD,KAAKyH,GATnC,GASgD,IACtDlC,EAAK,IAAIvG,EAAAC,SAAS,EAAK,EAAK,GAC5BwG,EAAQN,EAAOE,IAAIJ,GAAOS,MAAMH,GAEpC,IAAK,IAAI3H,EAAI,EAAGA,EAZL,GAYiBA,IAAK,CAC7B,IAAI8J,EAAMnC,EAAGnF,IAAIJ,KAAK2H,IAAQ,EAAJ/J,EAAQoC,KAAKyH,GAbhC,KAa8CjC,IAAIC,EAAMrF,IAAIJ,KAAK4H,IAAQ,EAAJhK,EAAQoC,KAAKyH,GAblF,MAaiGjC,IAAIP,GAC5G6D,EAAOjB,KAAK,IAAI/I,EAAAC,SAAS2I,EAAInI,EAAGmI,EAAIlI,EAAGkI,EAAIjI,EAAG,KAItD,MAAMsJ,KAEN,IAAK,IAAIvB,EAAI,EAAGA,EArBF,GAqBaA,IACvB,IAAK,IAAI1K,EAAI,EAAGA,EArBL,GAqBiBA,IACxBiM,EAAMlB,MAtBC,GAsBeL,GAAM,EAAI1K,GAtBzB,IAsBwCgM,EAAO3I,QACtD4I,EAAMlB,MAvBC,GAuBeL,GAAM,EAAI1K,GAvBzB,IAuBwCgM,EAAO3I,QACtD4I,EAAMlB,MAxBC,GAwBeL,EAxBf,IAwB8B,EAAI1K,GAxBlC,IAwBiDgM,EAAO3I,QAC/D4I,EAAMlB,MAzBC,GAyBeL,EAzBf,IAyB8B,EAAI1K,GAzBlC,IAyBiDgM,EAAO3I,QAC/D4I,EAAMlB,MA1BC,GA0BeL,EA1Bf,IA0B8B,EAAI1K,GA1BlC,IA0BiDgM,EAAO3I,QAC/D4I,EAAMlB,MA3BC,GA2BeL,GAAM,EAAI1K,GA3BzB,IA2BwCgM,EAAO3I,QAI9DT,KAAK0M,UAAUtD,EAAQC,GAGpBzJ,cAAcoJ,GACjB,OAAO,IAAI1J,EAAAC,SAA2B,GAAlBe,KAAK2H,IAAIe,GAAa,EAAqB,GAAlB1I,KAAK4H,IAAIc,wFChD9D,MAAA2D,EAAA3P,EAAA,GACA4P,EAAA5P,EAAA,IAEAE,EAAA2P,iCAEWjN,sBAAsBkN,GAEzB,GAAwB,IAApBA,EAASrM,OACT,MAAM,IAAIsM,MAAM,kCAGpB,GAAwB,IAApBD,EAASrM,OACT,OAAO,IAAImM,EAAAI,OAAOF,EAAS,GAAI,GAGnC,IAAIG,EAAS,IAAIN,EAAAtN,SAAS,EAAG,EAAG,EAAG,GAC/B6N,EAAS,EAYb,OAVAJ,EAASzE,QAAQ8C,IACb8B,EAASA,EAAOnH,IAAI,IAAI6G,EAAAtN,SAAS8L,EAAMtL,EAAGsL,EAAMrL,EAAGqL,EAAMpL,EAAG,MAGhEkN,EAASA,EAAOvM,IAAI,EAAMoM,EAASrM,QAEnCqM,EAASzE,QAAQ8C,IACb+B,EAAS5M,KAAK2L,IAAIiB,EAAQD,EAAOtH,IAAIwF,GAAO1K,YAGzC,IAAImM,EAAAI,OAAOC,EAAQC,sFC1BlChQ,EAAAuE,wBAII7B,YAAY8B,EAAYE,GACpB5B,KAAK0B,EAAIA,EACT1B,KAAK4B,EAAIA,IAIjB1E,EAAAqE,iGCIA,MAAAjC,EAAAtC,EAAA,GACAoC,EAAApC,EAAA,SAGa2C,EAsBTC,iCACI,IAAIuN,EAAmB,IAAIxN,EAsB3B,OApBAwN,EAAO5G,IAAM,EACb4G,EAAOzG,IAAM,EACbyG,EAAOtG,IAAM,EACbsG,EAAOhH,IAAM,EAEbgH,EAAO3G,IAAM,EACb2G,EAAOxG,IAAM,EACbwG,EAAOrG,IAAM,EACbqG,EAAO/G,IAAM,EAEb+G,EAAO1G,IAAM,EACb0G,EAAOvG,IAAM,EACbuG,EAAOpG,IAAM,EACboG,EAAO9G,IAAM,EAEb8G,EAAOC,IAAM,EACbD,EAAOE,IAAM,EACbF,EAAOG,IAAM,EACbH,EAAOI,IAAM,EAENJ,EAGJvN,YACH,IAAIqH,EAAY,IAAItH,EAsBpB,OApBAsH,EAAUV,IAAMvG,KAAKuG,IACrBU,EAAUP,IAAM1G,KAAKwG,IACrBS,EAAUJ,IAAM7G,KAAKyG,IACrBQ,EAAUd,IAAMnG,KAAKoN,IAErBnG,EAAUT,IAAMxG,KAAK0G,IACrBO,EAAUN,IAAM3G,KAAK2G,IACrBM,EAAUH,IAAM9G,KAAK4G,IACrBK,EAAUb,IAAMpG,KAAKqN,IAErBpG,EAAUR,IAAMzG,KAAK6G,IACrBI,EAAUL,IAAM5G,KAAK8G,IACrBG,EAAUF,IAAM/G,KAAK+G,IACrBE,EAAUZ,IAAMrG,KAAKsN,IAErBrG,EAAUmG,IAAMpN,KAAKmG,IACrBc,EAAUoG,IAAMrN,KAAKoG,IACrBa,EAAUqG,IAAMtN,KAAKqG,IACrBY,EAAUsG,IAAMvN,KAAKuN,IAEdtG,EAGJrH,sBAIH,OAAOI,KAAKwJ,UAAUvC,YAGnBrH,UAKH,IAAI4N,EAAqB7N,EAASuG,0BAClCsH,EAAmBrH,KAAOnG,KAAKmG,IAC/BqH,EAAmBpH,KAAOpG,KAAKoG,IAC/BoH,EAAmBnH,KAAOrG,KAAKqG,IAE/B,IAAIpG,EAAQ,EAAMK,KAAKC,KAAKP,KAAKuG,IAAMvG,KAAKuG,IAAMvG,KAAK0G,IAAM1G,KAAK0G,IAAM1G,KAAK6G,IAAM7G,KAAK6G,KACpF4G,EAAkB9N,EAASuG,0BAa/B,OAZAuH,EAAgBlH,IAAMvG,KAAKuG,IAAMtG,EACjCwN,EAAgBjH,IAAMxG,KAAK0G,IAAMzG,EACjCwN,EAAgBhH,IAAMzG,KAAK6G,IAAM5G,EAEjCwN,EAAgB/G,IAAM1G,KAAKwG,IAAMvG,EACjCwN,EAAgB9G,IAAM3G,KAAK2G,IAAM1G,EACjCwN,EAAgB7G,IAAM5G,KAAK8G,IAAM7G,EAEjCwN,EAAgB5G,IAAM7G,KAAKyG,IAAMxG,EACjCwN,EAAgB3G,IAAM9G,KAAK4G,IAAM3G,EACjCwN,EAAgB1G,IAAM/G,KAAK+G,IAAM9G,EAE1BwN,EAAgBvG,eAAesG,GAGnC5N,qBACH,IACI6N,EAAkB9N,EAASuG,0BAa/B,OAZAuH,EAAgBlH,IAFJ,EAEUvG,KAAKuG,IAC3BkH,EAAgBjH,IAHJ,EAGUxG,KAAK0G,IAC3B+G,EAAgBhH,IAJJ,EAIUzG,KAAK6G,IAE3B4G,EAAgB/G,IANJ,EAMU1G,KAAKwG,IAC3BiH,EAAgB9G,IAPJ,EAOU3G,KAAK2G,IAC3B8G,EAAgB7G,IARJ,EAQU5G,KAAK8G,IAE3B2G,EAAgB5G,IAVJ,EAUU7G,KAAKyG,IAC3BgH,EAAgB3G,IAXJ,EAWU9G,KAAK4G,IAC3B6G,EAAgB1G,IAZJ,EAYU/G,KAAK+G,IAEpB0G,EAGJ7N,cAEH,IAAI6N,EAAkB9N,EAASuG,0BAa/B,OAZAuH,EAAgBlH,IAAMvG,KAAKuG,IAC3BkH,EAAgBjH,IAAMxG,KAAKwG,IAC3BiH,EAAgBhH,IAAMzG,KAAKyG,IAE3BgH,EAAgB/G,IAAM1G,KAAK0G,IAC3B+G,EAAgB9G,IAAM3G,KAAK2G,IAC3B8G,EAAgB7G,IAAM5G,KAAK4G,IAE3B6G,EAAgB5G,IAAM7G,KAAK6G,IAC3B4G,EAAgB3G,IAAM9G,KAAK8G,IAC3B2G,EAAgB1G,IAAM/G,KAAK+G,IAEpB0G,EAGX7N,6BAA6B8N,GACzB,IAAIC,EAAuB,IAAIrO,EAAAC,SAAS,GAAI,IAAK,GAC7CqO,EAAwB,IAAItO,EAAAC,SAAS,EAAG,EAAG,GAC3CsO,EAAyB,IAAIvO,EAAAC,SAAS,EAAG,GAAI,GAG7C7B,GAAKiQ,EAAWzB,IAAI0B,GACpBE,EAAQF,EAAY/N,EAAIgO,EAAchO,EACtC+N,EAAY9N,EAAI+N,EAAc/N,EAC9B8N,EAAY7N,EAAI8N,EAAc9N,EAE9BgO,EAAyB,IAAIpO,EAsBjC,OApBAoO,EAAaxH,IAAMuH,EAAQpQ,EAAImQ,EAAchO,EAAI+N,EAAY/N,EAC7DkO,EAAarH,KAAQmH,EAAchO,EAAI+N,EAAY9N,EACnDiO,EAAalH,KAAQgH,EAAchO,EAAI+N,EAAY7N,EACnDgO,EAAa5H,KAAQ0H,EAAchO,EAAInC,EAEvCqQ,EAAavH,KAAQqH,EAAc/N,EAAI8N,EAAY/N,EACnDkO,EAAapH,IAAMmH,EAAQpQ,EAAImQ,EAAc/N,EAAI8N,EAAY9N,EAC7DiO,EAAajH,KAAQ+G,EAAc/N,EAAI8N,EAAY7N,EACnDgO,EAAa3H,KAAQyH,EAAc/N,EAAIpC,EAEvCqQ,EAAatH,KAAQoH,EAAc9N,EAAI6N,EAAY/N,EACnDkO,EAAanH,KAAQiH,EAAc9N,EAAI6N,EAAY9N,EACnDiO,EAAahH,IAAM+G,EAAQpQ,EAAImQ,EAAc9N,EAAI6N,EAAY7N,EAC7DgO,EAAa1H,KAAQwH,EAAc9N,EAAIrC,EAEvCqQ,EAAaX,KAAQQ,EAAY/N,EACjCkO,EAAaV,KAAQO,EAAY9N,EACjCiO,EAAaT,KAAQM,EAAY7N,EACjCgO,EAAaR,IAAMO,EAEZC,EAIXnO,kCAAkCoO,EAAYC,EAAYC,GACtD,IAAIf,EAAmB,IAAIxN,EAsB3B,OApBAwN,EAAO5G,IAAM,EACb4G,EAAOzG,IAAM,EACbyG,EAAOtG,IAAM,EACbsG,EAAOhH,IAAM6H,EAEbb,EAAO3G,IAAM,EACb2G,EAAOxG,IAAM,EACbwG,EAAOrG,IAAM,EACbqG,EAAO/G,IAAM6H,EAEbd,EAAO1G,IAAM,EACb0G,EAAOvG,IAAM,EACbuG,EAAOpG,IAAM,EACboG,EAAO9G,IAAM6H,EAEbf,EAAOC,IAAM,EACbD,EAAOE,IAAM,EACbF,EAAOG,IAAM,EACbH,EAAOI,IAAM,EAENJ,EAGXvN,gCAAgCoJ,GAC5B,IAAImE,EAAmB,IAAIxN,EAsB3B,OApBAwN,EAAO5G,IAAM,EACb4G,EAAOzG,IAAM,EACbyG,EAAOtG,IAAM,EACbsG,EAAOhH,IAAM,EAEbgH,EAAO3G,IAAM,EACb2G,EAAOxG,IAAMrG,KAAK4H,IAAIc,GACtBmE,EAAOrG,KAAOxG,KAAK2H,IAAIe,GACvBmE,EAAO/G,IAAM,EAEb+G,EAAO1G,IAAM,EACb0G,EAAOvG,IAAMtG,KAAK2H,IAAIe,GACtBmE,EAAOpG,IAAMzG,KAAK4H,IAAIc,GACtBmE,EAAO9G,IAAM,EAEb8G,EAAOC,IAAM,EACbD,EAAOE,IAAM,EACbF,EAAOG,IAAM,EACbH,EAAOI,IAAM,EAENJ,EAGXvN,gCAAgCoJ,GAC5B,IAAImE,EAAmB,IAAIxN,EAsB3B,OApBAwN,EAAO5G,IAAMjG,KAAK4H,IAAIc,GACtBmE,EAAOzG,IAAM,EACbyG,EAAOtG,IAAMvG,KAAK2H,IAAIe,GACtBmE,EAAOhH,IAAM,EAEbgH,EAAO3G,IAAM,EACb2G,EAAOxG,IAAM,EACbwG,EAAOrG,IAAM,EACbqG,EAAO/G,IAAM,EAEb+G,EAAO1G,KAAOnG,KAAK2H,IAAIe,GACvBmE,EAAOvG,IAAM,EACbuG,EAAOpG,IAAMzG,KAAK4H,IAAIc,GACtBmE,EAAO9G,IAAM,EAEb8G,EAAOC,IAAM,EACbD,EAAOE,IAAM,EACbF,EAAOG,IAAM,EACbH,EAAOI,IAAM,EAENJ,EAGXvN,gCAAgCoJ,GAC5B,IAAImE,EAAmB,IAAIxN,EAsB3B,OApBAwN,EAAO5G,IAAMjG,KAAK4H,IAAIc,GACtBmE,EAAOzG,KAAOpG,KAAK2H,IAAIe,GACvBmE,EAAOtG,IAAM,EACbsG,EAAOhH,IAAM,EAEbgH,EAAO3G,IAAMlG,KAAK2H,IAAIe,GACtBmE,EAAOxG,IAAMrG,KAAK4H,IAAIc,GACtBmE,EAAOrG,IAAM,EACbqG,EAAO/G,IAAM,EAEb+G,EAAO1G,IAAM,EACb0G,EAAOvG,IAAM,EACbuG,EAAOpG,IAAM,EACboG,EAAO9G,IAAM,EAEb8G,EAAOC,IAAM,EACbD,EAAOE,IAAM,EACbF,EAAOG,IAAM,EACbH,EAAOI,IAAM,EAENJ,EAGXvN,4BAA4BuO,EAAYC,EAAaD,EAAIE,EAAaD,GAClE,IAAIjB,EAAmB,IAAIxN,EAsB3B,OApBAwN,EAAO5G,IAAM4H,EACbhB,EAAOzG,IAAM,EACbyG,EAAOtG,IAAM,EACbsG,EAAOhH,IAAM,EAEbgH,EAAO3G,IAAM,EACb2G,EAAOxG,IAAMyH,EACbjB,EAAOrG,IAAM,EACbqG,EAAO/G,IAAM,EAEb+G,EAAO1G,IAAM,EACb0G,EAAOvG,IAAM,EACbuG,EAAOpG,IAAMsH,EACblB,EAAO9G,IAAM,EAEb8G,EAAOC,IAAM,EACbD,EAAOE,IAAM,EACbF,EAAOG,IAAM,EACbH,EAAOI,IAAM,EAENJ,EAGJvN,eAAeuN,GAClB,IAAImB,EAAS,IAAI3O,EAsBjB,OApBA2O,EAAO/H,IAAMvG,KAAKuG,IAAM4G,EAAO5G,IAAMvG,KAAK0G,IAAMyG,EAAO3G,IAAMxG,KAAK6G,IAAMsG,EAAO1G,IAAMzG,KAAKmG,IAAMgH,EAAOC,IACvGkB,EAAO9H,IAAMxG,KAAKwG,IAAM2G,EAAO5G,IAAMvG,KAAK2G,IAAMwG,EAAO3G,IAAMxG,KAAK8G,IAAMqG,EAAO1G,IAAMzG,KAAKoG,IAAM+G,EAAOC,IACvGkB,EAAO7H,IAAMzG,KAAKyG,IAAM0G,EAAO5G,IAAMvG,KAAK4G,IAAMuG,EAAO3G,IAAMxG,KAAK+G,IAAMoG,EAAO1G,IAAMzG,KAAKqG,IAAM8G,EAAOC,IACvGkB,EAAOlB,IAAMpN,KAAKoN,IAAMD,EAAO5G,IAAMvG,KAAKqN,IAAMF,EAAO3G,IAAMxG,KAAKsN,IAAMH,EAAO1G,IAAMzG,KAAKuN,IAAMJ,EAAOC,IAEvGkB,EAAO5H,IAAM1G,KAAKuG,IAAM4G,EAAOzG,IAAM1G,KAAK0G,IAAMyG,EAAOxG,IAAM3G,KAAK6G,IAAMsG,EAAOvG,IAAM5G,KAAKmG,IAAMgH,EAAOE,IACvGiB,EAAO3H,IAAM3G,KAAKwG,IAAM2G,EAAOzG,IAAM1G,KAAK2G,IAAMwG,EAAOxG,IAAM3G,KAAK8G,IAAMqG,EAAOvG,IAAM5G,KAAKoG,IAAM+G,EAAOE,IACvGiB,EAAO1H,IAAM5G,KAAKyG,IAAM0G,EAAOzG,IAAM1G,KAAK4G,IAAMuG,EAAOxG,IAAM3G,KAAK+G,IAAMoG,EAAOvG,IAAM5G,KAAKqG,IAAM8G,EAAOE,IACvGiB,EAAOjB,IAAMrN,KAAKoN,IAAMD,EAAOzG,IAAM1G,KAAKqN,IAAMF,EAAOxG,IAAM3G,KAAKsN,IAAMH,EAAOvG,IAAM5G,KAAKuN,IAAMJ,EAAOE,IAEvGiB,EAAOzH,IAAM7G,KAAKuG,IAAM4G,EAAOtG,IAAM7G,KAAK0G,IAAMyG,EAAOrG,IAAM9G,KAAK6G,IAAMsG,EAAOpG,IAAM/G,KAAKmG,IAAMgH,EAAOG,IACvGgB,EAAOxH,IAAM9G,KAAKwG,IAAM2G,EAAOtG,IAAM7G,KAAK2G,IAAMwG,EAAOrG,IAAM9G,KAAK8G,IAAMqG,EAAOpG,IAAM/G,KAAKoG,IAAM+G,EAAOG,IACvGgB,EAAOvH,IAAM/G,KAAKyG,IAAM0G,EAAOtG,IAAM7G,KAAK4G,IAAMuG,EAAOrG,IAAM9G,KAAK+G,IAAMoG,EAAOpG,IAAM/G,KAAKqG,IAAM8G,EAAOG,IACvGgB,EAAOhB,IAAMtN,KAAKoN,IAAMD,EAAOtG,IAAM7G,KAAKqN,IAAMF,EAAOrG,IAAM9G,KAAKsN,IAAMH,EAAOpG,IAAM/G,KAAKuN,IAAMJ,EAAOG,IAEvGgB,EAAOnI,IAAMnG,KAAKuG,IAAM4G,EAAOhH,IAAMnG,KAAK0G,IAAMyG,EAAO/G,IAAMpG,KAAK6G,IAAMsG,EAAO9G,IAAMrG,KAAKmG,IAAMgH,EAAOI,IACvGe,EAAOlI,IAAMpG,KAAKwG,IAAM2G,EAAOhH,IAAMnG,KAAK2G,IAAMwG,EAAO/G,IAAMpG,KAAK8G,IAAMqG,EAAO9G,IAAMrG,KAAKoG,IAAM+G,EAAOI,IACvGe,EAAOjI,IAAMrG,KAAKyG,IAAM0G,EAAOhH,IAAMnG,KAAK4G,IAAMuG,EAAO/G,IAAMpG,KAAK+G,IAAMoG,EAAO9G,IAAMrG,KAAKqG,IAAM8G,EAAOI,IACvGe,EAAOf,IAAMvN,KAAKoN,IAAMD,EAAOhH,IAAMnG,KAAKqN,IAAMF,EAAO/G,IAAMpG,KAAKsN,IAAMH,EAAO9G,IAAMrG,KAAKuN,IAAMJ,EAAOI,IAEhGe,EAGJ1O,SAAS2O,GACZ,OAAO,IAAIjP,EAAAC,SAASS,KAAKuG,IAAMgI,EAAO1O,EAAIG,KAAK0G,IAAM6H,EAAOzO,EAAIE,KAAK6G,IAAM0H,EAAOxO,EAAIC,KAAKmG,IACvFnG,KAAKwG,IAAM+H,EAAO1O,EAAIG,KAAK2G,IAAM4H,EAAOzO,EAAIE,KAAK8G,IAAMyH,EAAOxO,EAAIC,KAAKoG,IACvEpG,KAAKyG,IAAM8H,EAAO1O,EAAIG,KAAK4G,IAAM2H,EAAOzO,EAAIE,KAAK+G,IAAMwH,EAAOxO,EAAIC,KAAKqG,KAGxEzG,YAAY2O,GACf,OAAO,IAAInP,EAAAC,SAASW,KAAKuG,IAAMgI,EAAO1O,EAAIG,KAAK0G,IAAM6H,EAAOzO,EAAIE,KAAK6G,IAAM0H,EAAOxO,EAAIC,KAAKmG,IAAMoI,EAAOC,EACpGxO,KAAKwG,IAAM+H,EAAO1O,EAAIG,KAAK2G,IAAM4H,EAAOzO,EAAIE,KAAK8G,IAAMyH,EAAOxO,EAAIC,KAAKoG,IAAMmI,EAAOC,EACpFxO,KAAKyG,IAAM8H,EAAO1O,EAAIG,KAAK4G,IAAM2H,EAAOzO,EAAIE,KAAK+G,IAAMwH,EAAOxO,EAAIC,KAAKqG,IAAMkI,EAAOC,EACpFxO,KAAKoN,IAAMmB,EAAO1O,EAAIG,KAAKqN,IAAMkB,EAAOzO,EAAIE,KAAKsN,IAAMiB,EAAOxO,EAAIC,KAAKuN,IAAMgB,EAAOC,GAGrF5O,eAAe2O,EAAkBD,GACpCA,EAAOzO,EAAIG,KAAKuG,IAAMgI,EAAO1O,EAAIG,KAAK0G,IAAM6H,EAAOzO,EAAIE,KAAK6G,IAAM0H,EAAOxO,EAAIC,KAAKmG,IAAMoI,EAAOC,EAC/FF,EAAOxO,EAAIE,KAAKwG,IAAM+H,EAAO1O,EAAIG,KAAK2G,IAAM4H,EAAOzO,EAAIE,KAAK8G,IAAMyH,EAAOxO,EAAIC,KAAKoG,IAAMmI,EAAOC,EAC/FF,EAAOvO,EAAIC,KAAKyG,IAAM8H,EAAO1O,EAAIG,KAAK4G,IAAM2H,EAAOzO,EAAIE,KAAK+G,IAAMwH,EAAOxO,EAAIC,KAAKqG,IAAMkI,EAAOC,EAG5F5O,gBAAgB2O,EAAkBD,GACrCA,EAAOzO,EAAIG,KAAKuG,IAAMgI,EAAO1O,EAAIG,KAAK0G,IAAM6H,EAAOzO,EAAIE,KAAK6G,IAAM0H,EAAOxO,EAAIC,KAAKmG,IAAMoI,EAAOC,EAC/FF,EAAOxO,EAAIE,KAAKwG,IAAM+H,EAAO1O,EAAIG,KAAK2G,IAAM4H,EAAOzO,EAAIE,KAAK8G,IAAMyH,EAAOxO,EAAIC,KAAKoG,IAAMmI,EAAOC,EAC/FF,EAAOvO,EAAIC,KAAKyG,IAAM8H,EAAO1O,EAAIG,KAAK4G,IAAM2H,EAAOzO,EAAIE,KAAK+G,IAAMwH,EAAOxO,EAAIC,KAAKqG,IAAMkI,EAAOC,EAC/FF,EAAOE,EAAIxO,KAAKoN,IAAMmB,EAAO1O,EAAIG,KAAKqN,IAAMkB,EAAOzO,EAAIE,KAAKsN,IAAMiB,EAAOxO,EAAIC,KAAKuN,IAAMgB,EAAOC,EAC/FF,EAAOzO,GAAKyO,EAAOE,EACnBF,EAAOxO,GAAKwO,EAAOE,EACnBF,EAAOvO,GAAKuO,EAAOE,EAGhB5O,YAAY2O,EAAkBD,GACjCA,EAAOzO,EAAIG,KAAKuG,IAAMgI,EAAO1O,EAAIG,KAAK0G,IAAM6H,EAAOzO,EAAIE,KAAK6G,IAAM0H,EAAOxO,EAAIC,KAAKmG,IAClFmI,EAAOxO,EAAIE,KAAKwG,IAAM+H,EAAO1O,EAAIG,KAAK2G,IAAM4H,EAAOzO,EAAIE,KAAK8G,IAAMyH,EAAOxO,EAAIC,KAAKoG,IAClFkI,EAAOvO,EAAIC,KAAKyG,IAAM8H,EAAO1O,EAAIG,KAAK4G,IAAM2H,EAAOzO,EAAIE,KAAK+G,IAAMwH,EAAOxO,EAAIC,KAAKqG,KAjX1FnJ,EAAAyC,6FCpBA,MAAA8O,EAAAzR,EAAA,GACAiM,EAAAjM,EAAA,GAEAE,EAAAmH,mBAEWzE,iCACH,OAAO,IAAIuE,QAASuK,IAChB,MAAMlK,EAAU,IAAIyE,EAAAhE,QACpBT,EAAQA,QAAU,IAAIR,YAAY,OAElC,MAAM2K,EAA6B,IAAIF,EAAAG,QACvCD,EAAIE,QAAQ,KAEZ,IAAK,IAAIzR,EAAY,EAAGA,EAAI,MAAWA,IAAK,CACxC,MAAM6C,EAAgB0O,EAAIG,WAC1BtK,EAAQA,QAAQpH,GAAK,IAAM6C,EAAQ,IAAMA,GAAS,EAAI,IAAMA,GAAS,GAAK,KAAO,GAGrFuE,EAAQuK,MAAQ,IAChBvK,EAAQwK,OAAS,IACjBN,EAAQlK,KAIT5E,2CACH,OAAO,IAAIuE,QAASuK,IAChB,MAAMlK,EAAU,IAAIyE,EAAAhE,QACpBT,EAAQA,QAAU,IAAIR,YAAY,QAExB,IAAIyK,EAAAG,SACVC,QAAQ,KAEZ,IAAK,IAAI/O,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIoP,EAAK,IAAMpP,EACXqP,EAAK,IAAMpP,EACX5B,EAAIoC,KAAKC,KAAK0O,EAAKA,EAAKC,EAAKA,GAAM,IACnCzR,EAAI,EAAIS,EACZT,GAAIA,EAAIA,EACJS,EAAI,IAAGT,EAAI,GACfA,EAAI6C,KAAK0L,IAAI,EAAO,IAAJvO,GAEhB+G,EAAQA,QAAQ3E,EAAQ,IAAJC,GAAW,SAAkC,IAAJrC,GAAY,GAIjF+G,EAAQuK,MAAQ,IAChBvK,EAAQwK,OAAS,IACjBN,EAAQlK,KAIT5E,4CACH,OAAO,IAAIuE,QAASuK,IAChB,MAAMlK,EAAU,IAAIyE,EAAAhE,QACpBT,EAAQA,QAAU,IAAIR,YAAY,QAExB,IAAIyK,EAAAG,SACVC,QAAQ,KAEZ,IAAK,IAAI/O,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIoP,EAAK,IAAMpP,EACXqP,EAAK,IAAMpP,EACX5B,EAAIoC,KAAKC,KAAK0O,EAAKA,EAAKC,EAAKA,GAAM,IACnCzR,EAAI,EAAIS,EACZT,GAAQA,EACJS,EAAI,IAAGT,EAAI,GACfA,EAAI6C,KAAK0L,IAAI,EAAO,GAAJvO,GAChB+G,EAAQA,QAAQ3E,EAAQ,IAAJC,GAAW,SAAkC,IAAJrC,GAAY,GAIjF+G,EAAQuK,MAAQ,IAChBvK,EAAQwK,OAAS,IACjBN,EAAQlK,KAMT5E,YAAYuP,EAAkBC,GACjC,OAAO,IAAIjL,QAAkBuK,IACzB,MAAMW,EAA0B,IAAIC,MACpCD,EAAME,OAAS,MACX,MAAM/K,EAAmB,IAAIyE,EAAAhE,QAC7BT,EAAQA,QAAUxE,KAAKwP,aAAaH,EAAOD,GAC3C5K,EAAQuK,MAAQM,EAAMN,MACtBvK,EAAQwK,OAASK,EAAML,OACvBN,EAAQlK,KAEZ6K,EAAMI,QAAU,KAAYf,KAC5BW,EAAMK,IAAMP,IAIZvP,oBAAoByP,EAAyBM,GAAqB,GACtE,MAAM1M,EAA4BI,SAASuM,cAAc,UACzD3M,EAAO8L,MAAQM,EAAMN,MACrB9L,EAAO+L,OAASK,EAAML,OACtB,MAAMa,EAAoC5M,EAAO6M,WAAW,MAC5DD,EAAQE,UAAUV,EAAO,EAAG,GAC5B,MAAMW,EAA0BH,EAAQL,aAAa,EAAG,EAAGH,EAAMN,MAAOM,EAAML,QAAQgB,KAChFC,EAAoB,IAAIjM,YAAYgM,EAAKvP,OAAS,GACxD,IAAIhD,EAAY,EAChB,IAAK,IAAIL,EAAY,EAAGA,EAAI4S,EAAKvP,OAAQrD,GAAK,EAEtC6S,EAAKxS,GADLkS,EACWK,EAAK5S,EAAI,IAAM,GAAO4S,EAAK5S,EAAI,IAAM,GAAO4S,EAAK5S,EAAI,IAAM,EAAK4S,EAAK5S,EAAI,GAEzE,KAAO,GAAO4S,EAAK5S,EAAI,IAAM,GAAO4S,EAAK5S,EAAI,IAAM,EAAK4S,EAAK5S,EAAI,GAGhFK,IAEJ,OAAOwS,sFC/Gf/S,EAAAgT,uBAEItQ,YAAoBwC,GAAApC,KAAAoC,cAIbxC,sBAAsBuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkB6L,GAClG,IAKIC,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,MAAMgC,EAAa,EAAI,IAAMV,EAC7B,IAAIW,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAC/B,IAAIoR,EAAe3Q,KAAK0L,IAAS,EAAL6E,EAAQrM,EAAQuK,MAAQ,GAAKzO,KAAK0L,IAAS,EAAL8E,EAAQtM,EAAQwK,OAAS,GAAKxK,EAAQuK,MAEpG/F,GAASxE,EAAQA,QAAQyM,IAAiB,GAAK,KAAQF,EACvDG,EAAe,EAAIlI,EAEnBmI,EAAmBnR,KAAKoC,YAAYA,YAAY4O,GAChDI,EAAe5M,EAAQA,QAAQyM,GAE/B/S,GAAKiT,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQpI,EACjFqI,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQpI,EACjFJ,GAAKuI,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQpI,EAEvFhJ,KAAKoC,YAAYA,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAC1EiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,uFCtEvB,MAAA5P,EAAA3D,EAAA,GAGAE,EAAAgG,aAQItD,YAAYmP,EAAeC,EAAwBsC,GAAAtR,KAAAsR,QAC/CtR,KAAKiD,OAASI,SAASuM,cAAc,UAErC5P,KAAKiD,OAAO8L,MAAQA,EACpB/O,KAAKiD,OAAO+L,OAASA,EAErBhP,KAAKiD,OAAOsO,MAAMC,QAAU,sRAS5BxR,KAAKiD,OAAOsO,MAAMxC,SAAmB,EAARA,MAC7B/O,KAAKiD,OAAOsO,MAAMvC,UAAqB,EAATA,MAE9BhP,KAAK6P,QAAU7P,KAAKiD,OAAO6M,WAAW,MAEtC9P,KAAK6P,QAAQ4B,wBAAyB,EACtCzR,KAAK6P,QAAQ6B,uBAAwB,EACrC1R,KAAK6P,QAAQ8B,6BAA8B,EAE3C3R,KAAKoC,YAAc,IAAIzB,EAAAQ,YAAY,IAAK,KACxCnB,KAAK4R,gBAAkB5R,KAAK6R,WAAWjT,KAAKoB,MAIzCJ,OAEH,IAAIkS,GAAa,EA8BbC,EAAY,EAGhB/R,KAAKiD,OAAO+O,iBAAiB,QAAS,SAAUC,GAC5CA,EAAIC,iBACJ,IAAIC,EAAetN,KAAKC,MACpBqN,EAAeJ,EAAY,KAnCZ,WACdD,GAcDA,GAAa,EACT,mBAAoBzO,SACpBA,SAAyB,iBAClB,wBAAyBA,SAChCA,SAA8B,sBACvB,yBAA0BA,SACjCA,SAA+B,uBACxB,qBAAsBA,SAC7BA,SAA2B,mBAE3ByO,GAAa,IAvBjBA,GAAa,EACT,sBAAuB9R,KACvBA,KAAwB,oBACjB,4BAA6BA,KACpCA,KAA8B,0BACvB,yBAA0BA,KACjCA,KAA2B,uBACpB,wBAAyBA,KAChCA,KAA0B,sBAE1B8R,GAAa,IAwBAlT,KAAKoB,KAAtBoS,GAEJL,EAAYI,IAEhBnS,KAAKsR,MAAM/N,KAAKvD,KAAKoC,aAAamC,KAAK,KACnCvE,KAAK6R,WAAW,KAIjBjS,WAAWgF,GACd5E,KAAKsR,MAAMe,OAAOrS,KAAKoC,aACvBpC,KAAKsS,iBACLC,sBAAsBvS,KAAK4R,iBAGxBhS,iBACHI,KAAK6P,QAAQ2C,aAAaxS,KAAKoC,YAAYoN,eAAgB,EAAG,GAG3D5P,SAAS0I,GACZA,EAAQmK,YAAYzS,KAAKiD,4FCnGjC,MAAA3D,EAAAtC,EAAA,SAEayC,EAcTG,gCAAgC8S,GAC5B,IAAIvF,EAAS,IAAI1N,EAEbyI,EAAM5H,KAAK4H,IAAIwK,GACfzK,EAAM3H,KAAK2H,IAAIyK,GAcnB,OAZAvF,EAAO5G,IAAM,EACb4G,EAAOzG,IAAM,EACbyG,EAAOtG,IAAM,EAEbsG,EAAO3G,IAAM,EACb2G,EAAOxG,IAAMuB,EACbiF,EAAOrG,KAAOmB,EAEdkF,EAAO1G,IAAM,EACb0G,EAAOvG,IAAMqB,EACbkF,EAAOpG,IAAMmB,EAENiF,EAGXvN,gCAAgC8S,GAC5B,IAAIvF,EAAS,IAAI1N,EAcjB,OAZA0N,EAAO5G,IAAMjG,KAAK4H,IAAIwK,GACtBvF,EAAOzG,IAAM,EACbyG,EAAOtG,IAAMvG,KAAK2H,IAAIyK,GAEtBvF,EAAO3G,IAAM,EACb2G,EAAOxG,IAAM,EACbwG,EAAOrG,IAAM,EAEbqG,EAAO1G,KAAOnG,KAAK2H,IAAIyK,GACvBvF,EAAOvG,IAAM,EACbuG,EAAOpG,IAAMzG,KAAK4H,IAAIwK,GAEfvF,EAGXvN,gCAAgC8S,GAC5B,IAAIvF,EAAS,IAAI1N,EAcjB,OAZA0N,EAAO5G,IAAMjG,KAAK4H,IAAIwK,GACtBvF,EAAOzG,KAAOpG,KAAK2H,IAAIyK,GACvBvF,EAAOtG,IAAM,EAEbsG,EAAO3G,IAAMlG,KAAK2H,IAAIyK,GACtBvF,EAAOxG,IAAMrG,KAAK4H,IAAIwK,GACtBvF,EAAOrG,IAAM,EAEbqG,EAAO1G,IAAM,EACb0G,EAAOvG,IAAM,EACbuG,EAAOpG,IAAM,EAENoG,EAGXvN,4BAA4B+S,EAAgBC,EAAgBC,GACxD,IAAI1F,EAAS,IAAI1N,EAcjB,OAZA0N,EAAO5G,IAAMoM,EACbxF,EAAOzG,IAAM,EACbyG,EAAOtG,IAAM,EAEbsG,EAAO3G,IAAM,EACb2G,EAAOxG,IAAMiM,EACbzF,EAAOrG,IAAM,EAEbqG,EAAO1G,IAAM,EACb0G,EAAOvG,IAAM,EACbuG,EAAOpG,IAAM8L,EAEN1F,EAGJvN,eAAeuN,GAClB,IAAImB,EAAS,IAAI7O,EAcjB,OAZA6O,EAAO/H,IAAMvG,KAAKuG,IAAM4G,EAAO5G,IAAMvG,KAAK0G,IAAMyG,EAAO3G,IAAMxG,KAAK6G,IAAMsG,EAAO1G,IAC/E6H,EAAO9H,IAAMxG,KAAKwG,IAAM2G,EAAO5G,IAAMvG,KAAK2G,IAAMwG,EAAO3G,IAAMxG,KAAK8G,IAAMqG,EAAO1G,IAC/E6H,EAAO7H,IAAMzG,KAAKyG,IAAM0G,EAAO5G,IAAMvG,KAAK4G,IAAMuG,EAAO3G,IAAMxG,KAAK+G,IAAMoG,EAAO1G,IAE/E6H,EAAO5H,IAAM1G,KAAKuG,IAAM4G,EAAOzG,IAAM1G,KAAK0G,IAAMyG,EAAOxG,IAAM3G,KAAK6G,IAAMsG,EAAOvG,IAC/E0H,EAAO3H,IAAM3G,KAAKwG,IAAM2G,EAAOzG,IAAM1G,KAAK2G,IAAMwG,EAAOxG,IAAM3G,KAAK8G,IAAMqG,EAAOvG,IAC/E0H,EAAO1H,IAAM5G,KAAKyG,IAAM0G,EAAOzG,IAAM1G,KAAK4G,IAAMuG,EAAOxG,IAAM3G,KAAK+G,IAAMoG,EAAOvG,IAE/E0H,EAAOzH,IAAM7G,KAAKuG,IAAM4G,EAAOtG,IAAM7G,KAAK0G,IAAMyG,EAAOrG,IAAM9G,KAAK6G,IAAMsG,EAAOpG,IAC/EuH,EAAOxH,IAAM9G,KAAKwG,IAAM2G,EAAOtG,IAAM7G,KAAK2G,IAAMwG,EAAOrG,IAAM9G,KAAK8G,IAAMqG,EAAOpG,IAC/EuH,EAAOvH,IAAM/G,KAAKyG,IAAM0G,EAAOtG,IAAM7G,KAAK4G,IAAMuG,EAAOrG,IAAM9G,KAAK+G,IAAMoG,EAAOpG,IAExEuH,EAIJ1O,SAAS2O,GACZ,OAAO,IAAIjP,EAAAC,SAASS,KAAKuG,IAAMgI,EAAO1O,EAAIG,KAAK0G,IAAM6H,EAAOzO,EAAIE,KAAK6G,IAAM0H,EAAOxO,EAC9EC,KAAKwG,IAAM+H,EAAO1O,EAAIG,KAAK2G,IAAM4H,EAAOzO,EAAIE,KAAK8G,IAAMyH,EAAOxO,EAC9DC,KAAKyG,IAAM8H,EAAO1O,EAAIG,KAAK4G,IAAM2H,EAAOzO,EAAIE,KAAK+G,IAAMwH,EAAOxO,IA/G1E7C,EAAAuC,6FCIAvC,EAAA8P,aAKIpN,YAAmBoB,EAAoBkM,GACnClN,KAAKiN,OAASjM,EACdhB,KAAKkN,OAASA,EASXtN,0BAA0BkT,GAC7B,OAAOA,EAAMC,YAAY7G,IAAIlM,KAAKiN,QAAU6F,EAAME,eAAkBhT,KAAKkN,OAGtEtN,QAAQqT,GACX,OAAOA,EAAIC,YAAYlT,KAAKiN,QAGzBrN,YACH,OAAOI,KAAKkN,OAGTtN,YACH,OAAOI,KAAKiN,2FCnCpB,MAAAtM,EAAA3D,EAAA,GACAsC,EAAAtC,EAAA,SAEamW,EAQTvT,YAAoBwC,GAAApC,KAAAoC,cAEbxC,2BAA2BwT,EAAiBC,EAAeC,GAC9D,IAAIrS,EAAe,IAAI3B,EAAAC,SAAS6T,EAAMvT,EAAGuT,EAAMtT,EAAGsT,EAAMrT,GACpDmB,EAAe,IAAI5B,EAAAC,SAAS8T,EAAIxT,EAAGwT,EAAIvT,EAAGuT,EAAItT,GAE9CwT,EAAgBvT,KAAKwT,kBAAkBvS,GACvCwS,EAAgBzT,KAAKwT,kBAAkBtS,GAEvCwS,GAAkB,EAClBC,GAAgB,EAEpB,MAAQA,GAEJ,GAAI3T,KAAK4T,gBAAgBL,EAAOE,GAC5BC,GAAS,EACTC,GAAO,OACJ,GAAI3T,KAAK6T,gBAAgBN,EAAOE,GACnCE,GAAO,MACJ,CAEH,GAAIJ,GAASJ,EAA2BW,mBAAoB,CACxD,IAAIC,EAAmBR,EACvBA,EAAQE,EACRA,EAAQM,EAER,IAAIC,EAAsB/S,EAC1BA,EAAKC,EACLA,EAAK8S,GAGJT,EAAQJ,EAA2Bc,kBAAoBd,EAA2BW,oBACnF7S,EAAGpB,EAAIS,KAAKe,MAAMJ,EAAGpB,GAAKqB,EAAGrB,EAAIoB,EAAGpB,IAAMc,EAAAQ,YAAYC,UAAUtB,EAAImB,EAAGnB,IAAMoB,EAAGpB,EAAImB,EAAGnB,IACvFmB,EAAGnB,EAAIa,EAAAQ,YAAYC,UAAUtB,IACrByT,EAAQJ,EAA2Be,qBAAuBf,EAA2BW,oBAC7F7S,EAAGpB,EAAIS,KAAKe,MAAMJ,EAAGpB,GAAKqB,EAAGrB,EAAIoB,EAAGpB,IAAMc,EAAAQ,YAAYW,UAAUhC,EAAImB,EAAGnB,IAAMoB,EAAGpB,EAAImB,EAAGnB,IACvFmB,EAAGnB,EAAIa,EAAAQ,YAAYW,UAAUhC,IACrByT,EAAQJ,EAA2BgB,oBAAsBhB,EAA2BW,oBAC5F7S,EAAGnB,EAAIQ,KAAKe,MAAMJ,EAAGnB,GAAKoB,EAAGpB,EAAImB,EAAGnB,IAAMa,EAAAQ,YAAYC,UAAUvB,EAAIoB,EAAGpB,IAAMqB,EAAGrB,EAAIoB,EAAGpB,IACvFoB,EAAGpB,EAAIc,EAAAQ,YAAYC,UAAUvB,IACrB0T,EAAQJ,EAA2BiB,mBAAqBjB,EAA2BW,qBAC3F7S,EAAGnB,EAAIQ,KAAKe,MAAMJ,EAAGnB,GAAKoB,EAAGpB,EAAImB,EAAGnB,IAAMa,EAAAQ,YAAYW,UAAUjC,EAAIoB,EAAGpB,IAAMqB,EAAGrB,EAAIoB,EAAGpB,IACvFoB,EAAGpB,EAAIc,EAAAQ,YAAYW,UAAUjC,GAGjC0T,EAAQvT,KAAKwT,kBAAkBvS,GAInCyS,GACA1T,KAAKoC,YAAYiS,YAAYpT,EAAIC,EAAIoS,GAItC1T,gBAAgB2T,EAAeE,GAClC,OAAQF,EAAQE,KAAWN,EAA2BW,mBAGnDlU,gBAAgB2T,EAAeE,GAClC,OAAQF,EAAQE,KAAWN,EAA2BW,mBAGnDlU,kBAAkBuL,GACrB,IAAImJ,EAAqBnB,EAA2BW,mBAcpD,OAZI3I,EAAMtL,EAAIc,EAAAQ,YAAYW,UAAUjC,EAChCyU,GAAcnB,EAA2BiB,iBAClCjJ,EAAMtL,EAAIc,EAAAQ,YAAYC,UAAUvB,IACvCyU,GAAcnB,EAA2BgB,mBAGzChJ,EAAMrL,EAAIa,EAAAQ,YAAYW,UAAUhC,EAChCwU,GAAcnB,EAA2Be,mBAClC/I,EAAMrL,EAAIa,EAAAQ,YAAYC,UAAUtB,IACvCwU,GAAcnB,EAA2Bc,iBAGtCK,GAnFGnB,EAAAW,mBAAqB,EACrBX,EAAAiB,iBAAmB,EACnBjB,EAAAgB,kBAAoB,EACpBhB,EAAAe,mBAAqB,EACrBf,EAAAc,gBAAkB,EANpC/W,EAAAiW,+GCAAjW,EAAAqX,yBAEI3U,YAAoBwC,GAAApC,KAAAoC,cASbxC,gBAAgBqB,EAAcC,EAAcsT,EAAc9I,GAC7D,GAAIzK,EAAGnB,EAAI0U,EAAG1U,EAAG,CACb,IAAI2U,EAAiBxT,EACrBA,EAAKuT,EACLA,EAAKC,EAGT,GAAIxT,EAAGnB,EAAIoB,EAAGpB,EAAG,CACb,IAAI2U,EAAiBxT,EACrBA,EAAKC,EACLA,EAAKuT,EAGT,GAAIvT,EAAGpB,EAAI0U,EAAG1U,EAAG,CACb,IAAI2U,EAAiBvT,EACrBA,EAAKsT,EACLA,EAAKC,EAGT,GAAIxT,EAAGnB,GAAK0U,EAAG1U,EAER,GAAIoB,EAAGpB,GAAK0U,EAAG1U,EAAG,CACrB,GAAIoB,EAAGrB,EAAI2U,EAAG3U,EAAG,CACb,IAAI4U,EAAiBvT,EACrBA,EAAKsT,EACLA,EAAKC,EAETzU,KAAK0U,uBAAuBzT,EAAIC,EAAIsT,EAAI9I,QACrC,GAAIzK,EAAGnB,GAAKoB,EAAGpB,EAAG,CACrB,GAAImB,EAAGpB,EAAIqB,EAAGrB,EAAG,CACb,IAAI4U,EAAiBxT,EACrBA,EAAKC,EACLA,EAAKuT,EAETzU,KAAK2U,oBAAoB1T,EAAIC,EAAIsT,EAAI9I,QAE5B8I,EAAG3U,EAAIoB,EAAGpB,IAAMqB,EAAGpB,EAAImB,EAAGnB,IAAM0U,EAAG1U,EAAImB,EAAGnB,GAAKmB,EAAGpB,EACnDqB,EAAGrB,EACPG,KAAK4U,sBAAsB3T,EAAIC,EAAIsT,EAAI9I,GAEvC1L,KAAK6U,qBAAqB5T,EAAIC,EAAIsT,EAAI9I,GAOlD9L,uBAAuB8C,EAAcC,EAAcC,EAAc8I,GAE7D,IAAIoJ,EAAYlS,EAAG9C,EAAI4C,EAAG5C,EAEtBiV,GAAUpS,EAAG9C,EAAI6C,EAAG7C,GAAKiV,EACzBE,GAAUpS,EAAG/C,EAAI6C,EAAG7C,GAAKiV,EAEzBG,GAAW,EAAItS,EAAG5C,EAAI,EAAI2C,EAAG3C,GAAK+U,EAClCI,GAAW,EAAItS,EAAG7C,EAAI,EAAI2C,EAAG3C,GAAK+U,EAElCK,EAAQzS,EAAG7C,EACXuV,EAAQ1S,EAAG7C,EAEXwV,EAAQ,EAAM3S,EAAG3C,EACjBuV,EAAQ,EAAM5S,EAAG3C,EAIjBwV,GAFSjV,KAAKe,MAAMyT,GAERpS,EAAG7C,GACf2V,EAAa9S,EAAG7C,EAChB4V,EAAY/S,EAAG5C,EAEnB,IAAK,IAAI1C,EAAI,EAAGA,EAAI0X,EAAW1X,IAAK,CAChC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BmV,EAASP,EACb,IAAK,IAAIvN,EAAI,EAAGA,EAAIrH,EAAQqH,IACpB8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,KAClC1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C5V,KAAKoC,YAAYA,YAAYsT,GAAoBhK,GAErDgK,IACAE,GAAUD,EAGdJ,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,GAKjBtV,oBAAoB8C,EAAcC,EAAcC,EAAc8I,GAC1D,IAAIoJ,EAAYlS,EAAG9C,EAAI4C,EAAG5C,EACtBiV,GAAUnS,EAAG/C,EAAI6C,EAAG7C,GAAKiV,EACzBE,GAAUpS,EAAG/C,EAAI8C,EAAG9C,GAAKiV,EAEzBG,GAAW,EAAIrS,EAAG7C,EAAI,EAAI2C,EAAG3C,GAAK+U,EAClCI,GAAW,EAAItS,EAAG7C,EAAI,EAAI4C,EAAG5C,GAAK+U,EAElCK,EAAQzS,EAAG7C,EACXuV,EAAQzS,EAAG7C,EAEXuV,EAAQ,EAAM3S,EAAG3C,EACjBuV,EAAQ,EAAM3S,EAAG5C,EAEjBwV,EAAY7S,EAAG7C,EACf2V,EAAa7S,EAAG9C,EAChB4V,EAAY/S,EAAG5C,EAEnB,IAAK,IAAI1C,EAAI,EAAGA,EAAI0X,EAAW1X,IAAK,CAChC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAChE,IAAK,IAAIzN,EAAI,EAAGA,EAAIrH,EAAQqH,IAAK,CAC7B,IAAI8N,GAAUN,EAAQD,GAAS,EAAWvN,EAAIuN,EAC1CO,EAAS5V,KAAKoC,YAAYyT,QAAQH,KAClC1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C5V,KAAKoC,YAAYA,YAAYsT,GAAoBhK,GAErDgK,IAGJH,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,GAIjBtV,sBAAsB8C,EAAcC,EAAcC,EAAc8I,GAE5D,IAAIoK,EAAgBnT,EAAG7C,EAAI4C,EAAG5C,EAC1BiW,EAAiBnT,EAAG9C,EAAI4C,EAAG5C,EAE3BiV,GAAUpS,EAAG9C,EAAI6C,EAAG7C,GAAKiW,EACzBd,GAAUpS,EAAG/C,EAAI6C,EAAG7C,GAAKkW,EAEzBd,GAAW,EAAItS,EAAG5C,EAAI,EAAI2C,EAAG3C,GAAK+V,EAClCZ,GAAW,EAAItS,EAAG7C,EAAI,EAAI2C,EAAG3C,GAAKgW,EAElCZ,EAAQzS,EAAG7C,EACXuV,EAAQ1S,EAAG7C,EAEXwV,EAAQ,EAAM3S,EAAG3C,EACjBuV,EAAQ,EAAM5S,EAAG3C,EAEjBwV,EAAY7S,EAAG7C,EACf2V,EAAa9S,EAAG7C,EAChB4V,EAAY/S,EAAG5C,EAEnB,IAAK,IAAI1C,EAAI,EAAGA,EAAI0Y,EAAe1Y,IAAK,CACpC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BmV,EAASP,EACb,IAAK,IAAIvN,EAAI,EAAGA,EAAIrH,EAAQqH,IACpB8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,KAClC1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C5V,KAAKoC,YAAYA,YAAYsT,GAAoBhK,GAErDgK,IACAE,GAAUD,EAGdJ,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,EAGbY,EAAgBlT,EAAG9C,EAAI6C,EAAG7C,EAC1BiV,GAAUnS,EAAG/C,EAAI8C,EAAG9C,GAAKiW,EACzBb,GAAW,EAAIrS,EAAG7C,EAAI,EAAI4C,EAAG5C,GAAK+V,EAClCX,EAAQxS,EAAG9C,EACXwV,EAAQ,EAAM1S,EAAG5C,EACjBwV,EAAY5S,EAAG9C,EACf4V,EAAY9S,EAAG7C,EAEf,IAAK,IAAI1C,EAAI,EAAGA,EAAI0Y,EAAe1Y,IAAK,CACpC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BmV,EAASP,EACb,IAAK,IAAIvN,EAAI,EAAGA,EAAIrH,EAAQqH,IACpB8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,KAClC1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C5V,KAAKoC,YAAYA,YAAYsT,GAAoBhK,GAErDgK,IACAE,GAAUD,EAGdJ,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,GAKjBtV,qBAAqB8C,EAAcC,EAAcC,EAAc8I,GAE3D,IAAIqK,EAAiBpT,EAAG7C,EAAI4C,EAAG5C,EAC3BgW,EAAgBlT,EAAG9C,EAAI4C,EAAG5C,EAE1BkV,GAAUrS,EAAG9C,EAAI6C,EAAG7C,GAAKkW,EACzBhB,GAAUnS,EAAG/C,EAAI6C,EAAG7C,GAAKiW,EAEzBZ,GAAW,EAAIvS,EAAG5C,EAAI,EAAI2C,EAAG3C,GAAKgW,EAClCd,GAAW,EAAIrS,EAAG7C,EAAI,EAAI2C,EAAG3C,GAAK+V,EAElCX,EAAQzS,EAAG7C,EACXuV,EAAQ1S,EAAG7C,EAEXwV,EAAQ,EAAM3S,EAAG3C,EACjBuV,EAAQ,EAAM5S,EAAG3C,EAEjBwV,EAAY7S,EAAG7C,EACf2V,EAAa9S,EAAG7C,EAChB4V,EAAY/S,EAAG5C,EAEnB,IAAK,IAAI1C,EAAI,EAAGA,EAAI2Y,EAAgB3Y,IAAK,CACrC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BmV,EAASP,EACb,IAAK,IAAIvN,EAAI,EAAGA,EAAIrH,EAAQqH,IACpB8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,KAClC1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C5V,KAAKoC,YAAYA,YAAYsT,GAAoBhK,GAErDgK,IACAE,GAAUD,EAGdJ,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,EAGba,EAAiBnT,EAAG9C,EAAI6C,EAAG7C,EAC3BkV,GAAUpS,EAAG/C,EAAI8C,EAAG9C,GAAKkW,EACzBb,GAAW,EAAItS,EAAG7C,EAAI,EAAI4C,EAAG5C,GAAKgW,EAClCX,EAAQzS,EAAG9C,EACXyV,EAAQ,EAAM3S,EAAG5C,EACjByV,EAAa7S,EAAG9C,EAChB4V,EAAY9S,EAAG7C,EAEf,IAAK,IAAI1C,EAAI,EAAGA,EAAI2Y,EAAgB3Y,IAAK,CACrC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BmV,EAASP,EACb,IAAK,IAAIvN,EAAI,EAAGA,EAAIrH,EAAQqH,IACpB8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,KAClC1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C5V,KAAKoC,YAAYA,YAAYsT,GAAoBhK,GAErDgK,IACAE,GAAUD,EAGdJ,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,uFCpTrB,MAAA5V,EAAAtC,EAAA,GAIAE,EAAA8Y,iCAIIpW,YAAoBwC,GAAApC,KAAAoC,cAEbxC,iBAAiBqB,EAAYC,EAAYsT,GAE5C,IAAIC,EAoBJ,GAlBIxT,EAAGD,SAASlB,EAAI0U,EAAGxT,SAASlB,IAC5B2U,EAAOxT,EACPA,EAAKuT,EACLA,EAAKC,GAGLxT,EAAGD,SAASlB,EAAIoB,EAAGF,SAASlB,IAC5B2U,EAAOxT,EACPA,EAAKC,EACLA,EAAKuT,GAGLvT,EAAGF,SAASlB,EAAI0U,EAAGxT,SAASlB,IAC5B2U,EAAOvT,EACPA,EAAKsT,EACLA,EAAKC,GAGLxT,EAAGD,SAASlB,IAAM0U,EAAGxT,SAASlB,EAkB9B,IADS0U,EAAGxT,SAASnB,EAAIoB,EAAGD,SAASnB,IAAMqB,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,IAAM0U,EAAGxT,SAASlB,EAAImB,EAAGD,SAASlB,GAAKmB,EAAGD,SAASnB,EAClHqB,EAAGF,SAASnB,EAChBG,KAAKiW,uBAAuBhV,EAAIC,EAAIsT,OACjC,CACH,IAAI0B,EAAMjV,EAAGU,kBACTwU,EAAOjV,EAAGS,kBACVyU,EAAO5B,EAAG7S,kBACd3B,KAAKqW,sBAAsBpV,EAAGD,SAAUE,EAAGF,SAAUwT,EAAGxT,SAAU,IAAI1B,EAAAC,SAAS2W,EAAIxU,EAAGwU,EAAItU,EAAG,GAAI,IAAItC,EAAAC,SAAS4W,EAAKzU,EAAGyU,EAAKvU,EAAG,GAAI,IAAItC,EAAAC,SAAS6W,EAAK1U,EAAG0U,EAAKxU,EAAG,KAK3KhC,uBAAuB8C,EAAYC,EAAYC,GAC3C,IAAIkT,EAAgBnT,EAAG3B,SAASlB,EAAI4C,EAAG1B,SAASlB,EAC5CiW,EAAiBnT,EAAG5B,SAASlB,EAAI4C,EAAG1B,SAASlB,EAE7CiV,GAAUpS,EAAG3B,SAASnB,EAAI6C,EAAG1B,SAASnB,GAAKiW,EAC3Cd,GAAUpS,EAAG5B,SAASnB,EAAI6C,EAAG1B,SAASnB,GAAKkW,EAE3CO,GAAY3T,EAAGhB,kBAAkBD,EAAIiB,EAAG3B,SAASjB,EAAI2C,EAAGf,kBAAkBD,EAAIgB,EAAG1B,SAASjB,GAAK+V,EAC/FS,GAAY3T,EAAGjB,kBAAkBD,EAAIkB,EAAG5B,SAASjB,EAAI2C,EAAGf,kBAAkBD,EAAIgB,EAAG1B,SAASjB,GAAKgW,EAE/FS,GAAY7T,EAAGhB,kBAAkBC,EAAIe,EAAG3B,SAASjB,EAAI2C,EAAGf,kBAAkBC,EAAIc,EAAG1B,SAASjB,GAAK+V,EAC/FW,GAAY7T,EAAGjB,kBAAkBC,EAAIgB,EAAG5B,SAASjB,EAAI2C,EAAGf,kBAAkBC,EAAIc,EAAG1B,SAASjB,GAAKgW,EAE/Fd,GAAW,EAAItS,EAAG3B,SAASjB,EAAI,EAAI2C,EAAG1B,SAASjB,GAAK+V,EACpDZ,GAAW,EAAItS,EAAG5B,SAASjB,EAAI,EAAI2C,EAAG1B,SAASjB,GAAKgW,EAEpDZ,EAAQzS,EAAG1B,SAASnB,EACpBuV,EAAQ1S,EAAG1B,SAASnB,EAEpBwV,EAAQ,EAAM3S,EAAG1B,SAASjB,EAC1BuV,EAAQ,EAAM5S,EAAG1B,SAASjB,EAE1B2W,EAAQhU,EAAGf,kBAAkBD,EAAIgB,EAAG1B,SAASjB,EAC7C4W,EAAQjU,EAAGf,kBAAkBC,EAAIc,EAAG1B,SAASjB,EAC7C6W,EAAQlU,EAAGf,kBAAkBD,EAAIgB,EAAG1B,SAASjB,EAC7C8W,EAAQnU,EAAGf,kBAAkBC,EAAIc,EAAG1B,SAASjB,EAE7CwV,EAAY7S,EAAG1B,SAASnB,EACxB2V,EAAa9S,EAAG1B,SAASnB,EACzB4V,EAAY/S,EAAG1B,SAASlB,EAE5B,IAAK,IAAI1C,EAAI,EAAGA,EAAI0Y,EAAe1Y,IAAK,CACpC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BqW,GAAaF,EAAQF,GAASjW,EAC9BsW,GAAaF,EAAQF,GAASlW,EAC9BmV,EAASP,EAET2B,EAASN,EACTO,EAASN,EACb,IAAK,IAAI7O,EAAI,EAAGA,EAAIrH,EAAQqH,IAAK,CAC7B,GAAI8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,GAAmB,CACrD1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C,IAAI7V,EAAI,EAAI6V,EAERlU,EAAuG,EAAnGpB,KAAK2L,IAAI3L,KAAK0L,IAAKgL,EAASjX,EAAIC,KAAKoC,YAAY8U,IAAInI,MAAQ/O,KAAKoC,YAAY8U,IAAInI,MAAQ,GAAI,GAClGnN,EAAyG,EAArGtB,KAAK2L,IAAI3L,KAAK0L,IAAKiL,EAASlX,EAAIC,KAAKoC,YAAY8U,IAAIlI,OAAShP,KAAKoC,YAAY8U,IAAIlI,OAAS,GAAI,GACpGmI,EAASnX,KAAKoC,YAAY8U,IAAI1S,QAAQ9C,EAAIE,EAAI5B,KAAKoC,YAAY8U,IAAInI,OAOvE/O,KAAKoC,YAAYA,YAAYsT,GAAoByB,EAGrDzB,IACAE,GAAUD,EACVqB,GAAUF,EACVG,GAAUF,EAGdxB,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,EAETwB,GAASJ,EACTM,GAASL,EAETI,GAASH,EACTK,GAASJ,EAGbX,EAAgBlT,EAAG5B,SAASlB,EAAI6C,EAAG3B,SAASlB,EAC5CiV,GAAUnS,EAAG5B,SAASnB,EAAI8C,EAAG3B,SAASnB,GAAKiW,EAC3Cb,GAAW,EAAIrS,EAAG5B,SAASjB,EAAI,EAAI4C,EAAG3B,SAASjB,GAAK+V,EACpDQ,GAAY1T,EAAGjB,kBAAkBD,EAAIkB,EAAG5B,SAASjB,EAAI4C,EAAGhB,kBAAkBD,EAAIiB,EAAG3B,SAASjB,GAAK+V,EAC/FU,GAAY5T,EAAGjB,kBAAkBC,EAAIgB,EAAG5B,SAASjB,EAAI4C,EAAGhB,kBAAkBC,EAAIe,EAAG3B,SAASjB,GAAK+V,EAE/FX,EAAQxS,EAAG3B,SAASnB,EACpBwV,EAAQ,EAAM1S,EAAG3B,SAASjB,EAC1B2W,EAAQ/T,EAAGhB,kBAAkBD,EAAIiB,EAAG3B,SAASjB,EAC7C4W,EAAQhU,EAAGhB,kBAAkBC,EAAIe,EAAG3B,SAASjB,EAC7CwV,EAAY5S,EAAG3B,SAASnB,EACxB4V,EAAY9S,EAAG3B,SAASlB,EAExB,IAAK,IAAI1C,EAAI,EAAGA,EAAI0Y,EAAe1Y,IAAK,CACpC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAE5DI,GAAaL,EAAQD,GAAS5U,EAC9BqW,GAAaF,EAAQF,GAASjW,EAC9BsW,GAAaF,EAAQF,GAASlW,EAC9BmV,EAASP,EAET2B,EAASN,EACTO,EAASN,EACb,IAAK,IAAI7O,EAAI,EAAGA,EAAIrH,EAAQqH,IAAK,CAC7B,GAAI8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,GAAmB,CACrD1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAE7C,IAAI7V,EAAI,EAAI6V,EAGRlU,EAAuG,EAAnGpB,KAAK2L,IAAI3L,KAAK0L,IAAKgL,EAASjX,EAAIC,KAAKoC,YAAY8U,IAAInI,MAAQ/O,KAAKoC,YAAY8U,IAAInI,MAAQ,GAAI,GAClGnN,EAAyG,EAArGtB,KAAK2L,IAAI3L,KAAK0L,IAAKiL,EAASlX,EAAIC,KAAKoC,YAAY8U,IAAIlI,OAAShP,KAAKoC,YAAY8U,IAAIlI,OAAS,GAAI,GACpGmI,EAASnX,KAAKoC,YAAY8U,IAAI1S,QAAQ9C,EAAIE,EAAI5B,KAAKoC,YAAY8U,IAAInI,OAMvE/O,KAAKoC,YAAYA,YAAYsT,GAAoByB,EAErDzB,IACAE,GAAUD,EACVqB,GAAUF,EACVG,GAAUF,EAGdxB,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,EAETwB,GAASJ,EACTM,GAASL,EAETI,GAASH,EACTK,GAASJ,GAKjB7W,sBAAsB8C,EAAcC,EAAcC,EAAcwU,EAAcC,EAAcC,GAExF,IAAIvB,EAAiBpT,EAAG7C,EAAI4C,EAAG5C,EAC3BgW,EAAgBlT,EAAG9C,EAAI4C,EAAG5C,EAE1BkV,GAAUrS,EAAG9C,EAAI6C,EAAG7C,GAAKkW,EACzBhB,GAAUnS,EAAG/C,EAAI6C,EAAG7C,GAAKiW,EAEzBQ,GAAYgB,EAAGzX,EAAI+C,EAAG7C,EAAIqX,EAAGvX,EAAI6C,EAAG3C,GAAK+V,EACzCS,GAAYc,EAAGxX,EAAI8C,EAAG5C,EAAIqX,EAAGvX,EAAI6C,EAAG3C,GAAKgW,EAEzCS,GAAYc,EAAGxX,EAAI8C,EAAG7C,EAAIqX,EAAGtX,EAAI4C,EAAG3C,GAAK+V,EACzCW,GAAYY,EAAGvX,EAAI6C,EAAG5C,EAAIqX,EAAGtX,EAAI4C,EAAG3C,GAAKgW,EAGzCb,GAAW,EAAIvS,EAAG5C,EAAI,EAAI2C,EAAG3C,GAAKgW,EAClCd,GAAW,EAAIrS,EAAG7C,EAAI,EAAI2C,EAAG3C,GAAK+V,EAElCX,EAAQzS,EAAG7C,EACXuV,EAAQ1S,EAAG7C,EAEXwV,EAAQ,EAAM3S,EAAG3C,EACjBuV,EAAQ,EAAM5S,EAAG3C,EAEjB2W,EAAQU,EAAGvX,EAAI6C,EAAG3C,EAClB4W,EAAQS,EAAGtX,EAAI4C,EAAG3C,EAClB6W,EAAQQ,EAAGvX,EAAI6C,EAAG3C,EAClB8W,EAAQO,EAAGtX,EAAI4C,EAAG3C,EAElBwV,EAAY7S,EAAG7C,EACf2V,EAAa9S,EAAG7C,EAChB4V,EAAY/S,EAAG5C,EAEnB,IAAK,IAAI1C,EAAI,EAAGA,EAAI2Y,EAAgB3Y,IAAK,CACrC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAC5DI,GAAaL,EAAQD,GAAS5U,EAC9BqW,GAAaF,EAAQF,GAASjW,EAC9BsW,GAAaF,EAAQF,GAASlW,EAC9BmV,EAASP,EAET2B,EAASN,EACTO,EAASN,EACb,IAAK,IAAI7O,EAAI,EAAGA,EAAIrH,EAAQqH,IAAK,CAC7B,GAAI8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,GAAmB,CACrD1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C,IAAI7V,EAAI,EAAI6V,EAGRlU,EAAuG,EAAnGpB,KAAK2L,IAAI3L,KAAK0L,IAAKgL,EAASjX,EAAIC,KAAKoC,YAAY8U,IAAInI,MAAQ/O,KAAKoC,YAAY8U,IAAInI,MAAQ,GAAI,GAClGnN,EAAyG,EAArGtB,KAAK2L,IAAI3L,KAAK0L,IAAKiL,EAASlX,EAAIC,KAAKoC,YAAY8U,IAAIlI,OAAShP,KAAKoC,YAAY8U,IAAIlI,OAAS,GAAI,GACpGmI,EAASnX,KAAKoC,YAAY8U,IAAI1S,QAAQ9C,EAAIE,EAAI5B,KAAKoC,YAAY8U,IAAInI,OAMvE/O,KAAKoC,YAAYA,YAAYsT,GAAoByB,EAErDzB,IACAE,GAAUD,EACVqB,GAAUF,EACVG,GAAUF,EAGdxB,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,EAETwB,GAASJ,EACTM,GAASL,EAETI,GAASH,EACTK,GAASJ,EAGbV,EAAiBnT,EAAG9C,EAAI6C,EAAG7C,EAC3BkV,GAAUpS,EAAG/C,EAAI8C,EAAG9C,GAAKkW,EACzBb,GAAW,EAAItS,EAAG7C,EAAI,EAAI4C,EAAG5C,GAAKgW,EAElCQ,GAAYe,EAAGzX,EAAI+C,EAAG7C,EAAIsX,EAAGxX,EAAI8C,EAAG5C,GAAKgW,EACzCU,GAAYa,EAAGxX,EAAI8C,EAAG7C,EAAIsX,EAAGvX,EAAI6C,EAAG5C,GAAKgW,EAEzCX,EAAQzS,EAAG9C,EACXyV,EAAQ,EAAM3S,EAAG5C,EAEjB6W,EAAQS,EAAGxX,EAAI8C,EAAG5C,EAClB8W,EAAQQ,EAAGvX,EAAI6C,EAAG5C,EAElByV,EAAa7S,EAAG9C,EAChB4V,EAAY9S,EAAG7C,EAEf,IAAK,IAAI1C,EAAI,EAAGA,EAAI2Y,EAAgB3Y,IAAK,CACrC,IAAIqD,EAASH,KAAKe,MAAMmU,GAAclV,KAAKe,MAAMkU,GAC7CG,EAA2C,IAAxBpV,KAAKe,MAAMoU,GAAmBnV,KAAKe,MAAMkU,GAG5DI,GAAaL,EAAQD,GAAS5U,EAC9BqW,GAAaF,EAAQF,GAASjW,EAC9BsW,GAAaF,EAAQF,GAASlW,EAC9BmV,EAASP,EAET2B,EAASN,EACTO,EAASN,EACb,IAAK,IAAI7O,EAAI,EAAGA,EAAIrH,EAAQqH,IAAK,CAC7B,GAAI8N,EAAS5V,KAAKoC,YAAYyT,QAAQH,GAAmB,CACrD1V,KAAKoC,YAAYyT,QAAQH,GAAoBE,EAC7C,IAAI7V,EAAI,EAAI6V,EAERlU,EAAuG,EAAnGpB,KAAK2L,IAAI3L,KAAK0L,IAAKgL,EAASjX,EAAIC,KAAKoC,YAAY8U,IAAInI,MAAQ/O,KAAKoC,YAAY8U,IAAInI,MAAQ,GAAI,GAClGnN,EAAyG,EAArGtB,KAAK2L,IAAI3L,KAAK0L,IAAKiL,EAASlX,EAAIC,KAAKoC,YAAY8U,IAAIlI,OAAShP,KAAKoC,YAAY8U,IAAIlI,OAAS,GAAI,GACpGmI,EAASnX,KAAKoC,YAAY8U,IAAI1S,QAAQ9C,EAAIE,EAAI5B,KAAKoC,YAAY8U,IAAInI,OAMvE/O,KAAKoC,YAAYA,YAAYsT,GAAoByB,EAErDzB,IACAE,GAAUD,EACVqB,GAAUF,EACVG,GAAUF,EAGdxB,GAAaR,EACbS,GAAcR,EACdS,IAEAN,GAASJ,EACTK,GAASJ,EAETK,GAASJ,EACTK,GAASJ,EAETwB,GAASJ,EACTM,GAASL,EAETI,GAASH,EACTK,GAASJ,uFChWrB,MAAAc,EAAAva,EAAA,IACAwa,EAAAxa,EAAA,IACAya,EAAAza,EAAA,IACA0a,EAAA1a,EAAA,UAEawO,EAmBF5L,yBAAyBoL,GAE5B,IAAIH,EAASG,EAEb,IAAK,IAAIlD,EAAI,EAAGA,EAAI0D,EAA2BmM,WAAWlX,OAAQqH,IAAK,CACnE,MAAM8P,EAAOpM,EAA2BmM,WAAW7P,GAC7CmD,EAAQJ,EACdA,EAAS,IAAIhD,MACb,IAAIqD,EAAID,EAAMA,EAAMxK,OAAS,GAE7B,IAAK,IAAIrD,EAAI,EAAGA,EAAI6N,EAAMxK,OAAQrD,IAAK,CACnC,MAAM+N,EAAQF,EAAM7N,GAChBwa,EAAKC,SAAS1M,IACTyM,EAAKC,SAAS3M,IACfL,EAAO1C,KAAKyP,EAAKE,oBAAoB5M,EAAGC,IAE5CN,EAAO1C,KAAKgD,IACLyM,EAAKC,SAAS3M,IACrBL,EAAO1C,KAAKyP,EAAKE,oBAAoB5M,EAAGC,IAE5CD,EAAIC,GAIZ,OAAON,GAzCIW,EAAAmM,WAAa,IAAI9P,MAC5B,IAAI0P,EAAAzW,cACJ,IAAI0W,EAAA3V,aACJ,IAAI4V,EAAAxV,eACJ,IAAIyV,EAAA1V,aANZ9E,EAAAsO,8GCNA,MAAAuM,EAAA/a,EAAA,IAEAkF,EAAAlF,EAAA,GACA4D,EAAA5D,EAAA,GACA0G,EAAA1G,EAAA,IACA+E,EAAA/E,EAAA,GAEAyR,EAAAzR,EAAA,GACA8M,EAAA9M,EAAA,GAEAua,EAAAva,EAAA,IACAwa,EAAAxa,EAAA,IACA0a,EAAA1a,EAAA,IACAya,EAAAza,EAAA,IACAgb,EAAAhb,EAAA,IACAib,EAAAjb,EAAA,IACAkb,EAAAlb,EAAA,IACAmb,EAAAnb,EAAA,IACAob,EAAApb,EAAA,IACAqb,EAAArb,EAAA,IACAsb,EAAAtb,EAAA,UAUamE,EA8CTvB,YAAYmP,EAAeC,GAnCpBhP,KAAAsC,SAAqBJ,EAAAK,SAASC,KAI7BxC,KAAAuY,MAAQ,IAAIN,EAAA3L,MAeZtM,KAAAwY,aAAe,IAAIR,EAAA7E,2BAA2BnT,MAC/CA,KAAA6L,mBAAqB,IAAIqM,EAAA3D,mBAAmBvU,MAC5CA,KAAAyY,2BAA6B,IAAIL,EAAApC,2BAA2BhW,MAE3DA,KAAA0Y,iBAAmB,IAAIP,EAAAjI,iBAAiBlQ,MACzCA,KAAAyH,kBAAoB,IAAI4Q,EAAApO,6BAA6BjK,MACrDA,KAAA2Y,0BAA4B,IAAIL,EAAAM,2BAA2B5Y,MAsTlEA,KAAA6Y,UAAY,IAAI7U,YAAY,MA0pF5BhE,KAAA8Y,kBAA4B,EAC5B9Y,KAAA+Y,eAAiB,EACjB/Y,KAAAgZ,aAAe,EAv8FXhZ,KAAK+O,MAAQA,EACb/O,KAAKgP,OAASA,EAEdhP,KAAKiZ,UAAY,IAAIC,UAAU,IAAK,KACpClZ,KAAK6V,QAAU,IAAIsD,aAAa,MAChC,IAAIC,EAAc,IAAIC,YAAYrZ,KAAK+O,MAAQ/O,KAAKgP,OAAS7N,EAAYmY,qBACzEtZ,KAAKuZ,iBAAmB,IAAIC,kBAAkBJ,GAC9CpZ,KAAKoC,YAAc,IAAI4B,YAAYoV,GAhBhCxZ,YAAY6C,GACfzC,KAAKsC,SAAWG,EAGpB7C,WAAW4E,GACPxE,KAAKkX,IAAM1S,EAcR5E,WAAW4E,EAAkBiV,IAgB7B7Z,eAEH,OADAI,KAAKiZ,UAAUjJ,KAAK0J,IAAI1Z,KAAKuZ,kBACtBvZ,KAAKiZ,UAGTrZ,QACH,IAAI8L,EAAgB1L,KAAK2Z,QAAQ,GAC7BC,EAAgB5Z,KAAK+O,MAAQ/O,KAAKgP,OACtC,IAAK,IAAI5R,EAAI,EAAGA,EAAIwc,EAAOxc,IACvB4C,KAAKoC,YAAYhF,GAAKsO,EAIvB9L,iBAAiB8L,GACpB1L,KAAKoC,YAAYyX,KAAKnO,GAGnB9L,UAAUC,EAAWC,EAAW4L,GACnC1L,KAAKoC,YAAYvC,EAAIC,EAAIE,KAAK+O,OAASrD,EAIpC9L,WAAWC,EAAWC,EAAW4L,EAAeoO,GAEnD,MAAMzQ,EAAgBxJ,EAAIC,EAAIE,KAAK+O,MACnC,IAAI/F,GAAU0C,GAAS,GAAM,KAAQ,IAAMoO,EACvC5I,EAAe,EAAIlI,EAEnB9K,GAAO8B,KAAKoC,YAAYiH,IAAU,EAAK,KAAQ,GAC/CqC,GAAS,EAAK,KAAQ,EAAW,EACjC2F,GAAOrR,KAAKoC,YAAYiH,IAAU,EAAK,KAAQ,GACjDqC,GAAS,EAAK,KAAQ,EAAW,EAC/B9C,GAAO5I,KAAKoC,YAAYiH,IAAU,GAAM,KAAQ,GAClDqC,GAAS,GAAM,KAAQ,EAAW,EAEpC1L,KAAKoC,YAAYiH,GAASnL,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAI1DhJ,UAAUC,EAAWC,EAAW4L,GACnC,OAAO1L,KAAKoC,YAAYvC,EAAIC,EAAIE,KAAK+O,OAGlCnP,QAAQwK,GACX,OAAQ,KAAO,GACVA,GAAO,GACPA,GAAO,EACR,EAGDxK,SAASC,EAAGC,EAAGiP,EAAOrD,GACzB,IAAI0H,EAAQvT,EAAIC,EAAIE,KAAK+O,MAEzB,IAAK,IAAI3R,EAAI,EAAGA,EAAI2R,EAAO3R,IACvB4C,KAAKoC,YAAYgR,KAAW1H,EAI7B9L,UAAUC,EAAGC,EAAGiP,EAAOC,EAAQtD,GAClC,IAAI0H,EAAQvT,EAAIC,EAAIE,KAAK+O,MACzB,IAAK,IAAIjH,EAAI,EAAGA,EAAIkH,EAAQlH,IAAK,CAC7B,IAAK,IAAI1K,EAAI,EAAGA,EAAI2R,EAAO3R,IAEvB4C,KAAKoC,YAAYgR,KAAW1H,EAGhC0H,GAAS,IAAMrE,GAIhBnP,SAASC,EAAWC,EAAWia,EAAcvV,GAChD,IAAIwV,EAAOna,EACPoa,EAAa,IAAIC,WAAW,GAChC,IAAK,IAAI9c,EAAI,EAAGA,EAAI2c,EAAKtZ,OAAQrD,IAAK,CAClC,IAAIiM,EAAQ0Q,EAAKG,WAAW9c,GAAK6c,EAC7BjM,EAA8B,EAAzB1N,KAAK6Z,MAAM9Q,EAAQ,IACxB4E,EAA8B,EAAzB3N,KAAK6Z,MAAM9Q,EAAQ,IAC5BrJ,KAAKoa,yBAAyBJ,EAAMla,EAAGkO,EAAIC,EAAI,EAAG,EAAGzJ,GACrDwV,GAAQ,GAITpa,iBAEH,IAAK,IAAIxC,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIyC,EAAI,EAAGA,EAAI,IAAKA,IACrBG,KAAKoC,YAA0B,KAH3B,IAGsBhF,GAAWyC,GAAKG,KAAKoC,YAAkC,KAH7E,IAGoE,EAAJhF,EAAQ,GAAWyC,EACnFG,KAAK+I,YAAY,EAAG,GAAI3L,IAA+C,GAAzCkD,KAAK2H,IAAiB,KAAbpD,KAAKC,MAAoB,GAAJ1H,IAAiB,GAKtFwC,iBAAiBya,EAAYC,EAAYC,EAAYC,EAAYzL,EAAeC,EAAgBxK,EAAkBsV,GACrH,IAAK,IAAItL,EAAI,EAAGA,EAAIO,EAAOP,IACvB,IAAK,IAAIiM,EAAI,EAAGA,EAAIzL,EAAQyL,IAAK,CAC7B,IAAIC,EAAYH,EAAK/L,GAAOgM,EAAKC,GAAKjW,EAAQuK,MAC1C4L,EAAWN,EAAK7L,EAAiB,KAAV8L,EAAKG,GAC5BzR,GAAUxE,EAAQA,QAAQkW,IAAa,GAAM,KAAQ,IAAMZ,EAC3D5I,EAAe,EAAIlI,EAEnB9K,GAAO8B,KAAKoC,YAAYuY,IAAY,EAAK,KAAQ,GAAmBnW,EAAQA,QAAQkW,IAAa,EAAK,KAAQ,EAAW,EACzHrJ,GAAOrR,KAAKoC,YAAYuY,IAAY,EAAK,KAAQ,GAAmBnW,EAAQA,QAAQkW,IAAa,EAAK,KAAQ,EAAW,EACzH9R,GAAO5I,KAAKoC,YAAYuY,IAAY,GAAM,KAAQ,GAAmBnW,EAAQA,QAAQkW,IAAa,GAAM,KAAQ,EAAW,EAE/H1a,KAAKoC,YAAYuY,GAAWzc,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,IAKpEhJ,yBAAyBya,EAAYC,EAAYC,EAAYC,EAAYzL,EAAeC,EAAgBxK,GAC3G,IAAIkW,EAAWH,EAAKC,EAAKhW,EAAQuK,MAC7B4L,EAAUN,EAAU,IAALC,EAEnB,IAAK,IAAIG,EAAI,EAAGA,EAAIzL,EAAQyL,IAAK,CAC7B,IAAK,IAAIjM,EAAI,EAAGA,EAAIO,EAAOP,IAAK,CAC5B,MAAM9C,EAAQlH,EAAQA,QAAQkW,GAClB,WAARhP,IACA1L,KAAKoC,YAAYuY,GAAWjP,GAEhCgP,IACAC,IAEJD,GAAYlW,EAAQuK,MAAQA,EAC5B4L,GAAW,IAAM5L,GAIlBnP,uBAAuBya,EAAYC,EAAYC,EAAYC,EAAYzL,EAAeC,EAAgBxK,GACzG,IAAIkW,EAAWH,EAAKC,EAAKhW,EAAQuK,MAC7B4L,EAAUN,EAAU,IAALC,EAEnB,IAAK,IAAIG,EAAI,EAAGA,EAAIzL,EAAQyL,IAAK,CAC7B,IAAK,IAAIjM,EAAI,EAAGA,EAAIO,EAAOP,IACvBxO,KAAKoC,YAAYuY,GAAWnW,EAAQA,QAAQkW,GAC5CA,IACAC,IAEJD,GAAYlW,EAAQuK,MAAQA,EAC5B4L,GAAW,IAAM5L,GAIlBnP,gBAAgBya,EAAYC,EAAYC,EAAYC,EAAYzL,EAAeC,EAAgBxK,EAAkBsV,GACpH,IAAIY,EAAWH,EAAKC,EAAKhW,EAAQuK,MAC7B4L,EAAUN,EAAU,IAALC,EAEnB,IAAK,IAAIG,EAAI,EAAGA,EAAIzL,EAAQyL,IAAK,CAC7B,IAAK,IAAIjM,EAAI,EAAGA,EAAIO,EAAOP,IAAK,CAC5B,IAAIxF,GAAUxE,EAAQA,QAAQkW,IAAa,GAAM,KAAQ,IAAMZ,EAC3D5I,EAAe,EAAIlI,EAEnB4R,EAAU5a,KAAKoC,YAAYuY,GAC3BE,EAAUrW,EAAQA,QAAQkW,GAE1Bxc,GAAK0c,GAAW,EAAI,KAAQ1J,GAAgB2J,GAAW,EAAI,KAAQ7R,EACnEqI,GAAKuJ,GAAW,EAAI,KAAQ1J,GAAgB2J,GAAW,EAAI,KAAQ7R,EACnEJ,GAAKgS,GAAW,GAAK,KAAQ1J,GAAgB2J,GAAW,GAAK,KAAQ7R,EAEzEhJ,KAAKoC,YAAYuY,GAAWzc,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAC/D8R,IACAC,IAEJD,GAAYlW,EAAQuK,MAAQA,EAC5B4L,GAAW,IAAM5L,GAIlBnP,mBAAmBya,EAAYC,EAAYC,EAAYC,EAAYzL,EAAeC,EAAgBxK,EAAkBsV,GACvH,IAAIY,EAAWH,EAAKC,EAAKhW,EAAQuK,MAC7B4L,EAAUN,EAAU,IAALC,EAEnB,IAAK,IAAIG,EAAI,EAAGA,EAAIzL,EAAQyL,IAAK,CAC7B,IAAK,IAAIjM,EAAI,EAAGA,EAAIO,EAAOP,IAAK,CAC5B,IAAIxF,GAAUxE,EAAQA,QAAQkW,IAAa,GAAM,KAAQ,IAAMZ,EAG3Dc,EAAU5a,KAAKoC,YAAYuY,GAC3BE,EAAUrW,EAAQA,QAAQkW,GAE1Bxc,EAAIoC,KAAK0L,IAAI,KAAM4O,GAAW,EAAI,MAASC,GAAW,EAAI,KAAQ7R,GAClEqI,EAAI/Q,KAAK0L,IAAI,KAAM4O,GAAW,EAAI,MAASC,GAAW,EAAI,KAAQ7R,GAClEJ,EAAItI,KAAK0L,IAAI,KAAM4O,GAAW,GAAK,MAASC,GAAW,GAAK,KAAQ7R,GAExEhJ,KAAKoC,YAAYuY,GAAWzc,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAC/D8R,IACAC,IAEJD,GAAYlW,EAAQuK,MAAQA,EAC5B4L,GAAW,IAAM5L,GAIlBnP,WAIH,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBE,KAAK8a,SAAa,GAAJjb,EALX,GAK8B,GAAJC,EAJ1B,GAIyC,GAAI,GAAIE,KAAK+a,UAAc,GAAJlb,EALhE,GAKmF,GAAJC,EAJ/E,GAI8F,IAGzGE,KAAKqU,YAAY,IAAItS,EAAAxC,SARV,GACA,IAOgC,IAAM,IAAIwC,EAAAxC,SAASyb,IAPnD,IAOyE,IAAM,YAC1Fhb,KAAKqU,YAAY,IAAItS,EAAAxC,SATV,GASyB0b,KAAgB,IAAM,IAAIlZ,EAAAxC,SAASyb,IAAeC,KAAgB,IAAM,YAC5Gjb,KAAKqU,YAAY,IAAItS,EAAAxC,SAVV,GACA,IASgC,IAAM,IAAIwC,EAAAxC,SAV1C,GAUyD0b,KAAgB,IAAM,YAC1Fjb,KAAKqU,YAAY,IAAItS,EAAAxC,SAASyb,IAVnB,IAUyC,IAAM,IAAIjZ,EAAAxC,SAASyb,IAAeC,KAAgB,IAAM,YAGzGrb,YAAYwT,EAAeC,EAAa6H,GAC3C,OAAIA,GAAW9H,EACJ,EAEP8H,GAAW7H,EACJ,GAEH6H,EAAU9H,IAAUC,EAAMD,GAG/BxT,oBAAoB4E,EAAkBI,GACzC,IAAIuW,EAAS7a,KAAKe,QAAQ,EAAIrB,KAAK+I,YAAY,IAAK,MAAc,IAAPnE,KAAiBJ,EAAQwK,OAAS,MAC7FhP,KAAKob,0BAA0Bpb,KAAKoC,YAAaoC,EAAQA,QAAS2W,GAG/Dvb,UAAU4E,EAAkBI,EAAcyW,GAC7C,IAAIC,EAAY,IAAIzT,MAAc,KAC9B8G,EAAM,IAAIF,EAAAG,QACdD,EAAIE,QAAQ,KAEZ,IAAK,IAAI/O,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IACpByb,EAAUzb,EAAQ,GAAJC,GAAU,IAAMQ,KAAKe,MAAuB,IAAjBsN,EAAIG,YAAuB,IAG5E9O,KAAKub,QACL,IAAK,IAAIzb,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IACpBG,KAAKwb,gBAAoB,GAAJ3b,EAAY,GAAJC,EAAY,GAAJD,EAAY,GAAJC,EAAQ,GAAI,GAAI0E,EACzDxE,KAAK+I,YAAYsS,EAAYC,EAAUzb,EAAQ,GAAJC,GAASub,EAAYC,EAAUzb,EAAQ,GAAJC,GAAU,IAAK8E,IAKtGhF,0BAA0B8P,EAAkB+L,EAAmBN,EAAS,GAC3E,IAAI/d,EAAI,KACJse,EAAI,KACJre,EAAI,KAAO,IAAM8d,GACrB,OAAS/d,GACLsS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GAExCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GAExCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GAExCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GACxCqS,IAAMgM,GAAKD,IAAOpe,GAAIqS,IAAMgM,GAAKD,IAAOpe,GAKzCuC,oBAAoB8P,EAAkB+L,EAAmBN,EAAS,GACrEzL,EAAIgK,IAAI+B,GAKL7b,mBAAmBwF,EAAqBZ,GAC3C,IAAIpH,EAAI,EACR,IAAK,IAAI0C,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAI8b,EAAS9b,EAAI,IACb+b,EAAS9b,EAAI,IACb+b,EAAkD,MAA3Cvb,KAAKC,KAAKob,EAAQA,EAAQC,EAAQA,GACzClJ,EAAQpS,KAAKwb,MAAMH,EAAOC,IAAoB,EAAVtb,KAAKyH,IAAU,IAEnDgU,EAASvX,EAAQA,SAAgB,IAAPqX,GAAgC,KAAR,IAARnJ,IAE9C1S,KAAKoC,YAAYhF,KAAO2e,GAK7Bnc,oBAAoBwF,EAAqBZ,GAC5C,IAAIpH,EAAI,EACJ4e,EAAY,OAAS,GAAM,IAAa,EAAI1b,KAAK2H,IAAkB,MAAd7C,KACzD,IAAK,IAAItF,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAI8b,EAAS9b,EAAI,IACb+b,EAAS9b,EAAI,IACb+b,EAAOvb,KAAKC,KAAKob,EAAQA,EAAQC,EAAQA,GAASI,EAClDtJ,EAAQpS,KAAKwb,MAAMH,EAAOC,IAAoB,EAAVtb,KAAKyH,IAAU,IAEnDgU,EAASvX,EAAQA,SAAgB,IAAPqX,GAAgC,KAAR,IAARnJ,IAE9C1S,KAAKoC,YAAYhF,KAAO2e,GAK7Bnc,oBAAoBwF,EAAqBZ,GAC5C,IAAIpH,EAAI,EACwCkD,KAAK2H,IAAkB,MAAd7C,GACzD,IAAK,IAAItF,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAI8b,EAAS9b,EAAI,IACb+b,EAAS9b,EAAI,IACb+b,EAAkD,GAA3Cvb,KAAKC,KAAKob,EAAQA,EAAQC,EAAQA,GAA8B,KAAdxW,EACzDsN,EAAQpS,KAAKwb,MAAMH,EAAOC,IAAoB,EAAVtb,KAAKyH,IAAU,IAAqB,KAAd3C,EAE1D2W,EAASvX,EAAQA,SAAgB,IAAPqX,GAAgC,KAAR,IAARnJ,IAE9C1S,KAAKoC,YAAYhF,KAAO2e,GAK7Bnc,MAAMwF,EAAqBZ,EAAkBvE,EAAgB,KAChE,IAAK,IAAIJ,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBE,KAAKwb,gBAAoB,GAAJ3b,EAAY,GAAJC,EAAcQ,KAAKe,MAAM+D,EAAc,IAAMvF,EAAIC,GAAK,GAA9C,GAAmD,EAAG,GAAI,GAAI0E,EAASvE,GAKjHL,sBAAsBuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkBzE,GAClG,IAKIuQ,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,IAAIiC,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAC/B,GAAIG,KAAK6V,QAAQ7E,GAAUjR,EAAG,CAC1BC,KAAK6V,QAAQ7E,GAAUjR,EACvB,IAAIkR,EAAe3Q,KAAK0L,IAAS,EAAL6E,EAAQrM,EAAQuK,MAAQ,GAAKzO,KAAK0L,IAAS,EAAL8E,EAAQtM,EAAQwK,OAAS,GAAKxK,EAAQuK,MAEpG7Q,GAAK8B,KAAKoC,YAAY4O,IAAW,EAAI,MAASxM,EAAQA,QAAQyM,IAAiB,EAAI,KACnFI,GAAKrR,KAAKoC,YAAY4O,IAAW,EAAI,MAASxM,EAAQA,QAAQyM,IAAiB,EAAI,KACnFrI,GAAK5I,KAAKoC,YAAY4O,IAAW,GAAK,MAASxM,EAAQA,QAAQyM,IAAiB,GAAK,KAEzFjR,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAElEiI,GAAMD,EACNI,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAIZ3Q,aAAauQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkBzE,EAAWsQ,GACpG,IAKIC,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,MAAMgC,EAAa,EAAI,IAAMV,EAC7B,IAAIW,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAC/B,GAAIG,KAAK6V,QAAQ7E,GAAUjR,EAAG,CAE1B,IAAIkR,EAAe3Q,KAAK0L,IAAS,EAAL6E,EAAQrM,EAAQuK,MAAQ,GAAKzO,KAAK0L,IAAS,EAAL8E,EAAQtM,EAAQwK,OAAS,GAAKxK,EAAQuK,MAEpG/F,GAASxE,EAAQA,QAAQyM,IAAiB,GAAK,KAAQF,EACvDG,EAAe,EAAIlI,EACnBmI,EAAmBnR,KAAKoC,YAAY4O,GACpCI,EAAe5M,EAAQA,QAAQyM,GAE/B/S,GAAKiT,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQpI,EACjFqI,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQpI,EACjFJ,GAAKuI,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQpI,EAEvFhJ,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAElEiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAIZ3Q,oBAAoBuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkBzE,EAAWsQ,GAC3G,IAKIC,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,MAAMgC,EAAa,EAAI,IAAMV,EAC7B,IAAIW,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAE/B,IAAIoR,EAAe3Q,KAAK0L,IAAS,EAAL6E,EAAQrM,EAAQuK,MAAQ,GAAKzO,KAAK0L,IAAS,EAAL8E,EAAQtM,EAAQwK,OAAS,GAAKxK,EAAQuK,MAEpG/F,GAASxE,EAAQA,QAAQyM,IAAiB,GAAK,KAAQF,EACvDG,EAAe,EAAIlI,EACnBmI,EAAmBnR,KAAKoC,YAAY4O,GACpCI,EAAe5M,EAAQA,QAAQyM,GAE/B/S,GAAKiT,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQpI,EACjFqI,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQpI,EACjFJ,GAAKuI,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQpI,EAEvFhJ,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAE9DiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAIZ3Q,iBAAiBuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkBzE,EAAWsQ,GACxG,IAKIC,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,MAAMgC,EAAa,EAAI,IAAMV,EAC7B,IAAIW,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAC/B,GAAIG,KAAK6V,QAAQ7E,GAAUjR,EAAG,CAG1B,IAAIkc,EAAQ3b,KAAK0L,IAAI1L,KAAK2L,IAAM,EAAIlM,EAAI,EAAIC,KAAK6V,QAAQ7E,GAAW,GAAM,GAEtEC,EAAe3Q,KAAK0L,IAAS,EAAL6E,EAAQrM,EAAQuK,MAAQ,GAAKzO,KAAK0L,IAAS,EAAL8E,EAAQtM,EAAQwK,OAAS,GAAKxK,EAAQuK,MAEpG/F,GAASxE,EAAQA,QAAQyM,IAAiB,GAAK,KAAQF,EAAakL,EACpE/K,EAAe,EAAIlI,EAEnB9K,GAAK8B,KAAKoC,YAAY4O,IAAW,EAAI,KAAQE,GAAgB1M,EAAQA,QAAQyM,IAAiB,EAAI,KAAQjI,EAC1GqI,GAAKrR,KAAKoC,YAAY4O,IAAW,EAAI,KAAQE,GAAgB1M,EAAQA,QAAQyM,IAAiB,EAAI,KAAQjI,EAC1GJ,GAAK5I,KAAKoC,YAAY4O,IAAW,GAAK,KAAQE,GAAgB1M,EAAQA,QAAQyM,IAAiB,GAAK,KAAQjI,EAEhHhJ,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAElEiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAIZ3Q,iBACHI,KAAKmF,oBAAoBnF,KAAK6Y,UAAW7Y,KAAKoC,aAC9C,IAAIoC,EAAU,IAAId,EAAAuB,QAClBT,EAAQA,QAAUxE,KAAK6Y,UACvBrU,EAAQuK,MAAQ,IAChBvK,EAAQwK,OAAS,IACjB,IAAID,EAAQ,IACRC,EAAS,IACb,IAAK,IAAI5R,EAAI,EAAGA,EAAI,GAAIA,IACpB2R,GAAS,IAAM,IACfC,GAAU,GACVhP,KAAK0Y,iBAAiBwD,sBAClB,IAAUnN,EAAQ,EAClB,IAAUC,EAAS,EACnBD,EAAOC,EAAQxK,EAAS,KAAQ,GAAKpH,GAAK,IAC9C4C,KAAKmF,oBAAoBnF,KAAK6Y,UAAW7Y,KAAKoC,aAI/CxC,wBAAwBuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkB6L,GACpG,IAKIC,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,MAAMgC,EAAa,EAAI,IAAMV,EAC7B,IAAIW,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAE/B,IAAI6L,EAAQlH,EAAQ2X,0BAA0BtL,EAAIC,GAE9C9H,EAAQ,IAAM+H,EACdG,EAAe,EAAIlI,EAEnBmI,EAAmBnR,KAAKoC,YAAY4O,GAGpC9S,GAAKiT,GAAoB,EAAI,KAAQD,GAFtBxF,GAEsD,EAAI,KAAQ1C,EACjFqI,GAAKF,GAAoB,EAAI,KAAQD,GAHtBxF,GAGsD,EAAI,KAAQ1C,EACjFJ,GAAKuI,GAAoB,GAAK,KAAQD,GAJvBxF,GAIuD,GAAK,KAAQ1C,EAEvFhJ,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAC9DiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAIZ3Q,2BAA2BuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,EAAkB6L,GACvG,IAKIC,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,IAAIiC,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAE/B,IAAI6L,EAAQlH,EAAQ2X,0BAA0BtL,EAAIC,GAE9CK,EAAmBnR,KAAKoC,YAAY4O,GACpCI,EAAe1F,EAEfxN,EAAIoC,KAAK0L,KAAKmF,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAQf,EAAY,KACvFgB,EAAI/Q,KAAK0L,KAAKmF,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAQf,EAAY,KACvFzH,EAAItI,KAAK0L,KAAKmF,GAAoB,GAAK,MAASC,GAAgB,GAAK,KAAQf,EAAY,KAG7FrQ,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAC9DiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAKZ3Q,yBAAyBuQ,EAAYC,EAAYrB,EAAeC,EAAgBxK,GACnF,IAKI8L,EACAC,EACAC,EACAC,EAkBAC,EA1BAC,EAAQnM,EAAQuK,MAAQA,EACxB6B,EAAQpM,EAAQwK,OAASA,EACzB6B,EAAK,EACLC,EAAK,EAOT,GAAIV,EAAKpB,EAAS,GACdoB,EAAK,KACLD,EAAKpB,EAAQ,GACboB,EAAK,IACL,OAGAC,EAAK,GACLU,EAAKF,GAASR,EACdE,EAAatB,EAASoB,EAAM9P,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,GACxDwB,EAAS,IAETA,EAASJ,EACTE,EAAYtB,EAAS1O,KAAK2L,IAAImE,EAAKpB,EAAS,IAAK,IAKjDmB,EAAK,GACLO,EAAgBG,EAAKF,GAASR,EAC9BI,EAAYxB,EAAQoB,EAAM7P,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,GACrD0B,EAAS,IAETC,EAAgB,EAChBD,EAASN,EACTI,EAAWxB,EAAQzO,KAAK2L,IAAIkE,EAAKpB,EAAQ,IAAK,IAGlD,IAAIiC,EAAS,EAAsB,IAAX,EACxB,IAAK,IAAIlR,EAAI,EAAGA,EAAIwQ,EAAWxQ,IAAK,CAChC,IAAK,IAAID,EAAI,EAAGA,EAAI0Q,EAAU1Q,IAAK,CAC/B,IAAIoR,EAAe3Q,KAAK0L,IAAS,EAAL6E,EAAQrM,EAAQuK,MAAQ,GAAKzO,KAAK0L,IAAS,EAAL8E,EAAQtM,EAAQwK,OAAS,GAAKxK,EAAQuK,MAEpGoC,EAAmBnR,KAAKoC,YAAY4O,GACpCI,EAAe5M,EAAQA,QAAQyM,GAE/B/S,EAAIoC,KAAK0L,KAAKmF,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAO,KAC1EC,EAAI/Q,KAAK0L,KAAKmF,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAO,KAC1ExI,EAAItI,KAAK0L,KAAKmF,GAAoB,GAAK,MAASC,GAAgB,GAAK,KAAO,KAEhFpR,KAAKoC,YAAY4O,GAAU9S,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAC9DiI,GAAMF,EACNK,IAEJF,GAAMF,EACNC,EAAKH,EACLM,GAAsB,IAAXT,GAIZ3Q,YAAYC,EAAWC,EAAW0E,EAAkBsV,GAIvD,IAAIpE,EAA2BpV,KAAK2L,IAAIpM,EAAG,GAAKS,KAAK2L,IAAInM,EAAG,GAAKE,KAAK+O,MAClEkC,EAAuB3Q,KAAK2L,IAAI,EAAG,EAAIpM,GAAKS,KAAK2L,IAAI,EAAG,EAAInM,GAAK0E,EAAQuK,MAE7E,MAAMA,EAAgBzO,KAAK0L,IAAIxH,EAAQuK,MANlB,IAMwClP,GAAKS,KAAK2L,IAAI,EAAG,EAAIpM,GAC5EmP,EAAiB1O,KAAK0L,IAAIxH,EAAQwK,OANlB,IAM0ClP,GAAKQ,KAAK2L,IAAI,EAAG,EAAInM,GAE/Esc,EAAmB5X,EAAQuK,MAAQA,EACnCsN,EAAuBrc,KAAK+O,MAAQA,EAEpCuN,EAAM,EAAI,IAAMxC,EAEtB,IAAK,IAAIha,EAAI,EAAGA,EAAIkP,EAAQlP,IAAK,CAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIkP,EAAOlP,IAAK,CAC5B,IAAImJ,GAASxE,EAAQA,QAAQyM,IAAiB,GAAK,KAAQqL,EACvDpL,EAAe,EAAIlI,EAEnB9K,GAAK8B,KAAKoC,YAAYsT,IAAqB,EAAI,KAAQxE,GAAgB1M,EAAQA,QAAQyM,IAAiB,EAAI,KAAQjI,EACpHqI,GAAKrR,KAAKoC,YAAYsT,IAAqB,EAAI,KAAQxE,GAAgB1M,EAAQA,QAAQyM,IAAiB,EAAI,KAAQjI,EACpHJ,GAAK5I,KAAKoC,YAAYsT,IAAqB,GAAK,KAAQxE,GAAgB1M,EAAQA,QAAQyM,IAAiB,GAAK,KAAQjI,EAE1HhJ,KAAKoC,YAAYsT,GAAoBxX,EAAKmT,GAAK,EAAMzI,GAAK,GAAO,KAAO,GAExE8M,IACAzE,IAGJA,GAAgBmL,EAChB1G,GAAoB2G,GAIrBzc,uBAAuBC,EAAWC,EAAW0E,GAChD,IAAIkR,EAA2B7V,EAAIC,EAAIE,KAAK+O,MACxCkC,EAAuB,EAEvBoL,EAAuBrc,KAAK+O,MAAQvK,EAAQuK,MAEhD,IAAK,IAAIjP,EAAI,EAAGA,EAAI0E,EAAQwK,OAAQlP,IAAK,CACrC,IAAK,IAAID,EAAI,EAAGA,EAAI2E,EAAQuK,MAAOlP,IAAK,CACpC,IAAI6L,EAAQlH,EAAQA,QAAQyM,GAEhB,WAARvF,IACA1L,KAAKoC,YAAYsT,GAAoBhK,GAGzCgK,IACAzE,IAGJyE,GAAoB2G,GAOrBzc,OAAOwF,GAEV,IAAIiE,GACA,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGjCD,GACA,IAAIrH,EAAAxC,SAAS,EAAK,GAAM,GAAM,IAAIwC,EAAAxC,UAAU,EAAK,GAAM,GACvD,IAAIwC,EAAAxC,UAAU,EAAK,EAAK,GAAM,IAAIwC,EAAAxC,SAAS,EAAK,EAAK,GACrD,IAAIwC,EAAAxC,SAAS,GAAM,EAAK,GAAM,IAAIwC,EAAAxC,UAAU,GAAM,EAAK,GACvD,IAAIwC,EAAAxC,UAAU,GAAM,GAAM,GAAM,IAAIwC,EAAAxC,SAAS,GAAM,GAAM,IAKzD4H,EAAmBpF,EAAAtC,SAAS2H,qBAFpB,UAE8DF,eAAenF,EAAAtC,SAAS4H,yBAAuC,IAAdjC,IAC3H+B,EAAmBA,EAAiBD,eAAenF,EAAAtC,SAAS8H,yBAAuC,IAAdnC,IAErF,IAAImX,EAA2B,IAAI1U,MACnCuB,EAAOf,QAAQC,IACX,IAAIC,EAAcpB,EAAiBsB,SAASH,GAExCzI,EAAI0I,EAAY1I,EAChBC,EAAIyI,EAAYzI,EAChBC,EAAIwI,EAAYxI,EAAI,EAAmC,EAA/BO,KAAK2H,IAAkB,IAAd7C,GAErCmX,EAAQpU,KAAK,IAAIpG,EAAAxC,SAASM,EAAGC,EAAGC,MAGpC,IAAK,IAAI3C,EAAI,EAAGA,EAAIiM,EAAM5I,OAAQrD,GAAK,EAAG,CACtC,IAAIsO,GAAQ,SACZ1L,KAAKwc,kBAAkBD,EAAQlT,EAAMjM,IAAKmf,EAAQlT,EAAMjM,EAAI,IAAKsO,IAIlE9L,QAAQwX,GACX,OAAO,IAAIrV,EAAAxC,SAASe,KAAKe,MAAM,IAAa,IAAM+V,EAAGvX,GAAMuX,EAAGrX,GAC1DO,KAAKe,MAAM,IAAoB,IAAP+V,EAAGtX,GAAYsX,EAAGrX,GAC1CqX,EAAGrX,GAIJH,kBAAkBwX,EAAcC,EAAc3L,GAGjD,GAAI0L,EAAGrX,GAFc,KAEMsX,EAAGtX,GAFT,IAGjBC,KAAKwY,aAAaiE,2BAA2Bzc,KAAKwI,QAAQ4O,GAAKpX,KAAKwI,QAAQ6O,GAAK3L,OAC9E,IAAI0L,EAAGrX,GAJO,KAIasX,EAAGtX,GAJhB,IAKjB,OACG,GAAIqX,EAAGrX,GANO,IAMW,CAC5B,IAAIgL,IAPa,IAOWqM,EAAGrX,IAAMsX,EAAGtX,EAAIqX,EAAGrX,GAC3CuX,EAAK,IAAIvV,EAAAxC,SAASwL,GAASsM,EAAGxX,EAAIuX,EAAGvX,GAAKuX,EAAGvX,EAAGkL,GAASsM,EAAGvX,EAAIsX,EAAGtX,GAAKsX,EAAGtX,GAR9D,KASjBE,KAAKwY,aAAaiE,2BAA2Bzc,KAAKwI,QAAQ4O,GAAKpX,KAAKwI,QAAQ8O,GAAK5L,QAC9E,GAAI2L,EAAGtX,GAVO,IAUW,CAC5B,IAAIgL,IAXa,IAWWsM,EAAGtX,IAAMqX,EAAGrX,EAAIsX,EAAGtX,GAC3CuX,EAAK,IAAIvV,EAAAxC,SAASwL,GAASqM,EAAGvX,EAAIwX,EAAGxX,GAAKwX,EAAGxX,EAAGkL,GAASqM,EAAGtX,EAAIuX,EAAGvX,GAAKuX,EAAGvX,GAZ9D,KAajBE,KAAKwY,aAAaiE,2BAA2Bzc,KAAKwI,QAAQ6O,GAAKrX,KAAKwI,QAAQ8O,GAAK5L,KAIlF9L,mBACHI,KAAK6V,QAAQgE,MAAM,EAAI,KAGnBja,gBAAgB8c,EAAeC,GAMnC,OAJU,IAAI5a,EAAA1C,SAASiB,KAAK4H,IAAIwU,GAASpc,KAAK4H,IAAIyU,GAC9Crc,KAAK4H,IAAIwU,GAASpc,KAAK2H,IAAI0U,GAC3Brc,KAAK2H,IAAIyU,GAAQ,GAKlB9c,UACH,IAAIoP,EAAS7N,EAAYC,UAAUtB,EAAIqB,EAAYW,UAAUhC,EAAI,EAC7DiP,EAAQ5N,EAAYC,UAAUvB,EAAIsB,EAAYW,UAAUjC,EAAI,EAC5DwJ,EAAkC,IAA1BlI,EAAYW,UAAUhC,EAAUqB,EAAYW,UAAUjC,EAClE,IAAK,IAAIzC,EAAI,EAAGA,EAAI4R,EAAQ5R,IACxB4C,KAAKoC,YAAYyX,MAAK,SAAqCxQ,EAAOA,EAAQ0F,GAC1E1F,GAAS,IAIVzJ,SAASgd,EAAYC,EAAY9N,EAAeC,EAAgBtD,GAEnE,IAAIrC,EAAa,IAALwT,EAAWD,EACvB,IAAK,IAAIxf,EAAI,EAAGA,EAAI4R,EAAQ5R,IACxB4C,KAAKoC,YAAYyX,KAAKnO,EAAOrC,EAAOA,EAAQ0F,GAC5C1F,GAAS,IAwIVzJ,mBAAmBkd,EAAgB3P,EAAkBzB,GACxD,IAAItC,KAMJ,IAAK,IAAIhM,EAAI,EAAGA,GAJF,EAIcA,IACxB,IAAK,IAAIc,EAAI,EAAGA,EAJL,EAIiBA,IAAK,CAE7B,IAAI8J,EAAMhI,KAAK+c,iBAAiB3f,EAAIkD,KAAKyH,GAPnC,EAOgDzH,KAAKyH,GAAK,EAAQ,GAAJ7J,EAAQoC,KAAKyH,GAN1E,GAMuFrH,IAAIoc,EAAOE,YAAc,KAAMlX,IAAIgX,EAAOG,aACxIjV,EAAIwG,EAAI,EAERpF,EAAOjB,KAAKH,GAIpB,IAAIqB,KAEJ,IAAK,IAAIvB,EAAI,EAAGA,EAhBF,EAgBaA,IACvB,IAAK,IAAI1K,EAAI,EAAGA,EAhBL,EAgBiBA,IACxBiM,EAAMlB,KAjBC,EAiBeL,GAAM,EAAI1K,GAjBzB,GAkBPiM,EAAMlB,KAlBC,EAkBeL,GAAM,EAAI1K,GAlBzB,GAmBPiM,EAAMlB,KAnBC,EAmBeL,EAnBf,GAmB8B,EAAI1K,GAnBlC,GAqBPiM,EAAMlB,KArBC,EAqBeL,EArBf,GAqB8B,EAAI1K,GArBlC,GAsBPiM,EAAMlB,KAtBC,EAsBeL,EAtBf,GAsB8B,EAAI1K,GAtBlC,GAuBPiM,EAAMlB,KAvBC,EAuBeL,GAAM,EAAI1K,GAvBzB,GA2Bf,IAAI+J,EAAmBgG,EAEnBoP,EAA2B,IAAI1U,MAEnC,IAAK,IAAI3I,EAAI,EAAGA,EAAIkK,EAAO3I,OAAQvB,IAAK,CACpC,IAAIqJ,EAAcpB,EAAiB+L,YAAY9J,EAAOlK,IACtDqd,EAAQpU,KAAK,IAAIpG,EAAAxC,SAASgJ,EAAY1I,EAAG0I,EAAYzI,EAAGyI,EAAYxI,IAGxE,IAAK,IAAI3C,EAAI,EAAGA,EAAIiM,EAAM5I,OAAQrD,GAAK,EAAG,CAEtC,IAAIsF,EAAK6Z,EAAQlT,EAAMjM,IACnBuF,EAAK4Z,EAAQlT,EAAMjM,EAAI,IACvBwF,EAAK2Z,EAAQlT,EAAMjM,EAAI,IAE3B4C,KAAKwc,kBAAkB9Z,EAAIC,EAAI+I,GAC/B1L,KAAKwc,kBAAkB9Z,EAAIE,EAAI8I,GAC/B1L,KAAKwc,kBAAkB5Z,EAAID,EAAI+I,IAKhC9L,gBAAgBsd,EAAWC,GAAgB,EAAMC,GAAgB,GACpE,IAAI9L,KA+CJ,OA7CA4L,EAAK7U,QAAQvJ,IACT,IAGIue,EAHAjU,EAA0B,IAAIvB,MAC9ByB,EAA2B,IAAIzB,MAC2B,IAAIA,MAG9D/I,EAAOwe,KACPD,KACAve,EAAOwe,GAAGjV,QAASzG,IACf,IAAI0b,EAAK,IAAI1c,EAAAa,kBACb6b,EAAG5b,EAAIE,EAAEF,EACT4b,EAAG1b,EAAI,EAAMA,EAAEA,EACfyb,EAAOlV,KAAKmV,MAIpBxe,EAAOgO,SAASzE,QAASzG,IAEjBub,EACA/T,EAAOjB,KAAK,IAAIpG,EAAA1C,SAASuC,EAAE/B,EAAG+B,EAAE9B,EAAG8B,EAAE7B,GAAGW,IAAI,GAAGoF,IAAI,IAAI/D,EAAA1C,SAAS,GAAI,IAAK,EAAG,KAE5E+J,EAAOjB,KAAK,IAAIpG,EAAA1C,SAASuC,EAAE/B,EAAG+B,EAAE9B,EAAG8B,EAAE7B,GAAGW,IAAI,MAGpD5B,EAAOwK,QAAQjB,QAASzG,IACpB0H,EAAQnB,KAAK,IAAIpG,EAAA1C,SAASuC,EAAE/B,EAAG+B,EAAE9B,EAAG8B,EAAE7B,MAG1C,IAAI+c,GAAS,IAAI/E,EAAAlL,4BAA6B0Q,sBAAsBnU,GACpE0T,EAAOG,YAAYzO,EAAI,EAGvB,IAAIgP,GACApU,OAAQA,EACRE,QAASA,EACTgU,GAAID,EACJ5T,MAAO3K,EAAO2K,MACd8S,QAASnT,EAAOQ,IAAI,IAAM,IAAI7H,EAAA1C,SAAS,EAAG,EAAG,EAAG,IAChDoe,SAAUnU,EAAQM,IAAI,IAAM,IAAI7H,EAAA1C,SAAS,EAAG,EAAG,EAAG,IAClDqe,eAAgBZ,EAChBnf,KAAMmB,EAAOnB,MAEjB2T,EAAMnJ,KAAKqV,KAGRlM,EAGX1R,+BAA+BwF,EAAqBZ,GAEhD,IAAIpH,EAAI,EACR,IAAK,IAAI0C,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAI8b,EAAS9b,EAAI,IACb+b,EAAS9b,EAAI,IACb+b,EAAO,KAAYvb,KAAK2L,IAAI,EAAK3L,KAAKC,KAAKob,EAAQA,EAAQC,EAAQA,IACnE+B,EAAQ9B,EAAqB,KAAdzW,EACfsN,EAAqD,IAA5CpS,KAAKwb,MAAMH,EAAOC,GAAStb,KAAKyH,GAAK,GAA0B,MAAd3C,EAE1D2W,EAASvX,EAAQA,SAAiB,GAARmZ,GAAiC,IAAR,GAARjL,IAE3CzS,EAAQ,EAAID,KAAK4d,kBAAkB,EAAK,EAAK/B,GAI7CgC,GAHM9B,GAAU,EAAK,KAAQ9b,GACvB8b,GAAU,EAAK,KAAQ9b,GAEZ,GADX8b,GAAU,GAAM,KAAQ9b,GACJ,GAE9BD,KAAKoC,YAAYhF,KAAOygB,GAYpCje,6BAA6BwF,EAAqBZ,EAAkBiV,GAChE,IAAIrc,EAAI,EACR,IAAK,IAAI0C,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAII,EAAQ,IACR0b,EAAS9b,EAAI,IAA4C,GAAjCS,KAAK2H,IAAkB,KAAd7C,GAA6BnF,EAC9D2b,EAAS9b,EAAI,IAA4C,GAAjCQ,KAAK4H,IAAkB,KAAd9C,GAA6BnF,EAC9D6d,EAAUje,EAAI,IAAsD,GAA3CS,KAAK2H,IAAkB,KAAd7C,EAAuB9E,KAAKyH,IAAW9H,EACzE8d,EAAUje,EAAI,IAAsD,GAA3CQ,KAAK4H,IAAkB,KAAd9C,EAAuB9E,KAAKyH,IAAW9H,EACzE4b,EAAO,KAAWvb,KAAK2L,IAAI,EAAK3L,KAAKC,KAAKob,EAAQA,EAAQC,EAAQA,IACtEC,GAAiD,EAAzCvb,KAAK2H,IAA+B,EAA3B3H,KAAKwb,MAAMH,EAAOC,IACnC,IAAI+B,EAAQ,KAAWrd,KAAK2L,IAAI,EAAK3L,KAAKC,KAAKud,EAASA,EAASC,EAASA,IAEtEC,EAAYnC,GADhB8B,GAAoD,EAA3Crd,KAAK2H,IAAiC,EAA7B3H,KAAKwb,MAAMgC,EAAQC,KACQ,KAAd3Y,EAE3BsN,EAAqD,OAA5CpS,KAAKwb,MAAMH,EAAOC,GAAStb,KAAKyH,GAAK,GAA6B,MAAd3C,EACjEsN,GAAwD,OAA9CpS,KAAKwb,MAAMgC,EAAQC,GAAUzd,KAAKyH,GAAK,GAA6B,MAAd3C,EAGhE,IAAI2W,EAASvX,EAAQA,SAAqB,IAAZwZ,GAAqC,KAAR,IAARtL,IAC/CuL,EAAS3d,KAAK0L,IAAI,IAAa,EAAP6P,GAAW,GAAOvb,KAAK0L,IAAI,IAAc,EAAR2R,GAAY,GACrEzf,GAAc,IAAT6d,GAAiBkC,EACtB5M,GAAK0K,GAAU,EAAI,KAAQkC,EAC3BrV,GAAKmT,GAAU,GAAK,KAAQkC,EAEhCje,KAAKoC,YAAYhF,KAAOc,EAAImT,GAAK,EAAIzI,GAAK,GAAK,KAAO,IAKlEhJ,cAAcwF,EAAqBZ,GAC/B,IAAK,IAAI1E,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIqe,EAAW,KAAsF,IAA/E5d,KAAKC,MAAMV,EAAI,KAAaA,EAAI,KAAaC,EAAI,OAAaA,EAAI,QAQpFqe,GAAwB,IAH2C,IAAhD7d,KAAK2H,IAAIiW,EAAyB,KAAd9Y,GAAuB,IAAY,EAAI9E,KAAK0L,IAAe,KAAXkS,EAAkB,KAG3E,GAAK,GACvCle,KAAKoe,uBAA2B,EAAJve,EAAW,EAAJC,EAAO,EAAG,EAAIqe,EAAW,EAAG,EAAG3Z,IAM9E5E,kBAAkBwF,EAAqBZ,EAAkB6Z,GAAmB,GACnEA,GAASre,KAAKse,kBAAiB,UACpCte,KAAKsF,mBAEL,IAAI8D,EAA0B,IAAIvB,MAGlC,IAAK,IAAIzK,EAAI,EAAGA,EAFJ,GAEaA,IACrB,IAAK,IAAI0K,EAAI,EAAGA,EAHR,GAGiBA,IAAK,CAE1B,IAAIjI,EAJE,GAIGiI,EAAIyW,IACTze,EAAI,GAAKQ,KAAK2H,IAAQ,IAAJH,EAAW,EAAkB,KAAd1C,GAAwB9E,KAAK4H,IAAQ,IAAJ9K,EAAW,EAAkB,KAAdgI,IACjFrF,EANE,GAMG3C,EAAImhB,IAEbnV,EAAOjB,KAAK,IAAIpG,EAAAxC,SAASM,EAAGC,EAAGC,IAKvC,IAAIoH,EAAmBpF,EAAApC,SAAS2H,2BAA2B,GAAI,GAAM,IAAIJ,eAErEnF,EAAApC,SAAS4H,yBAAmC,GAAVjH,KAAKyH,IAAUb,eAC7CnF,EAAApC,SAAS0H,yBAAuC,KAAdjC,KAGtCmX,EAA2B,IAAI1U,MAAgBuB,EAAO3I,QAC1D2I,EAAOf,QAAQC,IAGX,IAAIC,EAAcvI,KAAKwI,QAAQrB,EAAiBsB,SAASH,IAEzDiU,EAAQpU,KAAKI,KAGjBgU,EAAQ7T,KAAK,SAAUC,EAAGC,GACtB,OAAOD,EAAE5I,EAAI6I,EAAE7I,IAGnBwc,EAAQlU,QAAQC,IACZ,IAAIO,GAAS,IAAM,IAAOP,EAAS,EACnCtI,KAAK8I,aACDxI,KAAKe,MAAMiH,EAAQzI,EAAIgJ,EAAO,GAC9BvI,KAAKe,MAAMiH,EAAQxI,EAAI+I,EAAO,GAC9BvI,KAAKe,MAAMwH,GAAOvI,KAAKe,MAAMwH,GAAOrE,EAAS,EAAI8D,EAAQvI,EAAGC,KAAK+I,aAAa,IAAK,GAAIT,EAAQvI,MAIpGH,iBAAiBwC,GACpB,MAAMsJ,EAAgB5B,EAAAqC,MAAMqS,MAAMpS,iBAIlChK,EAAYqc,eACR,IAAI1c,EAAAxC,SAASwP,GAAWC,GAAY,GACpC,IAAIjN,EAAAxC,SAASwP,IAAmBC,IAAa,KAC7CtD,GAGJtJ,EAAYqc,eACR,IAAI1c,EAAAxC,SAASwP,GAAWC,GAAY,GACpC,IAAIjN,EAAAxC,SAASwP,GAAWC,KAAsB,KAC9CtD,GAGJtJ,EAAYqc,eACR,IAAI1c,EAAAxC,SAASwP,IAAmBC,GAAY,GAC5C,IAAIjN,EAAAxC,SAASwP,IAAmBC,KAAsB,KACtDtD,GAGJtJ,EAAYqc,eACR,IAAI1c,EAAAxC,SAASwP,GAAWC,IAAqB,GAC7C,IAAIjN,EAAAxC,SAASwP,IAAmBC,KAAsB,KACtDtD,GAKD9L,kBAAkBwF,EAAqBJ,EAAmBR,EAA2Dka,GAExH1e,KAAKsF,mBAEL,IAAIqZ,EACA5c,EAAApC,SAAS2H,2BAA2B,EAAG,EAAwD,GAAb,GAAjChH,KAAK2H,IAAkB,KAAd7C,GAA8B,IAA7C,IAAuD8B,eAC9FnF,EAAApC,SAAS4H,yBAAyE,IAAb,GAAlCjH,KAAK2H,IAAkB,MAAd7C,GAA+B,IAAa,IAAK8B,eACzFnF,EAAApC,SAAS0H,yBAAwC,MAAdjC,GAAsB8B,eAErDnF,EAAApC,SAAS2H,2BAA2B,GAAI,GAAI,MAIxDsX,EAAeD,EAAOzX,eAAenF,EAAApC,SAASyH,qBAAqB,EAAG,EAAG,IAE7E,IAAK,IAAIU,EAAI,EAAGA,EAAI9H,KAAK6e,YAAYpe,OAAQqH,IAAK,CAC9C,IAAIgX,EAAQ9e,KAAK6e,YAAY/W,GACnB,IAANA,GAAiB,IAANA,GACX9H,KAAKyH,kBAAkBC,KAAKoX,EAAOF,EAAI,IAAK,IAAK,KAE3C,IAAN9W,GACA9H,KAAKyH,kBAAkBC,KAAKoX,EAAOF,EAAI,IAAK,IAAK,KAC3C,IAAN9W,GACA9H,KAAKyH,kBAAkBC,KAAKoX,EAAOF,EAAI,IAAK,IAAK,KAIzDA,EAAKD,EAAOzX,eACRnF,EAAApC,SAAS2H,2BAA2B,EAAG,MAAO,GAAGJ,eAAenF,EAAApC,SAASyH,qBAAqB,EAAG,EAAG,GAAGF,eACnGnF,EAAApC,SAAS4H,yBACK,EAAVjH,KAAKyH,GAAS/H,KAAK4d,kBAAkB,EAAG,KAAMtd,KAAK6Z,MAAoB,GAAd/U,GAAqB,SAG1F,IAAI2Z,EAAS/e,KAAKgf,YAAY,GAC9Bhf,KAAKyH,kBAAkBC,KAAKqX,EAAQH,EAAI,IAAK,IAAK,KAGlDA,EAAKD,EAAOzX,eACRnF,EAAApC,SAAS2H,2BAA2B,EAAG,GAAI,GAAGJ,eAC1CnF,EAAApC,SAASyH,qBAHK,SAStB,IAAI6X,EAAuBjf,KAAKwI,QAAQmW,EAAOlW,SAAS,IAAI1G,EAAAxC,SAAS,GAAI,IAAK,MAE9ES,KAAKkf,cAAcD,EAAoC,IAAd7Z,EAAoBZ,EAASka,GAGnE9e,kBAAkBwF,EAAqBJ,EAAmBR,EAA2Dka,GAExH1e,KAAKsF,mBAEL,IAAIqZ,EACA5c,EAAApC,SAAS2H,2BAA2B,EAAG,EAAyD,GAAb,GAAlChH,KAAK2H,IAAkB,KAAd7C,GAA+B,IAA9C,IAAwD8B,eAC/FnF,EAAApC,SAAS4H,yBAAyE,IAAb,GAAlCjH,KAAK2H,IAAkB,MAAd7C,GAA+B,IAAa,IAAK8B,eACzFnF,EAAApC,SAAS0H,yBAAwC,MAAdjC,GAAsB8B,eAErDnF,EAAApC,SAAS2H,2BAA2B,EAAG,IAAK,MAIxDsX,EAAeD,EAAOzX,eAAenF,EAAApC,SAASyH,qBAAqB,GAAI,GAAI,KAE3E/G,EAAuC,GAAhCC,KAAK2H,IAAkB,KAAd7C,GAA6B,GACjD,IAAK,IAAI0C,EAAI,EAAGA,EAAI9H,KAAKmf,YAAY1e,OAAQqH,IAAK,CAC9C,IAAIgX,EAAQ9e,KAAKmf,YAAYrX,GAC7B9H,KAAKyH,kBAAkBC,KAAKoX,EAAOF,EAAI,IAAMve,EAAM,IAAMA,EAAM,IAAMA,GAGzEue,EAAKD,EAAOzX,eACRnF,EAAApC,SAAS2H,2BAA2B,GAAI,IAAK,GAAGJ,eAC5CnF,EAAApC,SAASyH,qBAAqB,IAAK,IAAK,KAAKF,eACzCnF,EAAApC,SAAS4H,yBAAmC,GAAVjH,KAAKyH,OAInD,IAAI+W,EAAQ9e,KAAKof,YAAY,GAC7Bpf,KAAKyH,kBAAkBC,KAAKoX,EAAOF,EAAI,IAAK,IAAK,KAEjD,IAAIxV,EAA0B,IAAIvB,MAIlC,IAAK,IAAIzK,EAAI,EAAGA,EAHJ,GAGaA,IAErB,IAAK,IAAI0K,EAAI,EAAGA,EAJP,EAIiBA,IAAK,CAC3B,IAAIhI,GAAM1C,EAAkB,KAAdgI,GAAuB,GAAM,IAAM,GAC7Cia,GAAU,EAAI,EAAIrf,KAAK+I,aAAa,GAAI,GAAIjJ,KAEgC,IAAb,GAA7DQ,KAAK2H,IAAkB,MAAd7C,EAAiC,EAAV9E,KAAKyH,GATvC,GASsD3K,EAAI,GAAW,IAAa,IAClFyC,EAAIwf,EAAS/e,KAAK2H,IAAc,EAAV3H,KAAKyH,GAT1B,EAS0CD,EAAkB,KAAd1C,GAE/CrF,EAAIsf,EAAS/e,KAAK4H,IAAc,EAAV5H,KAAKyH,GAX1B,EAW0CD,EAAkB,KAAd1C,GAEnDgE,EAAOjB,KAAK,IAAIpG,EAAAxC,SAASM,EAAGC,EAAGC,IAKvC,IAAIoH,EAAmBwX,EAAOzX,eAAenF,EAAApC,SAAS2H,2BAA2B,GAAI,EAAK,IAEtFiV,EAA2B,IAAI1U,MAAgBuB,EAAO3I,QAC1D2I,EAAOf,QAAQC,IAGX,IAAIC,EAAcvI,KAAKwI,QAAQrB,EAAiBsB,SAASH,IAEzDiU,EAAQpU,KAAKI,KAGjBgU,EAAQ7T,KAAK,SAAUC,EAAGC,GACtB,OAAOD,EAAE5I,EAAI6I,EAAE7I,IAGnBwc,EAAQlU,QAAQC,IACZ,IAAIO,GAAS,IAAM,IAAOP,EAAS,EACnCtI,KAAKsf,iBACDhf,KAAKe,MAAMiH,EAAQzI,EAAIgJ,EAAO,GAC9BvI,KAAKe,MAAMiH,EAAQxI,EAAI+I,EAAO,GAC9BvI,KAAKe,MAAMwH,GAAOvI,KAAKe,MAAMwH,GAAO7D,EAAU,EAAIsD,EAAQvI,EAAG,MAIlEH,qBAAqBwF,EAAqBZ,GAK7C,MAAM+a,EAAY/a,EAAQuK,MACpByQ,EAAahb,EAAQwK,OAE3B,IAAI0G,EAAmB,EAEvB,IAAK,IAAI5V,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIgR,EAAc,EAAOhR,EAAI,IAAlB,EAEX,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAE1B,IAAIgR,EAAc,EAAOhR,EAAI,IAAlB,EAMP6B,GAJIpB,KAAKC,KAAKsQ,EAAKA,EAAKC,EAAKA,GACzBxQ,KAAKwb,MAAMhL,EAAID,GAGbA,EAAKvQ,KAAKmf,IAAI3O,GAAOyO,EAAY,IAAQ,GAC/C3d,EAAK,EAAMtB,KAAKmf,IAAI3O,GAAM0O,EAAa,IAAqB,KAAdpa,EAAuB,EAErEnF,EAAQ,EAAIK,KAAK2L,IAAI3L,KAAK0L,IAAI,EAAI1L,KAAKmf,IAAI3O,GAAM,GAAK,GAAI,GAC1DpF,EAAQlH,EAAQA,SAAa,IAAJ9C,IAAiB,IAAJE,GAAY2d,GAItD7T,EAAS,KAAO,IADNA,GAAS,GAAM,KAAQzL,GACL,IAFlByL,GAAS,EAAK,KAAQzL,GAEQ,GAH9ByL,GAAS,EAAK,KAAQzL,GAGmB,EAEnDD,KAAKoC,YAAYsT,KAAsBhK,IAW5C9L,OAAOwF,EAAqBZ,GAC/B,IAAI4E,EAA0B,IAAIvB,MAElC,IAAK,IAAIzK,EAAI,EAAGA,EAAI,IAAKA,IACrBgM,EAAOjB,KAAK,IAAIpG,EAAAxC,SAA8B,EAArBe,KAAK2H,IAAQ,IAAJ7K,GAAmB,GAAJA,EAAU,GAAyB,EAArBkD,KAAK4H,IAAQ,IAAJ9K,KAG5EgM,EAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IAE/B,IAAImgB,EAAS3d,EAAAtC,SAAS4H,yBAAuC,KAAdjC,GAC/Csa,EAASA,EAAOxY,eAAenF,EAAAtC,SAAS8H,yBAAuC,KAAdnC,IAEjE,IAAImX,EAA2B,IAAI1U,MAAgBuB,EAAO3I,QAC1D2I,EAAOf,QAAQC,IACX,IAEIC,EAAcmX,EAAOjX,SAASH,GAE9BzI,EAAI0I,EAAY1I,EAChBC,EAAIyI,EAAYzI,EAChBC,EAAIwI,EAAYxI,EAAI,GACpB8Q,EAAK,IAAWhR,GAAS,MAAJE,GACrB+Q,EAAK,IAAWhR,GAAS,MAAJC,GACzBwc,EAAQpU,KAAK,IAAIpG,EAAAxC,SAASsR,EAAIC,EAAI/Q,MAGtCwc,EAAQ7T,KAAK,SAAUC,EAAGC,GACtB,OAAOD,EAAE5I,EAAI6I,EAAE7I,IAGnBwc,EAAQlU,QAAQC,IACZ,IAAIO,GAAS,KAAmB,MAAZP,EAAQvI,GAAe,EAC3CC,KAAKsf,iBAAkBhX,EAAQzI,EAAIgJ,EAAO,EAAK,EAAIP,EAAQxI,EAAI+I,EAAO,EAAK,EAAGA,EAAMA,EAAMrE,EAAS,EAAI8D,EAAQvI,EAAG,KAInHH,kBAAkBwF,GACrBpF,KAAKsF,mBACL,IAEI6B,EAA6BpF,EAAApC,SAAS0H,yBAAuC,GAAdjC,GAAmB8B,eAAenF,EAAApC,SAASyH,qBAFlG,cAGZD,EAAmBpF,EAAApC,SAAS6H,yBAAwC,KAAdpC,GAAoB8B,eAAenF,EAAApC,SAAS2H,2BAA2B,EAAG,GAAI,IAC/HJ,eAAeC,IAEpBnH,KAAKyH,kBAAkBC,KAAK1H,KAAKuY,MAAM5Q,UAAWR,EAAkB,IAAK,GAAI,KAG1EvH,cAAcoJ,GACjB,OAAO,IAAIjH,EAAAxC,SAA2B,GAAlBe,KAAK2H,IAAIe,GAAa,EAAqB,GAAlB1I,KAAK4H,IAAIc,IAGlDpJ,eAAeoJ,GACnB,IACI9K,EAAI,IAAO,EAAIoC,KAAK2H,IADT,EACiBe,IAChC,OAAO,IAAIjH,EAAAxC,SAASrB,EAAIoC,KAAK4H,IAFrB,EAE6Bc,GACjC9K,EAAIoC,KAAK4H,IAHE,EAGMc,GACjB9K,EAAIoC,KAAK2H,IAJL,EAIae,IAGlBpJ,kBAAkBid,EAAY8C,EAAYC,GAC7C,IAAIC,EACJ,OAAID,GAAM/C,EAAW,EACjB+C,GAAMD,EAAW,GACrBE,GAAOD,EAAK/C,IAAO8C,EAAK9C,IAChB,EAAIvc,KAAK4H,IAAI2X,EAAMvf,KAAKyH,KAAO,GAiJpCnI,aAAawJ,EAAyBC,EAAsByW,GAE/D,IAAIvD,KACAkB,KACAzM,KAEAvT,EAAI,EACR,IAAK,IAAIL,EAAI,EAAGA,EAAIiM,EAAM5I,OAAQrD,GAAK,EAAG,CACtC,IAAIsF,EAAK0G,EAAOC,EAAMjM,IAClBuF,EAAKyG,EAAOC,EAAMjM,EAAI,IACtBwF,EAAKwG,EAAOC,EAAMjM,EAAI,IAEtB2iB,EAAMpd,EAAGgD,IAAIjD,GAAIhC,IAAI,IAAKoF,IAAIpD,GAAIkD,YAClCoa,EAAMpd,EAAG+C,IAAIhD,GAAIjC,IAAI,IAAKoF,IAAInD,GAAIiD,YAClCqa,EAAMvd,EAAGiD,IAAI/C,GAAIlC,IAAI,IAAKoF,IAAIlD,GAAIgD,YAEtC2W,EAAQpU,KAAKzF,GAAK6Z,EAAQpU,KAAK4X,GAAMxD,EAAQpU,KAAK8X,GAClDxC,EAAStV,KAAKzF,GAAK+a,EAAStV,KAAK4X,GAAMtC,EAAStV,KAAK8X,GACrDjP,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAEhD8e,EAAQpU,KAAK4X,GAAMxD,EAAQpU,KAAKxF,GAAK4Z,EAAQpU,KAAK6X,GAClDvC,EAAStV,KAAK4X,GAAMtC,EAAStV,KAAKxF,GAAK8a,EAAStV,KAAK6X,GACrDhP,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAEhD8e,EAAQpU,KAAK4X,GAAMxD,EAAQpU,KAAK6X,GAAMzD,EAAQpU,KAAK8X,GACnDxC,EAAStV,KAAK4X,GAAMtC,EAAStV,KAAK6X,GAAMvC,EAAStV,KAAK8X,GACtDjP,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAEhD8e,EAAQpU,KAAK8X,GAAM1D,EAAQpU,KAAK6X,GAAMzD,EAAQpU,KAAKvF,GACnD6a,EAAStV,KAAK8X,GAAMxC,EAAStV,KAAK6X,GAAMvC,EAAStV,KAAKvF,GACtDoO,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAAMuT,EAAO7I,KAAK1K,KAGpD,OAAIqiB,EAAQ,EACD9f,KAAKkgB,aAAa3D,EAASvL,IAAU8O,IAGxC1W,OAAQmT,EACRjT,QAASmU,EACTpU,MAAO2H,GAKZpR,eAEH,IAAIugB,GACA,IAAIpe,EAAAxC,SAAS,GAAM,EAAK,GACxB,IAAIwC,EAAAxC,SAAS,EAAK,EAAK,GACvB,IAAIwC,EAAAxC,SAAS,EAAK,EAAK,GACvB,IAAIwC,EAAAxC,UAAU,EAAK,EAAK,GACxB,IAAIwC,EAAAxC,SAAS,EAAK,GAAM,GACxB,IAAIwC,EAAAxC,SAAS,EAAK,EAAK,IAcvBmc,EAAI1b,KAAKkgB,aAAaC,GAVtB,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GAGiC,GAGvC/W,KACAmT,KACAjT,KACAmU,KAEApU,KAqBJ,OAnBAqS,EAAErS,MAAMhB,QAAQjL,IACZ,IAAI8B,EAAIwc,EAAEtS,OAAOhM,GAEb+N,EAAQ/B,EAAOgX,KAAKjV,GAASA,EAAMxF,IAAIzG,GAAGuB,SAAW,MAEzD,GAAI0K,EAAO,CACP,IAAIkV,EAAMjX,EAAOkX,QAAQnV,GACzB9B,EAAMlB,KAAKkY,QAEXhX,EAAMlB,KAAKiB,EAAOjB,KAAKjJ,GAAK,KAIpCkK,EAAOf,QAAQnJ,IACXoK,EAAQnB,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IAChCke,EAAStV,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IACjCgd,EAAQpU,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,OAIhC6J,SACAmT,UACAjT,UACAmU,WACApU,SAKDzJ,cAGH,IAAI8b,GACAtS,WAEJ,IAAK,IAAItJ,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAID,EAAI,EAAGA,EAAI,IAAKA,IACrB6b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAIM,EAAG,EAAIC,EAAG,IACzC4b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAIM,EAAG,EAAIC,EAAG,IACzC4b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAIM,EAAG,EAAIC,EAAG,IAEzC4b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAIM,EAAG,EAAIC,EAAG,IACzC4b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAIM,EAAG,EAAIC,EAAG,IACzC4b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS,EAAIM,EAAG,EAAIC,EAAG,IAIjD,IAAIsJ,KACAmT,KACAjT,KACAmU,KAEApU,KAqBJ,OAnBAqS,EAAEtS,OAAOf,QAAQjL,IACb,IAAI8B,EAAI9B,EAEJ+N,EAAQ/B,EAAOgX,KAAKjV,GAASA,EAAMxF,IAAIzG,GAAGuB,SAAW,MAEzD,GAAI0K,EAAO,CACP,IAAIkV,EAAMjX,EAAOkX,QAAQnV,GACzB9B,EAAMlB,KAAKkY,QAEXhX,EAAMlB,KAAKiB,EAAOjB,KAAKjJ,GAAK,KAIpCkK,EAAOf,QAAQnJ,IACXoK,EAAQnB,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IAChCke,EAAStV,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IACjCgd,EAAQpU,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,OAIhC6J,SACAmT,UACAjT,UACAmU,WACApU,SAIDzJ,iBACH,IAAI8b,GACAtS,WAKJ,IAAK,IAAItJ,EAAI,EAAGA,EADF,IACaA,IACvB,IAAK,IAAID,EAAI,EAAGA,EAHN,GAGiBA,IAAK,CAC5B,IAAIgR,EAAyC,GAApCvQ,KAAK2H,IAAI,EAAI3H,KAAKyH,GAJrB,GAIkClI,GACpC0gB,EAAgD,GAA1CjgB,KAAK2H,IAAI,EAAI3H,KAAKyH,GALtB,IAKoClI,EAAI,IAC1CiR,EAAyC,GAApCxQ,KAAK4H,IAAI,EAAI5H,KAAKyH,GANrB,GAMkClI,GACpC2gB,EAAgD,GAA1ClgB,KAAK4H,IAAI,EAAI5H,KAAKyH,GAPtB,IAOoClI,EAAI,IAE9C6b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASsR,EAAI,EAAI/Q,EAAGgR,IACtC4K,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASsR,EAAI,EAAI/Q,EAAGgR,IACtC4K,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASghB,EAAK,EAAIzgB,EAAG0gB,IAEvC9E,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASghB,EAAK,EAAIzgB,EAAG0gB,IACvC9E,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASsR,EAAI,EAAI/Q,EAAGgR,IACtC4K,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASghB,EAAK,EAAIzgB,EAAG0gB,IAI/C,IAAIpX,KACAmT,KACAjT,KACAmU,KACAjZ,KAEA6E,KAsBJ,OApBAqS,EAAEtS,OAAOf,QAAQjL,IACb,IAAI8B,EAAI9B,EAEJ+N,EAAQ/B,EAAOgX,KAAKjV,GAASA,EAAMxF,IAAIzG,GAAGuB,SAAW,MAEzD,GAAI0K,EAAO,CACP,IAAIkV,EAAMjX,EAAOkX,QAAQnV,GACzB9B,EAAMlB,KAAKkY,QAEXhX,EAAMlB,KAAKiB,EAAOjB,KAAKjJ,GAAK,KAIpCkK,EAAOf,QAAQnJ,IACXoK,EAAQnB,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IAChCke,EAAStV,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IACjCgd,EAAQpU,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IAChCiF,EAAQ2D,KAAK,IAAIvH,EAAAa,sBAIjB2H,SACAmT,UACAjT,UACAmU,WACApU,QACA7E,WAID5E,uBAAuB4E,GAC1B,IAAIsY,EAMA9c,KAAKygB,eACLC,EAA6B,IAAI7Y,MAYrC,OAXAiV,EAAO1T,OAAOf,QAAS8C,IACnB,IAAItL,EAAIsL,EAAMtL,EACVC,EAAIqL,EAAMrL,EACVC,EAAIoL,EAAMpL,EAEd,IAAI2B,EAAIpB,KAAK6Z,MAAiD,KAA1C,GAAM7Z,KAAKwb,MAAM/b,EAAGF,IAAM,EAAIS,KAAKyH,MACnDnG,EAAItB,KAAK6Z,MAAuC,KAAhC,GAAM7Z,KAAKqgB,KAAK7gB,GAAKQ,KAAKyH,KAC1CoV,EAAO,GAA2C,IAA/B3Y,EAAQA,QAAQ9C,EAAQ,IAAJE,IAAmB,IAA/C,IACf8e,EAAUvY,KAAKgD,EAAMzK,IAAIyc,MAE7BL,EAAO1T,OAASsX,EACT5D,EAGJld,gBAAgB4E,GACnB,IAAIkX,GACAtS,WAKJ,IAAK,IAAItJ,EAAI,EAAGA,EADF,IACaA,IACvB,IAAK,IAAID,EAAI,EAAGA,EAHN,GAGiBA,IAAK,CAC5B,IAAIma,EAAQna,EAJN,GAIkB,IAAO,IAC3B+gB,GAAU/gB,EAAI,GALZ,GAKyB,IAAO,IAClCghB,EAAY,GAAJ/gB,EALN,IAKwB,IAAO,IACjCghB,EAAmB,IAAThhB,EAAI,GANZ,IAM+B,IAAO,IAExCihB,EAAY,GAAiD,IAArCvc,EAAQA,QAAQwV,EAAc,IAAP6G,IAAsB,IAArD,GAChBG,EAAY,GAAkD,IAAtCxc,EAAQA,QAAQoc,EAAe,IAAPC,IAAsB,IAAtD,GAChBI,EAAY,GAAkD,IAAtCzc,EAAQA,QAAQwV,EAAe,IAAR8G,IAAuB,IAAtD,GAChBI,EAAY,GAAmD,IAAvC1c,EAAQA,QAAQoc,EAAgB,IAARE,IAAuB,IAAvD,GAEhBK,EAAyC,GAApC7gB,KAAK2H,IAAI,EAAI3H,KAAKyH,GAdrB,GAckClI,GACpCuhB,EAAyC,GAApC9gB,KAAK4H,IAAI,EAAI5H,KAAKyH,GAfrB,GAekClI,GAEpC+c,EAA+C,GAA1Ctc,KAAK2H,IAAI,EAAI3H,KAAKyH,GAjBrB,IAiBmClI,EAAI,IACzCwhB,EAA+C,GAA1C/gB,KAAK4H,IAAI,EAAI5H,KAAKyH,GAlBrB,IAkBmClI,EAAI,IAG7C6b,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS4hB,EAAKJ,EAAW,EAAIjhB,EAAGshB,EAAKL,IACvDrF,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS4hB,EAAKF,EAAW,EAAInhB,EAAGshB,EAAKH,IACvDvF,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASqd,EAAKoE,EAAW,EAAIlhB,EAAGuhB,EAAKL,IAEvDtF,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASqd,EAAKoE,EAAW,EAAIlhB,EAAGuhB,EAAKL,IACvDtF,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAAS4hB,EAAKF,EAAW,EAAInhB,EAAGshB,EAAKH,IACvDvF,EAAEtS,OAAOjB,KAAK,IAAIpG,EAAAxC,SAASqd,EAAKsE,EAAW,EAAIphB,EAAGuhB,EAAKH,IAI/D,IAAI9X,KACAmT,KACAjT,KACAmU,KAEApU,KAqBJ,OAnBAqS,EAAEtS,OAAOf,QAAQjL,IACb,IAAI8B,EAAI9B,EAEJ+N,EAAQ/B,EAAOgX,KAAKjV,GAASA,EAAMxF,IAAIzG,GAAGuB,SAAW,MAEzD,GAAI0K,EAAO,CACP,IAAIkV,EAAMjX,EAAOkX,QAAQnV,GACzB9B,EAAMlB,KAAKkY,QAEXhX,EAAMlB,KAAKiB,EAAOjB,KAAKjJ,GAAK,KAIpCkK,EAAOf,QAAQnJ,IACXoK,EAAQnB,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IAChCke,EAAStV,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,IACjCgd,EAAQpU,KAAK,IAAIpG,EAAAxC,SAAS,EAAG,EAAG,OAIhC6J,SACAmT,UACAjT,UACAmU,WACApU,SAg4BDzJ,WAAW2J,EAAkBjI,GAIhCA,EAAOK,kBAAkBD,EAAI,GAAMpB,KAAKqgB,KAAKpX,EAAO1J,GAAKS,KAAKyH,GAC9DzG,EAAOK,kBAAkBC,EAAI,GAAMtB,KAAKqgB,KAAKpX,EAAOzJ,GAAKQ,KAAKyH,GAG3DnI,YAAY2J,EAAkB2M,GACjCA,EAAIxU,EAAI,GAAMpB,KAAKqgB,KAAKpX,EAAO1J,GAAKS,KAAKyH,GACzCmO,EAAItU,EAAI,GAAMtB,KAAKqgB,KAAKpX,EAAOzJ,GAAKQ,KAAKyH,GAUtCnI,mBAAmBoL,GAEtB,IAAIH,EAASG,EAEb,IAAK,IAAIlD,EAAI,EAAGA,EAAI3G,EAAYwW,WAAWlX,OAAQqH,IAAK,CACpD,IAAI8P,EAAOzW,EAAYwW,WAAW7P,GAC9BmD,EAAQJ,EACZA,EAAS,IAAIhD,MACb,IAAIqD,EAAID,EAAMA,EAAMxK,OAAS,GAE7B,IAAK,IAAIrD,EAAI,EAAGA,EAAI6N,EAAMxK,OAAQrD,IAAK,CACnC,IAAI+N,EAAQF,EAAM7N,GACdwa,EAAK0J,UAAUnW,IACVyM,EAAK0J,UAAUpW,IAChBL,EAAO1C,KAAKyP,EAAK2J,qBAAqBrW,EAAGC,IAE7CN,EAAO1C,KAAKgD,IACLyM,EAAK0J,UAAUpW,IACtBL,EAAO1C,KAAKyP,EAAK2J,qBAAqBrW,EAAGC,IAE7CD,EAAIC,GAIZ,KAAIN,EAAOpK,OAAS,GAKpB,IAAK,IAAIrD,EAAI,EAAGA,EAAIyN,EAAOpK,OAAS,EAAGrD,IACnC4C,KAAKyY,2BAA2B+I,iBAAiB3W,EAAO,GAAIA,EAAO,EAAIzN,GAAIyN,EAAO,EAAIzN,IAQvFwC,cAAc6hB,EAAqBrc,EAAqBZ,EAA2Dka,GACtH,IAAI1W,EAAMyZ,EAENzZ,EAAIjI,EAAI,GACRiI,EAAInI,EAAI,GAAKmI,EAAInI,EAAI,KACrBmI,EAAIlI,EAAI,GAAKkI,EAAIlI,EAAI,KACrBE,KAAK6V,QAAQ7N,EAAInI,EAAa,IAARmI,EAAIlI,GAAa,EAAIkI,EAAIjI,EAC1CC,KAAK8Y,mBACN9Y,KAAK8Y,kBAAmB,EACxB9Y,KAAK+Y,eAAiB3T,GAGtBpF,KAAK8Y,mBACL9Y,KAAK8Y,kBAAmB,EACxB9Y,KAAKgZ,aAAe5T,GAI5B,IAAInF,EAAQD,KAAK+I,YAAY/I,KAAK+Y,eAAgB/Y,KAAK+Y,eAAiB,IAAK3T,GAChD,GAAzBpF,KAAK8Y,mBACL7Y,GAAU,EAAID,KAAK+I,YAAY/I,KAAKgZ,aAAchZ,KAAKgZ,aAAe,IAAK5T,IAE/E,IAAIsc,EAAM,IAAI3f,EAAAxC,SAAS,IAAS,IAAS,GAAGoG,IAAIqC,GAEhD,GAAI/H,EAAQ,EACR,IAAK,IAAI7C,EAAI,EAAGA,EAAIoH,EAAQ/D,OAAQrD,IAAK,CACrC,IAAIqX,EAAOzM,EAAIlC,IAAI4b,EAAIhhB,IAAI8D,EAAQpH,GAAG6C,QACtCD,KAAKkF,YAAY5E,KAAKe,MAAMoT,EAAK5U,GAAK2E,EAAQpH,GAAG8Y,IAAInH,MAAQ,EAAGzO,KAAKe,MAAMoT,EAAK3U,GAAK0E,EAAQpH,GAAG8Y,IAAIlH,OAAS,EAAGxK,EAAQpH,GAAG8Y,IAAK1R,EAAQpH,GAAG4L,MAAQ/I,GAI3JD,KAAK2hB,mBAAmB,EAAG,EAAG,EAAG,EAAG,IAAK,IAAKjD,EAAM,IAAO,IAAOze,GAQ/DL,YAAYwT,EAAiBC,EAAe3H,GAC/C,IAGIuD,EAAYC,EAAYzO,EAHxBmhB,EAAoBvO,EAAIxT,EAAIuT,EAAMvT,EAClCiV,EAAoBzB,EAAIvT,EAAIsT,EAAMtT,EAIlCQ,KAAKmf,IAAImC,GAAathB,KAAKmf,IAAI3K,IAC/B7F,EAAK3O,KAAKuhB,KAAKD,GACf1S,EAAK4F,EAAYxU,KAAKmf,IAAImC,GAC1BnhB,EAASH,KAAKmf,IAAImC,KAElB3S,EAAK2S,EAAYthB,KAAKmf,IAAI3K,GAC1B5F,EAAK5O,KAAKuhB,KAAK/M,GACfrU,EAASH,KAAKmf,IAAI3K,IAGtB,IAAIS,EAAoBnC,EAAMvT,EAC1B4V,EAAoBrC,EAAMtT,EAG1B8V,EAAS,EAAKxC,EAAO,EACrB0O,GAAU,EAAIzO,EAAItT,EAAI,EAAIqT,EAAMrT,GAAKU,EAEzC,IAAK,IAAIrD,EAAI,EAAGA,GAAKqD,EAAQrD,IACrBwY,EAAS5V,KAAK6V,QAAQvV,KAAKe,MAAMkU,GAAqC,IAAxBjV,KAAKe,MAAMoU,MACzDzV,KAAK6V,QAAQvV,KAAKe,MAAMkU,GAAqC,IAAxBjV,KAAKe,MAAMoU,IAAoBG,EACpE5V,KAAK+hB,UAAUzhB,KAAKe,MAAMkU,GAAYjV,KAAKe,MAAMoU,GAAY/J,IAEjE6J,GAAatG,EACbwG,GAAavG,EACb0G,GAAUkM,EAIXliB,eAAewT,EAAiBC,EAAe3H,GAClD,IAGIuD,EAAYC,EAAYzO,EAHxBmhB,EAAoBvO,EAAIxT,EAAIuT,EAAMvT,EAClCiV,EAAoBzB,EAAIvT,EAAIsT,EAAMtT,EAIlCQ,KAAKmf,IAAImC,GAAathB,KAAKmf,IAAI3K,IAC/B7F,EAAK3O,KAAKuhB,KAAKD,GACf1S,EAAK4F,EAAYxU,KAAKmf,IAAImC,GAC1BnhB,EAASH,KAAKmf,IAAImC,KAElB3S,EAAK2S,EAAYthB,KAAKmf,IAAI3K,GAC1B5F,EAAK5O,KAAKuhB,KAAK/M,GACfrU,EAASH,KAAKmf,IAAI3K,IAGtB,IAAIS,EAAoBnC,EAAMvT,EAC1B4V,EAAoBrC,EAAMtT,EAE9B,IAAK,IAAI1C,EAAI,EAAGA,GAAKqD,EAAQrD,IAEzB4C,KAAK+hB,UAAUzhB,KAAKe,MAAMkU,GAAYjV,KAAKe,MAAMoU,GAAY/J,GAE7D6J,GAAatG,EACbwG,GAAavG,EAKrBtP,oBAAoB4E,EAAkBI,GAClC5E,KAAKse,iBAAiB,KAAO,IAK7B,IAAI0D,EAAc,KAAPpd,EAOX,IAAK,IAAI/E,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIoiB,EAA6C,GAAtC3hB,KAAK4H,IAAW,KAAPtD,EAAoB,KAAJ/E,GAChCqiB,EAA6C,GAAtC5hB,KAAK2H,IAAW,KAAPrD,EAAoB,KAAJ/E,GAKhCsiB,EAAe,EAEfC,EAAOJ,EAnBE,IAcbC,EAAyD,GAAlD3hB,KAAK4H,IAAW,KAAPtD,EAA0B,EAAVtE,KAAKyH,GAAS,IAAMlI,IAMhDwiB,EAhBG,EAJM,IAebH,EAAyD,GAAlD5hB,KAAK2H,IAAW,KAAPrD,EAA0B,EAAVtE,KAAKyH,GAAS,IAAMlI,IAOpD,IAAK,IAAIgc,EAtBI,GAsBaA,EArBb,IAqB8BA,IAAQ,CAE/C,IAAI7M,EACgE,IAAR,IAAvDxK,EAAQA,SAAgB,IAAP4d,GAA+B,KAAR,IAAPC,KAClCC,EAAahiB,KAAKe,MApBhB,MAoBuB2N,EAlBzB,KAkBiD6M,EAnB9C,KAmB+D,GAClEnQ,GAA8B,IAArBpL,KAAKe,MAAM2N,GAAgB,IAAM,IAAM1O,KAAK0L,IAAI,EAAM,GAAK6P,EA3B/D,IA2BkF,IACvF0G,EAAY,KAAO,GAAc,GAAR7W,GAAgB,GAAK,GAAW,EAAa,GAARA,EAElE,GAAI4W,EAAaH,EAAc,CAC3B,IAAI9Y,EAAQxJ,EAA2B,KAAtB,IAAMsiB,GACnBlW,EAAM3L,KAAK0L,IAAIsW,EAAY,KAE/B,IAAK,IAAIllB,EAAI+kB,EAAc/kB,EAAI6O,EAAK7O,IAChC4C,KAAKoC,YAAYiH,GAASkZ,EAC1BlZ,GAAS,IAGb,GAAW,KAAP4C,EACA,MAGJkW,EAAeG,EAGnBF,GAAQH,EACRI,GAAQH,IAKpBtiB,oBAAoB4E,EAAkBI,GAClC5E,KAAKse,iBAAiB,KAAO,IAK7B,IAAI0D,EAAc,IAAPpd,EAOX,IAAK,IAAI/E,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIoiB,EACAC,EAKAC,EAAe,EAEfC,EAAOJ,EAnBE,IAcbC,EAAyD,KAAlD3hB,KAAK4H,IAAW,KAAPtD,EAA0B,EAAVtE,KAAKyH,GAAS,IAAMlI,IAMhDwiB,EAhBG,EAJM,IAebH,EAAyD,KAAlD5hB,KAAK2H,IAAW,KAAPrD,EAA0B,EAAVtE,KAAKyH,GAAS,IAAMlI,IAOpD,IAAK,IAAIgc,EAtBI,GAsBaA,EArBb,GAqB8BA,IAAQ,CAE/C,IAAI7M,GACwD,IAAvDxK,EAAQA,SAAgB,IAAP4d,GAA+B,KAAR,IAAPC,KAA8B/hB,KAAK2H,IAAI3H,KAAKmf,IAAwB,IAAnB5D,EAzB9E,IAyBuG,KAA0B,IACtIyG,EAAahiB,KAAKe,MApBhB,MAoBuB2N,EAlBzB,IAkBiD6M,EAnB9C,IAmB+D,GAClEnQ,GAA8B,IAArBpL,KAAKe,MAAM2N,GAAgB,IAAM,IAAM1O,KAAK0L,IAAI,EAAM,GAAK6P,EA3B/D,IA2BkF,IACvF0G,EAAY,KAAO,GAAc,GAAR7W,GAAgB,GAAK,GAAW,EAAa,GAARA,EAElE,GAAI4W,EAAaH,EAAc,CAC3B,IAAI9Y,EAAQxJ,EAA2B,KAAtB,IAAMsiB,GACnBlW,EAAM3L,KAAK0L,IAAIsW,EAAY,KAE/B,IAAK,IAAIllB,EAAI+kB,EAAc/kB,EAAI6O,EAAK7O,IAChC4C,KAAKoC,YAAYiH,GAASkZ,EAC1BlZ,GAAS,IAGb,GAAW,KAAP4C,EACA,MAGJkW,EAAeG,EAGnBF,GAAQH,EACRI,GAAQH,KArsGb/gB,EAAAmY,oBAAsB,EA+kCfnY,EAAAW,UAAsB,IAAIC,EAAAxC,SAAS,EAAG,EAAG,GACzC4B,EAAAC,UAAsB,IAAIW,EAAAxC,SAAS,IAAK,IAAK,GAy3D5C4B,EAAAwW,WAAa,IAAI9P,MAC5B,IAAI0P,EAAAzW,cACJ,IAAI0W,EAAA3V,aACJ,IAAI4V,EAAAxV,eACJ,IAAIyV,EAAA1V,aA/8FZ9E,EAAAiE,gGC9BA,MAAAY,EAAA/E,EAAA,GAEA4D,EAAA5D,EAAA,GACAgN,EAAAhN,EAAA,IAGAE,EAAA0b,yCAAgD5O,EAAA7H,0BAErCvC,KAAK8J,EAAoBvC,GAE5B,IAAK,IAAI/J,EAAY,EAAGA,EAAIsM,EAAKN,OAAO3I,OAAQrD,IAC5C+J,EAAiBsD,eAAef,EAAKN,OAAOhM,GAAIsM,EAAK6S,QAAQnf,IAGjE,MAAMolB,EAA6B,IAAI3a,MACnC,IAAIjH,EAAAW,OACJ,IAAIX,EAAAW,OACJ,IAAIX,EAAAW,QAGR,IAAK,IAAInE,EAAY,EAAGA,EAAIsM,EAAKD,MAAMhJ,OAAQrD,IAAK,CAChD,MAAMsF,EAAegH,EAAK6S,QAAQ7S,EAAKD,MAAMrM,GAAG0P,SAAS,IACnDnK,EAAe+G,EAAK6S,QAAQ7S,EAAKD,MAAMrM,GAAG0P,SAAS,IACnDlK,EAAe8G,EAAK6S,QAAQ7S,EAAKD,MAAMrM,GAAG0P,SAAS,IAEzD,GAAI9M,KAAK0K,qBAAqBhI,IAC1B1C,KAAK0K,qBAAqB/H,IAC1B3C,KAAK0K,qBAAqB9H,GAAK,CAE/B,MAAM3B,EAAejB,KAAKwI,QAAQ9F,GAC5BxB,EAAelB,KAAKwI,QAAQ7F,GAC5B6R,EAAexU,KAAKwI,QAAQ5F,GAE9B5C,KAAKqL,cAAcpK,EAAIC,EAAIsT,KAC3BgO,EAAY,GAAGxhB,SAAWC,EAC1BuhB,EAAY,GAAG7gB,kBAAoB+H,EAAK4T,GAAG5T,EAAKD,MAAMrM,GAAGkgB,GAAG,IAE5DkF,EAAY,GAAGxhB,SAAWE,EAC1BshB,EAAY,GAAG7gB,kBAAoB+H,EAAK4T,GAAG5T,EAAKD,MAAMrM,GAAGkgB,GAAG,IAE5DkF,EAAY,GAAGxhB,SAAWwT,EAC1BgO,EAAY,GAAG7gB,kBAAoB+H,EAAK4T,GAAG5T,EAAKD,MAAMrM,GAAGkgB,GAAG,IAE5Dtd,KAAKoC,YAAYqgB,mBAAmBD,QAErC,MAAKxiB,KAAK0K,qBAAqBhI,IACjC1C,KAAK0K,qBAAqB/H,IAC1B3C,KAAK0K,qBAAqB9H,IAC3B,SAEA4f,EAAY,GAAGxhB,SAAW0B,EAC1B8f,EAAY,GAAG7gB,kBAAoB+H,EAAK4T,GAAG5T,EAAKD,MAAMrM,GAAGkgB,GAAG,IAE5DkF,EAAY,GAAGxhB,SAAW2B,EAC1B6f,EAAY,GAAG7gB,kBAAoB+H,EAAK4T,GAAG5T,EAAKD,MAAMrM,GAAGkgB,GAAG,IAE5DkF,EAAY,GAAGxhB,SAAW4B,EAC1B4f,EAAY,GAAG7gB,kBAAoB+H,EAAK4T,GAAG5T,EAAKD,MAAMrM,GAAGkgB,GAAG,IAE5Dtd,KAAK0iB,eAAeF,KAKzB5iB,QAAQwX,GACX,OAAO,IAAIrV,EAAA1C,SACPiB,KAAKe,MAAM,IAAa,IAAM+V,EAAGvX,GAAMuX,EAAGrX,GAC1CO,KAAKe,MAAM,IAAoB,IAAP+V,EAAGtX,GAAYsX,EAAGrX,GAC1CqX,EAAGrX,GAIJH,8BAA8BqB,EAAYC,GAC7C,MAAM6J,GAAiB/K,KAAKqC,aAAepB,EAAGD,SAASjB,IAAMmB,EAAGF,SAASjB,EAAIkB,EAAGD,SAASjB,GACnFuB,EAAiB,IAAIV,EAAAW,OAa3B,OAXAD,EAAON,SAAW,IAAIe,EAAA1C,SAClB0L,GAAS7J,EAAGF,SAASnB,EAAIoB,EAAGD,SAASnB,GAAKoB,EAAGD,SAASnB,EACtDkL,GAAS7J,EAAGF,SAASlB,EAAImB,EAAGD,SAASlB,GAAKmB,EAAGD,SAASlB,EACtDE,KAAKqC,cAGTf,EAAOK,kBAAoB,IAAIf,EAAAa,kBAC3BsJ,GAAS7J,EAAGS,kBAAkBD,EAAIT,EAAGU,kBAAkBD,GAAKT,EAAGU,kBAAkBD,EACjFqJ,GAAS7J,EAAGS,kBAAkBC,EAAIX,EAAGU,kBAAkBC,GAAKX,EAAGU,kBAAkBC,GAG9EN,EAGJ1B,eAAeoL,GAClB,MAAMC,EAAuBD,EACvBH,EAAwB,IAAIhD,MAClC,IAAIqD,EAAYD,EAAMA,EAAMxK,OAAS,GAErC,IAAK,IAAIrD,EAAY,EAAGA,EAAI6N,EAAMxK,OAAQrD,IAAK,CAC3C,MAAM+N,EAAgBF,EAAM7N,GACxB4C,KAAK0K,qBAAqBS,EAAMnK,WAC3BhB,KAAK0K,qBAAqBQ,EAAElK,WAC7B6J,EAAO1C,KAAKnI,KAAK2iB,8BAA8BzX,EAAGC,IAEtDN,EAAO1C,KAAKgD,IACLnL,KAAK0K,qBAAqBQ,EAAElK,WACnC6J,EAAO1C,KAAKnI,KAAK2iB,8BAA8BzX,EAAGC,IAEtDD,EAAIC,EAGR,GAAIN,EAAOpK,OAAS,EAChB,OAGJ,MAAMkK,EAA2BE,EAAOjB,IAAahI,IACjDA,EAAEZ,SAAWhB,KAAKwI,QAAQ5G,EAAEZ,UACrBY,KAGW,IAAlBiJ,EAAOpK,QACNT,KAAKqL,cAAcV,EAAU,GAAG3J,SAAU2J,EAAU,GAAG3J,SAAU2J,EAAU,GAAG3J,aAI7D,IAAlB6J,EAAOpK,QACNT,KAAKsL,eACFX,EAAU,GAAG3J,SACb2J,EAAU,GAAG3J,SACb2J,EAAU,GAAG3J,SACb2J,EAAU,GAAG3J,YAKrBhB,KAAKoC,YAAYqgB,mBAAmB9X,uFCnI5CzN,EAAA0G,oBAEWhE,KAAKwC,GACR,OAAO+B,QAAQC,iGCLV/E,EAOTO,YAAYC,EAAWC,EAAWC,EAAWyO,EAAY,GACrDxO,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACTC,KAAKwO,EAAIA,EAGb5O,IAAIM,GACA,OAAO,IAAIb,EAASW,KAAKH,EAAIK,EAAIL,EAAGG,KAAKF,EAAII,EAAIJ,EAAGE,KAAKD,EAAIG,EAAIH,EAAGC,KAAKwO,EAAItO,EAAIsO,GAGrF5O,IAAIM,GACA,OAAO,IAAIb,EAASW,KAAKH,EAAIK,EAAIL,EAAGG,KAAKF,EAAII,EAAIJ,EAAGE,KAAKD,EAAIG,EAAIH,EAAGC,KAAKwO,EAAItO,EAAIsO,GAGrF5O,MAAMM,GACF,OAAO,IAAIb,EAASW,KAAKF,EAAII,EAAIH,EAAIC,KAAKD,EAAIG,EAAIJ,EAC9CE,KAAKD,EAAIG,EAAIL,EAAIG,KAAKH,EAAIK,EAAIH,EAC9BC,KAAKH,EAAIK,EAAIJ,EAAIE,KAAKF,EAAII,EAAIL,EAAG,GAGzCD,YACI,IAAIY,EAAO,EAAMR,KAAKS,SACtB,OAAOT,KAAKU,IAAIF,GAGpBZ,SACI,OAAOU,KAAKC,KAAKP,KAAKH,EAAIG,KAAKH,EAAIG,KAAKF,EAAIE,KAAKF,EAAIE,KAAKD,EAAIC,KAAKD,GAGvEH,IAAIS,GACA,OAAO,IAAIhB,EAASW,KAAKH,EAAIQ,EAAML,KAAKF,EAAIO,EAAML,KAAKD,EAAIM,EAAML,KAAKwO,GAG1E5O,IAAIM,GACA,OAAOF,KAAKH,EAAIK,EAAIL,EAAIG,KAAKF,EAAII,EAAIJ,EAAIE,KAAKD,EAAIG,EAAIH,GA1C9D7C,EAAAmC,4FCMAnC,EAAA6D,0GCNA,SAAYwB,GACRA,IAAA,iBACAA,IAAA,eAFJ,CAAYrF,EAAAqF,WAAArF,EAAAqF,gGCAZ,MAAAnD,EAAApC,EAAA,GACAqP,EAAArP,EAAA,IAEAE,EAAA4G,wBAA+BuI,EAAAlD,wBAE3BvJ,cACI4M,QAEA,MAAMpD,KAIN,IAAK,IAAIhM,EAAI,EAAGA,EAFF,GAEaA,IAAK,CAC5B,IAAImI,EAAQvF,KAAKwF,eAAmB,EAAJpI,EAAQkD,KAAKyH,GAHnC,IAINtC,EAASzF,KAAKwF,eAAmB,EAAJpI,EAAQkD,KAAKyH,GAJpC,GAIiD,IAEvDrC,EAAUD,EAAOE,IAAIJ,GACrBM,EAAKN,EAAMO,IAAIL,GAAQG,YACvBG,EAAQL,EAAQM,MAAMH,GAAID,YAAYlF,IAAI,MAC9CmF,EAAKE,EAAMC,MAAMN,GAASE,YAAYlF,IAAI,MAE1C,IAAK,IAAIxC,EAAI,EAAGA,EAVL,EAUiBA,IAAK,CAC7B,IAAI8J,EAAMnC,EAAGnF,IAAIJ,KAAK2H,IAAQ,EAAJ/J,EAAQoC,KAAKyH,GAXhC,IAW8CjC,IAAIC,EAAMrF,IAAIJ,KAAK4H,IAAQ,EAAJhK,EAAQoC,KAAKyH,GAXlF,KAWiGjC,IAAIP,GAC5G6D,EAAOjB,KAAKH,EAAItH,IAAI,KAI5B,MAAM2I,KAIN,IAAK,IAAIvB,EAAI,EAAGA,EArBF,GAqBaA,IACvB,IAAK,IAAI1K,EAAI,EAAGA,EArBL,EAqBiBA,IACxBiM,EAAMlB,MAtBC,EAsBeL,GAAM,EAAI1K,GAtBzB,GAsBwCgM,EAAO3I,QACtD4I,EAAMlB,MAvBC,EAuBeL,GAAM,EAAI1K,GAvBzB,GAuBwCgM,EAAO3I,QACtD4I,EAAMlB,MAxBC,EAwBeL,EAxBf,GAwB8B,EAAI1K,GAxBlC,GAwBiDgM,EAAO3I,QAE/D4I,EAAMlB,MA1BC,EA0BeL,EA1Bf,GA0B8B,EAAI1K,GA1BlC,GA0BiDgM,EAAO3I,QAC/D4I,EAAMlB,MA3BC,EA2BeL,EA3Bf,GA2B8B,EAAI1K,GA3BlC,GA2BiDgM,EAAO3I,QAC/D4I,EAAMlB,MA5BC,EA4BeL,GAAM,EAAI1K,GA5BzB,GA4BwCgM,EAAO3I,QAK9DT,KAAK0M,UAAUtD,EAAQC,GAGnBzJ,eAAeoJ,GACnB,IACI9K,EAAI,IAAO,EAAIoC,KAAK2H,IADT,EACiBe,IAChC,OAAO,IAAI5J,EAAAC,SAASnB,EAAIoC,KAAK4H,IAFrB,EAE6Bc,GACjC9K,EAAIoC,KAAK4H,IAHE,EAGMc,GACjB9K,EAAIoC,KAAK2H,IAJL,EAIae,IAAQtI,IAAI,uFCpDzCxD,EAAA0R,cAIIhP,cACII,KAAK4iB,KAAO,EAGThjB,WAEH,OADAI,KAAK4iB,MAAoB,KAAZ5iB,KAAK4iB,KAAc,OAAS,OAClC5iB,KAAK4iB,KAAO,OAGhBhjB,QAAQgjB,GACX5iB,KAAK4iB,KAAOA,2FCNPzW,EAYTvM,YAAoB1B,EAAmBmT,EAAmBzI,EAAmBD,GAAzD3I,KAAA9B,IAAmB8B,KAAAqR,IAAmBrR,KAAA4I,IAAmB5I,KAAA2I,IAGtE/I,iBACH,OAAOI,KAAK9B,EAAI8B,KAAKqR,GAAK,EAAIrR,KAAK4I,GAAK,GAAK5I,KAAK2I,GAAK,IAdpCwD,EAAA0W,MAAQ,IAAI1W,EAAM,EAAG,EAAG,EAAG,KAC3BA,EAAAqS,MAAQ,IAAIrS,EAAM,IAAK,IAAK,IAAK,KACjCA,EAAA2W,IAAM,IAAI3W,EAAM,IAAK,EAAG,EAAG,KAC3BA,EAAA4W,KAAO,IAAI5W,EAAM,EAAG,IAAK,EAAG,KAC5BA,EAAA6W,KAAO,IAAI7W,EAAM,EAAG,EAAG,IAAK,KAC5BA,EAAA8W,OAAS,IAAI9W,EAAM,IAAK,IAAK,EAAG,KAChCA,EAAA+W,KAAO,IAAI/W,EAAM,EAAG,IAAK,IAAK,KAC9BA,EAAAgX,QAAU,IAAIhX,EAAM,IAAK,EAAG,IAAK,KACjCA,EAAAiX,WAAa,IAAIjX,EAAM,IAAI,IAAI,IAAK,KAV/DjP,EAAAiP,yFCRAjP,EAAA+H,cAMIrF,YAAY4E,EAAuBuK,EAAgBC,GAC/ChP,KAAKwE,QAAUA,EACfxE,KAAK+O,MAAQA,EACb/O,KAAKgP,OAASA,EAGlBpP,SAAS4E,EAAkB3E,EAAWC,GAClC,OAAO0E,EAAQA,SAAa,IAAJ3E,GAAyB,KAAR,IAAJC,IAGzCF,yBAA0BC,EAAWC,GACjC,IAAIqhB,IAAY,EAAJthB,GAAS,IAAO,KAAO,IAC/B+c,IAAS/c,EAAI,EAAK,GAAK,IAAO,KAAO,IACrCwjB,IAAY,EAAJvjB,GAAS,IAAO,KAAO,IAC/B+c,IAAS/c,EAAI,EAAK,GAAK,IAAO,KAAO,IAErCwjB,EAAqC,IAA9BtjB,KAAKujB,SAASvjB,KAAMmhB,EAAIkC,GAC/BG,EAAqC,IAA9BxjB,KAAKujB,SAASvjB,KAAM4c,EAAIyG,GAC/BI,EAAqC,IAA9BzjB,KAAKujB,SAASvjB,KAAMmhB,EAAItE,GAC/B6G,EAAqC,IAA9B1jB,KAAKujB,SAASvjB,KAAM4c,EAAIC,GAE/B8G,EAAOL,GAAQ,GAAKzjB,EAAIS,KAAK6Z,MAAMta,KAAQ2jB,GAAS3jB,EAAIS,KAAK6Z,MAAMta,IACnE+jB,EAAOH,GAAQ,GAAK5jB,EAAIS,KAAK6Z,MAAMta,KAAQ6jB,GAAS7jB,EAAIS,KAAK6Z,MAAMta,IAGvE,OAFU8jB,GAAQ,GAAK7jB,EAAIQ,KAAK6Z,MAAMra,KAAQ8jB,GAAS9jB,EAAIQ,KAAK6Z,MAAMra,IAKnEF,0BAA0BC,EAAWC,GAExC,IAAIqhB,EAAK7gB,KAAK0L,IAAQ,EAAJnM,EAAOG,KAAK+O,MAAQ,GAClC6N,EAAKtc,KAAK0L,IAAc,GAAL,EAAJnM,GAAYG,KAAK+O,MAAQ,GACxCsU,EAAK/iB,KAAK0L,IAAQ,EAAJlM,EAAOE,KAAKgP,OAAS,GACnC6N,EAAKvc,KAAK0L,IAAc,GAAL,EAAJlM,GAAYE,KAAKgP,OAAS,GAEzCsU,EAAOtjB,KAAK6jB,UAAU7jB,KAAMmhB,EAAIkC,GAChCG,EAAOxjB,KAAK6jB,UAAU7jB,KAAM4c,EAAIyG,GAChCI,EAAOzjB,KAAK6jB,UAAU7jB,KAAMmhB,EAAItE,GAChC6G,EAAO1jB,KAAK6jB,UAAU7jB,KAAM4c,EAAIC,GAEpC,OAAO7c,KAAK8jB,gBAAgBjkB,EAAGC,EAAU,IAAPwjB,EAAoB,IAAPE,EAAoB,IAAPC,EAAoB,IAAPC,GACrE1jB,KAAK8jB,gBAAgBjkB,EAAGC,EAAGwjB,GAAQ,EAAI,IAAME,GAAQ,EAAI,IAAMC,GAAQ,EAAI,IAAMC,GAAQ,EAAI,MAAS,EACtG1jB,KAAK8jB,gBAAgBjkB,EAAGC,EAAGwjB,GAAQ,GAAK,IAAME,GAAQ,GAAK,IAAMC,GAAQ,GAAK,IAAMC,GAAQ,GAAK,MAAS,GAGlH9jB,UAAU4E,EAAkB3E,EAAWC,GACnC,OAAOE,KAAKwE,QAAQ3E,EAAIC,EAAIE,KAAK+O,OAG7BnP,gBAAgBC,EAAGC,EAAGwjB,EAAME,EAAMC,EAAMC,GAC5C,IAAIC,EAAOL,GAAQ,GAAKzjB,EAAIS,KAAK6Z,MAAMta,KAAQ2jB,GAAS3jB,EAAIS,KAAK6Z,MAAMta,IACnE+jB,EAAOH,GAAQ,GAAK5jB,EAAIS,KAAK6Z,MAAMta,KAAQ6jB,GAAS7jB,EAAIS,KAAK6Z,MAAMta,IAGvE,OAFU8jB,GAAQ,GAAK7jB,EAAIQ,KAAK6Z,MAAMra,KAAQ8jB,GAAS9jB,EAAIQ,KAAK6Z,MAAMra","file":"torus-knot-tunnel.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 148);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { TorusKnotTunnelScene } from './TorusKnotTunnelScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TorusKnotTunnelScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private torusKnot = new TorusKnot();\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        framebuffer.setCullFace(CullFace.FRONT);\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.generateProceduralParticleTexture2().then((texture: Texture) => this.particleTexture = texture),\n        ]);\n    }\n\n    /**\n     * TODO:\n     * * move stackig geometry into mesh\n     * * particles into particle system class\n     * * remove old renderObject method\n     */\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        this.torusTunnel(framebuffer, time * 0.02, Date.now(), this.particleTexture);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number, sync: number, texture: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        let scale = 1.0;\n\n        let frame = this.torusFunction3(elapsedTime * 0.02);\n        let frame2 = this.torusFunction3(elapsedTime * 0.02 + 0.01);\n\n        let tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        let right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        let translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        let rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        let finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        framebuffer.renderingPipeline.draw(this.torusKnot.getMesh(), modelViewMartrix, 221, 96, 48);\n\n        let ppoints = new Array<Vector3f>();\n        const num = 40;\n        const STEPS22 = 8 * 2;\n        for (let j = 0; j < num; j++) {\n            let frame = this.torusFunction3(j * 2 * Math.PI / num);\n            let frame2 = this.torusFunction3(j * 2 * Math.PI / num + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(10.4);\n            up = right.cross(tangent).normalize().mul(10.4);\n\n            for (let r = 0; r < STEPS22; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS22)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS22))).add(frame);\n                ppoints.push(new Vector3f(pos.x, pos.y, pos.z));\n            }\n\n        }\n\n        let ppoints2: Array<Vector3f> = new Array<Vector3f>(ppoints.length);\n        ppoints.forEach(element => {\n\n\n            let transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n            ppoints2.push(transformed);\n        });\n\n        ppoints2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        ppoints2.forEach(element => {\n            //let size = -(2.0 * 192 / (element.z));\n            let size = -(2.3 * 192 / (element.z));\n            if (element.z < -4)\n            framebuffer.drawParticle(\n                    Math.round(element.x - size / 2),\n                    Math.round(element.y - size / 2),\n                    Math.round(size), Math.round(size), texture, 1 / element.z, framebuffer.interpolate(-90, -55, element.z));\n        });\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        \n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n\n        this.buildMesh(points, index);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}