{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/examples/voxel-landscape/VoxelLandscapeScene.ts","webpack:///./src/examples/voxel-landscape/Application.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Vertex.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/assets/abstract.png","webpack:///./src/assets/heightmap.png","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/assets/razor1911.png","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Framebuffer_1","math_1","Vertex_1","AbstractClipEdge_1","BottomClipEdge","AbstractClipEdge","Framebuffer","minWindow","position","p1","p2","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","TopClipEdge","maxWindow","LeftClipEdge","AbstractScene_1","texture_1","VoxelLandscapeScene","AbstractScene","Promise","all","TextureUtils","load","then","texture","texture2","heightmap","abstract","time","Date","now","drawVoxelLandscape3","drawTexture","clearColorBuffer","camX","dirX","cos","dirY","sin","highestPoint","rayX","rayY","dist","height","getBilinearFilteredPixel","projHeight","color","min","packedRGB","index","max","getPixel","Canvas_1","VoxelLandscapeScene_1","canvas","Canvas","appendTo","document","getElementById","init","main","RightClipEdge","Texture_1","Texture","TextureUtils_1","AbstractGeometricObject","points","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","add","buildMesh","alpha","ScaleClipBlitter","xp","yp","width","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","RandomNumberGenerator_1","resolve","Uint32Array","rng","default","setSeed","getFloat","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","TexturingRenderingPipeline","points2","vertexArray","p3","uv","clipConvexPolygon2","zClipTriangle2","t1","computeNearPlaneIntersection2","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","TexturedTriangleRasterizer","temp","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","yDistanceLeft","yDistanceRight","slope1","slope2","tslope1u","tslope2u","tslope1v","tslope2v","zslope1","zslope2","curx1","curx2","curz1","curz2","curu1","curv1","curu2","curv2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","spanuStep","spanvStep","wStart","uStart","vStart","wBuffer","bob","color2","t2","t3","TriangleRasterizer","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","plane","getNormal","getDistance","mat","multiplyHom","angle","xScale","yScale","zScale","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","elapsedTime","xdist","ydist","atan2","color1","distScale","zDist","fastFramebufferCopy","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","element","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","scene","coords","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"voxel-landscape.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 139);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class VoxelLandscapeScene extends AbstractScene {\n\n    private heightmap: Texture;\n    private abstract: Texture;\n    private texture2: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/razor1911.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            TextureUtils.load(require('../../assets/heightmap.png'), false).then(\n                (texture: Texture) => this.heightmap = texture\n            ),\n            TextureUtils.load(require('../../assets/abstract.png'), false).then(\n                (texture: Texture) => this.abstract = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        this.drawVoxelLandscape3(framebuffer, this.heightmap, time);\n        framebuffer.drawTexture(32, 1, this.texture2, 1.0);\n    }\n\n    /**\n     * Generates a voxel landscape.\n     * \n     * TODO:\n     * - y-span color interpolation\n     * - texturing\n     * \n     * http://simulationcorner.net/index.php?page=comanche\n     * http://www.flipcode.com/archives/Realtime_Voxel_Landscape_Engines-Part_2_Rendering_the_Landscapes_Structure.shtml\n     * http://www.massal.net/article/voxel/\n     * \n     * @param {Texture} texture The heightmap\n     * @param {number} time Elapsed time in milliseconds\n     * \n     * @memberof Framebuffer\n     */\n    drawVoxelLandscape2(framebuffer: Framebuffer, texture: Texture, time: number) {\n        framebuffer.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 45;\n        const MAX_DIST = 200;\n\n        let camX = time * 0.008;\n        let camY = 0;\n\n        const focus = 125.7;\n        const center = 300;\n        const eye = 260;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = texture.getBilinearFilteredPixel(rayX, rayY);\n                let projHeight = Math.round((height - eye) * focus / dist + center);\n                let color = Math.round(height) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)) * 10);\n                let packedRGB = 255 << 24 | (color + 10) << 16 | (color + 20) << 8 | (color + 13);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        framebuffer.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape3(framebuffer: Framebuffer, texture: Texture, time: number) {\n        framebuffer.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 35;\n        const MAX_DIST = 300;\n\n        let camX = time * 0.008;\n        let camY = 0;\n\n        const focus = 45;\n        const center = 300;\n        const eye = 480;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.0018) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.0018) * 0.4;\n\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = texture.getPixel(texture, rayX, rayY) & 0xff;\n                let projHeight = Math.round((height - eye) * focus / dist + center);\n                let color = Math.round(height) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)) * 10);\n                let packedRGB = texture.getPixel(this.abstract, rayX, rayY) | 255 << 24;\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    const max: number = Math.min(projHeight, 200);\n\n                    for (let i: number = highestPoint; i < max; i++) {\n                        framebuffer.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max === 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { VoxelLandscapeScene } from './VoxelLandscapeScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new VoxelLandscapeScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","module.exports = __webpack_public_path__ + \"aecaf306ad634d628614dca09cfab828.png\";","module.exports = __webpack_public_path__ + \"c4e4b266fe4b4281371e908cb2fa6e89.png\";","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","module.exports = __webpack_public_path__ + \"b30d17fb175566e9e20d5584d7ae6bfb.png\";","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}