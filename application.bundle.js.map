{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/Texture.ts","webpack:///./src/camera/BasicCamera.ts","webpack:///./src/camera/index.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/CullFace.ts","webpack:///./src/assets/xmix_q2_final.ogg","webpack:///./src/assets/dirt.png","webpack:///./src/assets/mask.png","webpack:///./src/assets/heightmapSphere.png","webpack:///./src/assets/envmap.png","webpack:///./src/assets/cross.png","webpack:///./src/assets/hlm.png","webpack:///./src/assets/blurredBackground.png","webpack:///./src/assets/Backed.png","webpack:///./src/assets/microstrange.png","webpack:///./src/assets/rave.png","webpack:///./src/assets/abstract.png","webpack:///./src/assets/hoodlumLogo.png","webpack:///./src/assets/meth.png","webpack:///./src/assets/platonian_baked.png","webpack:///./src/assets/revision.png","webpack:///./src/assets/led.png","webpack:///./src/assets/bokeh.png","webpack:///./src/assets/sky.png","webpack:///./src/assets/ring.png","webpack:///./src/assets/spark.png","webpack:///./src/assets/battleofilona.png","webpack:///./src/assets/pandabear.png","webpack:///./src/assets/ball2.png","webpack:///./src/assets/lens.png","webpack:///./src/assets/atlantis.png","webpack:///./src/assets/font.png","webpack:///./src/assets/heightmap.png","webpack:///./src/assets/razor1911.png","webpack:///./src/assets/logo.png","webpack:///./src/assets/metall.png","webpack:///./src/assets/spheremap.png","webpack:///./src/Vertex.ts","webpack:///./src/camera/ControllableCamera.ts","webpack:///./src/animation/CameraAnimator.ts","webpack:///./src/animation/CameraKeyFrame.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/math/Plane.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/clustered-culling/FrustumCuller.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/Application.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","default","seed","texture","width","height","math_1","BasicCamera","position","yaw","pitch","roll","constructZRotationMatrix","constructXRotationMatrix","constructYRotationMatrix","translation","constructTranslationMatrix","multiplyMatrix","BasicCamera_1","ControllableCamera_1","ControllableCamera","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverse","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tx","ty","tz","alpha","cos","sin","sx","sy","sz","result","vector","w","CullFace","TextureCoordinate","Vertex","super","speed","deltaTime","distance","camera_1","CosineInterpolate","y1","y2","mu","mu2","PI","CubicInterpolate","y0","y3","a0","a1","a2","a3","CameraAnimator","keyFrames","elapsedTime","first","zero","second","third","fraction","look","rotation","add","pos","getViewMatrix","CameraKeyFrame","Sphere","radius","center","plane","getNormal","getDistance","mat","multiplyHom","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","forEach","point","max","sub","normal","angle","xScale","yScale","zScale","Plane_1","FrustumCuller","planes","Array","push","HALF_HORIZONTAL_FOV","atan","HALF_VERTICAL_FOV","near","far","normals","modelViewMatrix","getInverseRotation","multiplyHomArr","boundingVolume","isInsidePositiveHalfSpace","FrustumCuller_1","Geometry_1","CameraKeyFrame_1","CameraAnimator_1","CullFace_1","Vertex_1","Texture_1","RandomNumberGenerator_1","json","bunnyJson","worldJson","torusJson","gearJson","roomJson","hoodlumJson","labJson","bakedJson","platonian","hlm2018Json","AbstractClipEdge","Framebuffer","cullMode","BACK","tmp","Uint32Array","tmp2","tmpGlitch","NEAR_PLANE_Z","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","wBuffer","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","framebuffer","camera","face","bob","texture2","obj","createObject","bunnyObj","createBunny","blenderObj","getBlenderScene","blenderObj2","blenderObj3","blenderObj4","blenderObj5","blenderObj6","blenderObj7","blenderObj8","blenderObj9","sphere","createSphere","createPlane","cylinder","createCylinder","cylinder2","createCylinder2","sphereDisp","createSphereDistplaced","sphereDisp2","data","set","color","toColor","count","col","h","fill","fb","red","start","j","text","xpos","firstIndex","charCodeAt","index","floor","drawTextureRectFastAlpha","interpolate","Date","now","xs","ys","xt","yt","alpha2","texIndex","frIndex","inverseAlpha","g","b","fbPixel","txPixel","min","tex","time","xoff","yoff","xx","round","yy","xx2","yy2","drawTexture","scrollText","scrollerOffset","drawText","sumIndex","fastFramebufferCopy","drawBox2","readPixel","drawLineDDA","end","current","offset","fastFramebufferCopyOffset","colorLUT","shade","startTime","fadeArray","rng","setSeed","getFloat","clear","drawTextureRect","src","dest","k","scaledTime","drawTextureNoClipAlpha","xdist","ydist","dist","atan2","color1","distScale","noise","glitchFactor","rng2","yStart","size","off","abs","glIndex","index2","xp","yp","newHeight","newWidth","xStart","xTextureStart","xStep","yStep","textureIndex","alphaBlend","alphaScale","framebufferPixel","texturePixel","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","framebufferIndex","textureRowOffset","framebufferRowOffset","div","ypos","textureForwardDifference","hightlight","pow","points","modelViewMartrix","constructScaleMatrix","points2","element","transformed","multiply","nearPlaneClipping","t1","t2","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","colorAr","drawTriangleDDA","theta","phi","maxWindow","minWindow","x1","lineDirection","radialWaveCenter","difference","directionalWave","waveSum","green","blue","sphereFunction2","drawBox","v1","v2","v3","colLine","isTriangleCCW","p1","p2","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","dec","toString","regionCode","sphereFunction","cross","normals2","scalar","normalize","frame","torusFunction","frame2","up","right","map","heightmap","xOff","zOff","a","getRadius","getCenter","dirt","clearCol","model","getDodecahedronMesh","drawObject","yDisplacement","getIcosahedronMesh","getCubeMesh","getPyramidMesh","constructShadowMatrix","lensflareScreenSpace","drawLensFlare","file","disp","scene","coords","uv","v","u","faces","computeBoundingSphere","boundingSphere","dist2","color2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","intensity","drawTextureRectNoAlpha","noClear","num","sort","drawParticle","radius2","drawParticleNoDepth","radi","move","cameraAnimator","setKeyFrames","frustumCuller","updateFrustum","isPotentiallyVisible","drawObject2","drawSoftParticle","texture3","mv","model2","scale2","drawObjectTexture","factor","dampFactor","IMG_WIDTH","IMG_HEIGHT","rotMat","stars","stars2","drawPixel","noLighting","culling","normalMatrix","computeNormalMatrix","lightDirection","isInFrontOfNearPlane","p3","clipConvexPolygon","zClipTriangle","vertexArray","textureCoordinate","clipConvexPolygon2","drawTriangleDDA2","oldLDir","multiplyHomArr2","subject","output","input","S","computeNearPlaneIntersection","projected","isTriangleCCW2","sync","tangent","smashTime","torusFunction2","smash","torusFunction3","finalMatrix","ppoints","ppoints2","textCoords","STEPS","STEPS2","t","vertex1","vertex2","vertex3","n1","n2","n3","fakeSphere","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","newPoints","asin","xpos2","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","norm","norm2","sub2","cross2","add2","normalize2","multiplyArr","myScale","textureCoords","fakeSphere2","rot","vertex","clipping","clipRegion","edge","isInside","computeIntersection","isInside2","computeIntersection2","screenPos","dir","temp","drawTextureRectAdd","light","ambient","diffuse","specular","phong","det","v4","yDistanceLeft","yDistanceRight","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","spanzStep","wStart","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","yDistance","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","dx","dy","xDistance","sign","wDelta","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","camX","dirX","dirY","highestPoint","rayX","rayY","getBilinearFilteredPixel","projHeight","packedRGB","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","balls","mapColor","interpolateColor","x2","x3","x4","xPos","drawSpan","textCoord","Framebuffer_1","Canvas","fpsStartTime","fpsCount","fps","accumulationBuffer","canvas","document","createElement","style","cssText","context","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","bind","currentTime","setCullFace","FRONT","blurred","setBob","spheremap","shadingSphereEnvDisp","ukBasslineClapMs","envmap","shadingSphereEnvDisp2","drawScaledTextureClipBi","drawParticleTorus","particleTexture2","shadingTorusDamp","raveMoview","rave","glitchScreen","shadingPlaneEnv","drawVoxelLandscape4","tempTexture","drawPolarDistotion2","shadingCylinderEnvDisp","shadingTorus5","drawParticleWaves","drawMetaballs","drawPlanedeformationTunnelV2","abstract","metal","reproduceRazorScene","texture10","texture11","texture13","drawParticleStreams","torusTunnel","particleTexture","drawBlenderScene2","texture4","drawBlenderScene3","hoodlumLogo","drawBlenderScene4","drawBlenderScene5","drawBlenderScene6","baked","drawBlenderScene7","drawBlenderScene8","image","withAlpha","drawImage","getImageData","conv","path","hasAlpha","Promise","resolve","img","Image","onload","onerror","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","all","createTexture","then","texture5","texture6","texture7","texture8","texture9","texture12","texture14","revision","meth","createProceduralTexture","texture15","createProceduralTexture2","createProceduralTexture3","createProceduralTexture4","createProceduralDisplacementMap","displacementMap","micro","hlm","heightmapSphere","mask","precompute","audioContext","AudioContext","request","XMLHttpRequest","open","responseType","undecodedAudio","response","decodeAudioData","buffer","sourceBuffer","createBufferSource","connect","destination","loop","send","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","AISA","appendTo","getElementById","init","main"],"mappings":"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","file":"application.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 63);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\r\n\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n\r\n    constructor(x: number, y:number, z:number) {\r\n        this.x=x;\r\n        this.y=y;\r\n        this.z=z;\r\n    }\r\n\r\n    public mult(scale: number) {\r\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\r\n    }\r\n\r\n    sub(vec: Vector3f): Vector3f {\r\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\r\n    }\r\n\r\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\r\n       this.x = vec1.x - vec2.x;\r\n       this.y = vec1.y - vec2.y;\r\n       this.z =  vec1.z - vec2.z;\r\n    }\r\n\r\n    mul(scal: number): Vector3f {\r\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\r\n    }\r\n\r\n    add(vec: Vector3f): Vector3f {\r\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\r\n    }\r\n\r\n    add2(vec: Vector3f,vec2: Vector3f): void {\r\n        this.x = vec.x + vec2.x;\r\n        this.y =  vec.y + vec2.y;\r\n        this.z =  vec.z + vec2.z;\r\n    }\r\n\r\n    cross(vec: Vector3f): Vector3f {\r\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\r\n            this.z * vec.x - this.x * vec.z,\r\n            this.x * vec.y - this.y * vec.x);\r\n    }\r\n\r\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\r\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\r\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\r\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\r\n    }\r\n\r\n    normalize(): Vector3f {\r\n        let reci = 1.0/this.length();\r\n        return this.mul(reci);\r\n    }\r\n\r\n    normalize2(): void {\r\n        let reci = 1.0/this.length();\r\n       this.x *= reci;\r\n       this.y *= reci;\r\n       this.z *= reci;\r\n    }\r\n\r\n    dot(vec:Vector3f): number {\r\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\r\n    }\r\n\r\n}","export default class RandomNumberGenerator {\r\n\r\n    private seed: number;\r\n\r\n    constructor() {\r\n        this.seed = 6;\r\n    }\r\n\r\n    getFloat() {\r\n        this.seed = (this.seed * 9301 + 49297) % 233280;\r\n        return this.seed / 233280;\r\n    }\r\n\r\n    setSeed(seed) {\r\n        this.seed = seed;\r\n    }\r\n\r\n}","export default class Texture {\n\n    texture: Uint32Array\n    width: number;\n    height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math';\r\n\r\nexport class BasicCamera {\r\n\r\n    protected position: Vector3f;\r\n    protected yaw: number;\r\n    protected pitch: number;\r\n    protected roll: number;\r\n\r\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\r\n        this.position = position;\r\n        this.yaw = yaw;\r\n        this.pitch = pitch;\r\n        this.roll = roll;\r\n    }\r\n\r\n    public getViewMatrix(): Matrix4f {\r\n        let roll  = Matrix4f.constructZRotationMatrix(-this.roll);\r\n        let pitch = Matrix4f.constructXRotationMatrix(-this.pitch);\r\n        let yaw   = Matrix4f.constructYRotationMatrix(-this.yaw);\r\n\r\n        let translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\r\n\r\n        return roll.multiplyMatrix(pitch).multiplyMatrix(yaw).multiplyMatrix(translation);\r\n    }\r\n\r\n}","export { BasicCamera } from './BasicCamera';\r\nexport { ControllableCamera } from './ControllableCamera';","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","export class Vector4f {\r\n\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    public w: number;\r\n\r\n    constructor(x: number, y: number, z: number, w: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n\r\n    sub(vec: Vector4f): Vector4f {\r\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\r\n    }\r\n\r\n    add(vec: Vector4f): Vector4f {\r\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\r\n    }\r\n\r\n    cross(vec: Vector4f): Vector4f {\r\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\r\n            this.z * vec.x - this.x * vec.z,\r\n            this.x * vec.y - this.y * vec.x, 0.0);\r\n    }\r\n\r\n    normalize(): Vector4f {\r\n        let reci = 1.0 / this.length();\r\n        return this.mul(reci);\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    mul(scal: number): Vector4f {\r\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\r\n    }\r\n\r\n    dot(vec: Vector4f): number {\r\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\r\n    }\r\n\r\n}","export enum CullFace {\r\n    FRONT = 0,\r\n    BACK = 1\r\n}","module.exports = __webpack_public_path__ + \"69adb964e9ef816f3bd99df3b7ddd560.ogg\";","module.exports = __webpack_public_path__ + \"28310db934c54c285a709a1e980e4efc.png\";","module.exports = __webpack_public_path__ + \"04259b8d38e7b73dae45b2c29ceeb4d3.png\";","module.exports = __webpack_public_path__ + \"b01bbcd1860ad00f64ab16cc21569634.png\";","module.exports = __webpack_public_path__ + \"fa5e6c40cb378f6ee6cab4e16ef0934b.png\";","module.exports = __webpack_public_path__ + \"9f73952b51a9a6343babe0c489a2b980.png\";","module.exports = __webpack_public_path__ + \"c55143e127c426cd69827603bbd05978.png\";","module.exports = __webpack_public_path__ + \"bbaba2795420534ca9f0184e07fb74f8.png\";","module.exports = __webpack_public_path__ + \"9ab8cc0b50548d6322136e5429447362.png\";","module.exports = __webpack_public_path__ + \"2047b8a2f49ee5b609dc16ab0e62c014.png\";","module.exports = __webpack_public_path__ + \"539826c16dd852792e84c205811ca9f8.png\";","module.exports = __webpack_public_path__ + \"aecaf306ad634d628614dca09cfab828.png\";","module.exports = __webpack_public_path__ + \"042200790f9c9b7eb4c1dcdc1bfa6778.png\";","module.exports = __webpack_public_path__ + \"6a04a9d0a0989ac43da2da2261c14c98.png\";","module.exports = __webpack_public_path__ + \"c16d3cb192829b6ee4ed2952fa366a80.png\";","module.exports = __webpack_public_path__ + \"f657ac4e01beddb5085242cb1c20ecb3.png\";","module.exports = __webpack_public_path__ + \"b456e9dc15d272b079029a5ca6468305.png\";","module.exports = __webpack_public_path__ + \"54e31707db0fbae7dec46d063517665a.png\";","module.exports = __webpack_public_path__ + \"f1dde6672b0d9b18b4373a26d3803351.png\";","module.exports = __webpack_public_path__ + \"5c07fbf7949c365c56f8188b02827d6e.png\";","module.exports = __webpack_public_path__ + \"c196269cf8b2fc9593276f497c8ffdd9.png\";","module.exports = __webpack_public_path__ + \"47d04e8b7dc74f4980d66796a632547c.png\";","module.exports = __webpack_public_path__ + \"0009cb245d8a3129bcd470b1c30a2c17.png\";","module.exports = __webpack_public_path__ + \"f4f2b50d7d886d02949a38f94c217a86.png\";","module.exports = __webpack_public_path__ + \"dad0119c8dd1a33ab48b6870bfa8b432.png\";","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","module.exports = __webpack_public_path__ + \"211f2046cf2c6739bad5c6209b09dac4.png\";","module.exports = __webpack_public_path__ + \"c4e4b266fe4b4281371e908cb2fa6e89.png\";","module.exports = __webpack_public_path__ + \"b30d17fb175566e9e20d5584d7ae6bfb.png\";","module.exports = __webpack_public_path__ + \"36fbc222529fa8e2b722e7de1ca8f010.png\";","module.exports = __webpack_public_path__ + \"2989b3135074a9d7d10f7d6c42cecd4a.png\";","module.exports = __webpack_public_path__ + \"14bd8cd5c9c3b1bcb59e2ec9f4c8ed16.png\";","import { Vector3f } from './math';\r\n\r\nexport class TextureCoordinate {\r\n    public u: number;\r\n    public v: number;\r\n}\r\n\r\nexport class Vertex {\r\n    public position: Vector3f;\r\n    public textureCoordinate: TextureCoordinate;\r\n}","import { Vector3f } from '../math';\r\nimport { BasicCamera } from './BasicCamera';\r\n\r\nexport class ControllableCamera extends BasicCamera {\r\n\r\n    constructor() {\r\n        super(new Vector3f(0, 0, 0), 0, 0, 0);\r\n    }\r\n\r\n    public moveForward(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.position.x += distance * -Math.sin(this.yaw);\r\n        this.position.z += distance * -Math.cos(this.yaw);\r\n    }\r\n\r\n    public moveBackward(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.position.x -= distance * -Math.sin(this.yaw);\r\n        this.position.z -= distance * -Math.cos(this.yaw);\r\n    }\r\n\r\n    public turnLeft(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.yaw += distance;\r\n    }\r\n\r\n    public turnRight(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.yaw -= distance;\r\n    }\r\n\r\n    public turnUp(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.pitch += distance;\r\n    }\r\n\r\n    public turnDown(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.pitch -= distance;\r\n    }\r\n\r\n}","import { CameraKeyFrame } from './CameraKeyFrame';\r\nimport { Vector3f } from '../math/Vector3f';\r\nimport { Matrix4f } from '../math/Matrix4f';\r\nimport { BasicCamera } from '../camera';\r\nimport { Vector4f } from \"../math/Vector4f\";\r\n\r\nexport class CameraAnimator {\r\n\r\n    private keyFrames: Array<CameraKeyFrame>;\r\n    pos: Vector3f;\r\n\r\n    // TODO:\r\n    // - should we really loop or better restart??\r\n    // - dont use linear interpolation see bourke\r\n    // - maybe quaternions and slerp for rotation\r\n    // temp solution: no linear for \r\n\r\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>) {\r\n        this.keyFrames = keyFrames;\r\n    }\r\n\r\n    getViewMatrix(elapsedTime: number): Matrix4f {\r\n\r\n        let keyFrameDuration = 5000;\r\n\r\n        let first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\r\n        let zero = ((first - 1)+this.keyFrames.length) % this.keyFrames.length;\r\n        let second = (first + 1) % this.keyFrames.length;\r\n        let third = (first + 2) % this.keyFrames.length;\r\n        let fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\r\n\r\n        let mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\r\n        let position = new Vector3f(\r\n            CosineInterpolate(this.keyFrames[first].position.x, this.keyFrames[second].position.x, fraction),\r\n            CosineInterpolate(this.keyFrames[first].position.y, this.keyFrames[second].position.y, fraction),\r\n            CosineInterpolate(this.keyFrames[first].position.z, this.keyFrames[second].position.z, fraction)\r\n        );\r\n         position = new Vector3f(\r\n            CubicInterpolate(this.keyFrames[zero].position.x,this.keyFrames[first].position.x, this.keyFrames[second].position.x,this.keyFrames[third].position.x, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].position.y,this.keyFrames[first].position.y, this.keyFrames[second].position.y,this.keyFrames[third].position.y, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].position.z,this.keyFrames[first].position.z, this.keyFrames[second].position.z,this.keyFrames[third].position.z, fraction)\r\n        );\r\n        let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\r\n\r\n        look = new Vector3f(\r\n            CubicInterpolate(this.keyFrames[zero].rotation.x,this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x,this.keyFrames[third].rotation.x, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].rotation.y,this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y,this.keyFrames[third].rotation.y, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].rotation.z,this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z,this.keyFrames[third].rotation.z, fraction)\r\n        );\r\n        this.pos = position;\r\n\r\n        return new BasicCamera(position, look.x, look.y, look.z).getViewMatrix();\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction CosineInterpolate(y1: number, y2: number, mu: number): number {\r\n    let mu2: number;\r\n    mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\r\n    return (y1 * (1 - mu2) + y2 * mu2);\r\n}\r\n\r\nfunction CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\r\n    let a0: number;\r\n    let a1: number;\r\n    let a2: number;\r\n    let a3: number;\r\n    let mu2: number;\r\n\r\n    mu2 = mu * mu;\r\n    a0 = y3 - y2 - y0 + y1;\r\n    a1 = y0 - y1 - a0;\r\n    a2 = y2 - y0;\r\n    a3 = y1;\r\n\r\n    return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\r\n}","import { Vector3f } from '../math';\r\n\r\nexport class CameraKeyFrame {\r\n\r\n    public position: Vector3f;\r\n    public rotation: Vector3f;\r\n\r\n    constructor(position: Vector3f, rotation: Vector3f) {\r\n        this.position = position;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n}","import { Matrix4f } from './Matrix4f';\r\nimport { Vector4f } from './index';\r\nimport { BoundingVolume } from './BoundingVolume';\r\nimport Plane from './Plane';\r\nimport { Vector3f } from './Vector3f';\r\n\r\nexport class Sphere implements BoundingVolume {\r\n\r\n    private center: Vector4f;\r\n    private radius: number;\r\n\r\n    public constructor(position: Vector4f, radius: number) {\r\n        this.center = position;\r\n        this.radius = radius;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Plane} plane \r\n     * @returns {boolean} \r\n     * @memberof Sphere\r\n     */\r\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\r\n        return plane.getNormal().dot(this.center) - plane.getDistance() >- this.radius;\r\n    }\r\n\r\n    public getTran(mat: Matrix4f): Vector4f {\r\n        return mat.multiplyHom(this.center);\r\n    }\r\n\r\n    public getRadius(): number {\r\n        return this.radius;\r\n    }\r\n\r\n    public getCenter(): Vector4f {\r\n        return this.center;\r\n    }\r\n\r\n}","import { Vector3f, Vector4f } from './index';\r\nimport { Sphere } from './Sphere';\r\n\r\nexport class ComputationalGeometryUtils {\r\n\r\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\r\n\r\n        if (vertices.length === 0) {\r\n            throw new Error('More than one vertex required.');\r\n        }\r\n\r\n        if (vertices.length === 1) {\r\n            return new Sphere(vertices[0], 0);\r\n        }\r\n\r\n        let center = new Vector4f(0, 0, 0, 0);\r\n        let radius = 0;\r\n\r\n        vertices.forEach(point => {\r\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\r\n        });\r\n\r\n        center = center.mul(1.0 / vertices.length);\r\n\r\n        vertices.forEach(point => {\r\n            radius = Math.max(radius, center.sub(point).length());\r\n        });\r\n\r\n        return new Sphere(center, radius);\r\n    }\r\n\r\n}","/**\r\n * Defines a plane as used for primitive clipping against the\r\n * view frustum. \r\n */\r\nimport { Vector4f } from './index';\r\n\r\nexport default class Plane {\r\n\r\n    public distance: number;\r\n    public normal: Vector4f;\r\n\r\n    constructor(normal: Vector4f, distance: number) {\r\n        this.normal = normal;\r\n        this.distance = distance;\r\n    }\r\n\r\n    public getNormal(): Vector4f {\r\n        return this.normal;\r\n    }\r\n\r\n    public getDistance(): number {\r\n        return this.distance;\r\n    }\r\n\r\n}","import { Vector3f } from './Vector3f';\r\n\r\nexport class Matrix3f {\r\n\r\n    public m11: number;\r\n    public m12: number;\r\n    public m13: number;\r\n\r\n    public m21: number;\r\n    public m22: number;\r\n    public m23: number;\r\n\r\n    public m31: number;\r\n    public m32: number;\r\n    public m33: number;\r\n\r\n    static constructXRotationMatrix(angle: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n\r\n        matrix.m11 = 1.0;\r\n        matrix.m12 = 0.0;\r\n        matrix.m13 = 0.0;\r\n\r\n        matrix.m21 = 0.0;\r\n        matrix.m22 = cos;\r\n        matrix.m23 = -sin;\r\n\r\n        matrix.m31 = 0.0;\r\n        matrix.m32 = sin;\r\n        matrix.m33 = cos;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    static constructYRotationMatrix(angle: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        matrix.m11 = Math.cos(angle);\r\n        matrix.m12 = 0.0;\r\n        matrix.m13 = Math.sin(angle);\r\n\r\n        matrix.m21 = 0.0;\r\n        matrix.m22 = 1.0;\r\n        matrix.m23 = 0.0;\r\n\r\n        matrix.m31 = -Math.sin(angle);\r\n        matrix.m32 = 0.0;\r\n        matrix.m33 = Math.cos(angle);\r\n\r\n        return matrix;\r\n    }\r\n\r\n    static constructZRotationMatrix(angle: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        matrix.m11 = Math.cos(angle);\r\n        matrix.m12 = -Math.sin(angle);\r\n        matrix.m13 = 0.0;\r\n\r\n        matrix.m21 = Math.sin(angle);\r\n        matrix.m22 = Math.cos(angle);\r\n        matrix.m23 = 0.0;\r\n\r\n        matrix.m31 = 0.0;\r\n        matrix.m32 = 0.0;\r\n        matrix.m33 = 1.0;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        matrix.m11 = xScale;\r\n        matrix.m12 = 0.0;\r\n        matrix.m13 = 0.0;\r\n\r\n        matrix.m21 = 0.0;\r\n        matrix.m22 = yScale;\r\n        matrix.m23 = 0.0;\r\n\r\n        matrix.m31 = 0.0;\r\n        matrix.m32 = 0.0;\r\n        matrix.m33 = zScale;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\r\n        let result = new Matrix3f();\r\n\r\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\r\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\r\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\r\n\r\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\r\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\r\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\r\n\r\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\r\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\r\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public multiply(vector: Vector3f): Vector3f {\r\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\r\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\r\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\r\n    }\r\n}","import { Sphere } from '../math/Sphere';\r\nimport { Vector4f } from '../math/index';\r\nimport { BoundingVolume } from '../math/BoundingVolume';\r\nimport Plane from \"../math/Plane\";\r\nimport { Matrix4f } from \"../math/Matrix4f\";\r\nimport { Vector3f } from \"../math/Vector3f\";\r\n\r\nexport class FrustumCuller {\r\n\r\n    private planes: Array<Plane>;\r\n    private pos: Vector4f;\r\n    private normals: Array<Vector4f>;\r\n    private near: number;\r\n    private far: number;\r\n\r\n    public constructor() {\r\n        this.planes = new Array<Plane>();\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            this.planes.push(new Plane(new Vector4f(0, 0, 0, 0), 0));\r\n        }\r\n\r\n        this.pos = new Vector4f(0, 0, 0, 0);\r\n\r\n        const DISTANCE = 192;\r\n\r\n        let SCREEN_HEIGHT = 320 / 2;\r\n        let SCREEN_WIDTH = 200 / 2;\r\n\r\n        let HORIZONTAL_FIELD_OF_VIEW = 2.0 * Math.atan(SCREEN_HEIGHT / (2.0 * DISTANCE));\r\n        let VERTICAL_FIELD_OF_VIEW = 2.0 * Math.atan(SCREEN_WIDTH / (2.0 * DISTANCE));\r\n\r\n        let HALF_HORIZONTAL_FOV = HORIZONTAL_FIELD_OF_VIEW * 1.0;\r\n        let HALF_VERTICAL_FOV = VERTICAL_FIELD_OF_VIEW * 1.0;\r\n\r\n        const NEAR_DISTANCE: number = 1.7;\r\n        const FAR_DISTANCE: number = 30.0;\r\n\r\n        this.near = NEAR_DISTANCE;\r\n        this.far = FAR_DISTANCE;\r\n\r\n        this.normals = [\r\n            new Vector4f(Math.cos(-HALF_HORIZONTAL_FOV), 0, Math.sin(-HALF_HORIZONTAL_FOV), 0.0),\r\n            new Vector4f(-Math.cos(HALF_HORIZONTAL_FOV), 0, -Math.sin(HALF_HORIZONTAL_FOV), 0.0),\r\n            new Vector4f(0, -Math.cos(HALF_VERTICAL_FOV), -Math.sin(HALF_VERTICAL_FOV), 0.0),\r\n            new Vector4f(0, Math.cos(-HALF_VERTICAL_FOV), Math.sin(-HALF_VERTICAL_FOV), 0.0),\r\n            new Vector4f(0.0, 0.0, -1.0, 0.0),\r\n            new Vector4f(0.0, 0.0, 1.0, 0.0)\r\n        ];\r\n    }\r\n\r\n    // precompute normal vectors in constructor\r\n    // dont create temp objects\r\n    public updateFrustum(modelViewMatrix: Matrix4f, position: Vector3f): void {\r\n        const inverseRotation = modelViewMatrix.getInverseRotation();\r\n\r\n        inverseRotation.multiplyHomArr(this.normals[0], this.planes[0].normal); // left\r\n        inverseRotation.multiplyHomArr(this.normals[1], this.planes[1].normal); // right\r\n        inverseRotation.multiplyHomArr(this.normals[2], this.planes[2].normal); // bottom\r\n        inverseRotation.multiplyHomArr(this.normals[3], this.planes[3].normal); // top\r\n        inverseRotation.multiplyHomArr(this.normals[4], this.planes[4].normal); // near\r\n        inverseRotation.multiplyHomArr(this.normals[5], this.planes[5].normal); // far\r\n\r\n        this.pos.x = -position.x;\r\n        this.pos.y = -position.y;\r\n        this.pos.z = -position.z;\r\n\r\n        this.planes[0].distance = -this.planes[0].normal.dot(this.pos);\r\n        this.planes[1].distance = -this.planes[1].normal.dot(this.pos);\r\n        this.planes[2].distance = -this.planes[2].normal.dot(this.pos);\r\n        this.planes[3].distance = -this.planes[3].normal.dot(this.pos);\r\n        this.planes[4].distance = -this.planes[4].normal.dot(this.pos) + this.near;\r\n        this.planes[5].distance = -this.planes[3].normal.dot(this.pos) - this.far;\r\n    }\r\n\r\n    public isPotentiallyVisible(boundingVolume: Sphere): boolean {\r\n        for (let i = 0; i < this.planes.length; i++) {\r\n            if (!boundingVolume.isInsidePositiveHalfSpace(this.planes[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n","\nimport { FrustumCuller } from './clustered-culling/FrustumCuller';\nimport { ComputationalGeometryUtils } from './math/Geometry';\n\nimport { Sphere } from './math/Sphere';\nimport { CameraKeyFrame } from './animation/CameraKeyFrame';\nimport { CameraAnimator } from './animation/CameraAnimator';\n\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\n\n/**\n * 3d polygon clipping:\n * http://www.gamers.org/dEngine/quake/papers/ddjclip.html\n * http://www.jagregory.com/abrash-black-book/#chapter-65-3-d-clipping-and-other-thoughts\n * http://downloads.gamedev.net/pdf/gpbb/gpbb65.pdf\n * http://www.cubic.org/docs/3dclip.htm\n * http://fabiensanglard.net/polygon_codec/\n * \n * http://fabiensanglard.net/quake2/quake2_software_renderer.php\n * \n * http://www.xbdev.net/maths_of_3d/rasterization/clipping/index.php\n * http://www.gamasutra.com/view/news/168577/Indepth_Software_rasterizer_and_triangle_clipping.php\n * https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/projection-matrix-GPU-rendering-pipeline-clipping\n * http://www.songho.ca/opengl/gl_pipeline.html\n * http://www.songho.ca/opengl/gl_transform.html\n * http://www.songho.ca/opengl/gl_camera.html\n * http://www.songho.ca/opengl/gl_matrix.html\n * http://www.songho.ca/math/homogeneous/homogeneous.html\n */\nimport Texture from './Texture';\nimport Point from './Point';\n\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { BasicCamera, ControllableCamera } from './camera';\n\nimport RandomNumberGenerator from './RandomNumberGenerator';\n\ndeclare function require(string): string;\nlet json = require('./assets/f16.json');\nlet bunnyJson = <any>require('./assets/bunny.json');\nlet worldJson = <any>require('./assets/world2.json');\n\nlet torusJson = <any>require('./assets/stravaganza.json');\nlet gearJson = <any>require('./assets/gear.json');\nlet roomJson = <any>require('./assets/room.json');\nlet hoodlumJson = <any>require('./assets/hoodlum.json');\nlet labJson = <any>require('./assets/lab.json');\nlet bakedJson = <any>require('./assets/abstract.json');\nlet platonian = <any>require('./assets/platonian_backed.json');\n\nlet hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nabstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n\nclass RightEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n\nclass LeftEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n\nclass TopEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n\nclass BottomEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n\nexport default class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    private x: number = 0;\n    public cullMode: CullFace = CullFace.BACK;\n\n    private camera: ControllableCamera;\n\n    private obj: any;\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj2: any;\n    private blenderObj3: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    private blenderObj8: any;\n    private blenderObj9: any;\n    private bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setBob(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.camera = new ControllableCamera();\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n\n        this.obj = this.createObject();\n        this.bunnyObj = this.createBunny();\n        this.blenderObj = this.getBlenderScene(worldJson);\n        this.blenderObj2 = this.getBlenderScene(torusJson, false);\n        this.blenderObj3 = this.getBlenderScene(gearJson, false);\n        this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        this.blenderObj6 = this.getBlenderScene(labJson, false);\n        this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n        this.blenderObj8 = this.getBlenderScene(bakedJson, false);\n        this.blenderObj9 = this.getBlenderScene(platonian, false);\n\n\n        this.sphere = this.createSphere();\n\n        this.plane = this.createPlane();\n        this.cylinder = this.createCylinder();\n        this.cylinder2 = this.createCylinder2(texture);\n        this.sphereDisp = this.createSphereDistplaced(texture);\n        this.sphereDisp2 = this.createSphereDistplaced(texture2);\n\n\n        /*\n        document.addEventListener(\"keydown\", (e) => {\n            console.log('key pressed');\n            if (e.which == 38) this.camera.moveForward(0.2, 1.0);\n            if (e.which == 40) this.camera.moveBackward(0.2, 1.0);\n            if (e.which == 37) this.camera.turnLeft(0.05, 1.0);\n            if (e.which == 39) this.camera.turnRight(0.05, 1.0);\n        });*/\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearH(col: number, h: number) {\n        let color: number = col;\n        let count: number = this.width * h;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearCol(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public readPixel2(fb: Uint32Array, x: number, y: number, color: number): number {\n        return fb[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawLens(texture: Texture, tex: Texture, time: number) {\n\n        const radius = 47;\n        let xoff = 320 / 2 + Math.cos(6 * time * 0.0002) * (320 / 2 - 50);\n        let yoff = 200 / 2 + Math.sin(4 * time * 0.0002) * (200 / 2 - 50);\n\n        // TODO: precalculate displacement in an array\n        for (let y = -radius; y <= radius; y++) {\n            for (let x = -radius; x <= radius; x++) {\n                if (x * x + y * y <= radius * radius) {\n\n                    let xx = Math.round(x + xoff);\n                    let yy = Math.round(y + yoff);\n\n                    let z = 1 + Math.sqrt(radius * radius - x * x - y * y) * 0.03;\n                    let xx2 = Math.round(x / z + xoff);\n                    let yy2 = Math.round(y / z + yoff);\n                    let col = texture.texture[xx2 + yy2 * 320];\n\n                    let index = xx + yy * 320;\n                    this.framebuffer[index] = col;\n                }\n            }\n        }\n\n        this.drawTexture(Math.round(xoff - 50), Math.round(yoff - 50), tex, 1.0);\n    }\n\n    public cinematicScroller(texture: Texture, time: number) {\n        let scrollText: Array<string> = [\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '',\n            'YOU HAVE BEEN WATCHING',\n            '',\n            'D A R K   M A T T E R',\n            '',\n            'A JAVASCRIPT DEMO MADE FOR',\n            'NORDLICHT 2018',\n            '',\n            'CREDITS',\n            '',\n            'CODE BY',\n            'TRIGGER',\n            '',\n            'GRAFICS BY',\n            'PREMIUM',\n            '',\n            'MUSIC BY',\n            'VIRGILL'\n        ];\n        time = time * 0.6;\n\n        let scrollerOffset = Math.round(this.interpolate(0, 250, time % 255) * 8);\n\n        for (let i = 1; i < 200 / 8; i++) {\n            let text = scrollText[(i + (time / 255) | 0) % scrollText.length];\n            let x = (320 / 2 - text.length * 8 / 2) | 0;\n            let y = 8 * i - scrollerOffset;\n            // TODO: proper text clipping to rect\n            // maybe just for first and last row\n            this.drawText(x, y, text, texture);\n        }\n    }\n\n    public starField() {\n        // plus razor logo\n    }\n\n\n    // Crossfade 2 effects\n    public crossFade() {\n\n    }\n\n    // optimization:\n    // - downscale image to half the size before bluring\n    // render result to texture in order to not blur the logo\n    tmp = new Uint32Array(320 * 200);\n    tmp2 = new Uint32Array(320 * 200);\n    public blur() {\n        let scale = 1 / (3.1);\n        let r: number = 0;\n        let g: number = 0;\n        let b: number = 0;\n        let index = 1 + 320;\n        let sumIndex = 320;\n        let color: number;\n        for (let y = 0; y < 198; y++) {\n            for (let x = 0; x < 318; x++) {\n                color = this.framebuffer[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex++;\n\n                color = this.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                color = this.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                sumIndex -= 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp[index] = r | g << 8 | b << 16 | 255 << 24;\n                index++;\n            }\n            sumIndex += 2;\n            index += 2;\n        }\n\n        index = 320 + 1;\n        sumIndex = 1;\n        for (let x = 1; x < 320 - 1; x++) {\n            //   index = x + 320;\n            sumIndex = x;\n            for (let y = 0; y < 198; y++) {\n                color = this.tmp[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex += 320;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += 320;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += 320;\n\n                sumIndex -= 320 * 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp2[index] = r | g << 8 | b << 16 | 255 << 24;\n                index += 320;\n            }\n            index += -198 * 320 + 1;\n        }\n\n        /*\n                for (let y = 1; y < 200 - 1; y++) {\n                    for (let x = 1; x < 320 - 1; x++) {\n                        r = g = b = 0;\n                        for (let i = -1; i <= 1; i++) {\n                            let color = this.readPixel2(this.tmp, x, y + i, 0);\n                            r += color & 0xff;\n                            g += color >> 8 & 0xff;\n                            b += color >> 16 & 0xff;\n                        }\n                        r *= scale;\n                        g *= scale;\n                        b *= scale;\n                        this.tmp2[x + y * 320] = r | g << 8 | b << 16 | 255 << 24;\n                    }\n                }*/\n        this.fastFramebufferCopy(this.framebuffer, this.tmp2);\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    private interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public drawRaster() {\n        let colorLUT = new Array<number>();\n        for (let i = 0; i < 16; i++) {\n            let shade = (Math.sin(Math.PI * i / 15) * 255) | 0;\n            let color = shade << 16 | shade << 8 | shade | 255 << 24;\n            colorLUT.push(color);\n        }\n\n        let pos = ((Math.sin(Date.now() * 0.002) + 1) / 2 * (200 - 16)) | 0;\n        for (let i = 0; i < 16; i++) {\n            this.framebuffer.fill(colorLUT[i], 320 * (pos + i), 320 * (pos + i) + 320);\n        }\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public draw3dBobs() {\n\n    }\n\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n        /*\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        while (--i) {\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n        }\n        */\n    }\n\n    public drawBobs(texture: Texture, time: number) {\n        let scaledTime = time * 0.2;\n        const BALL_SIZE = 16;\n        for (let i = 0; i < 30; i++) {\n            let x = (Math.cos(3 * scaledTime * 0.002 + i * 0.11) * (320 / 2 - BALL_SIZE / 2)) | 0;\n            let y = (Math.sin(4 * scaledTime * 0.002 + i * 0.11) * (200 / 2 - BALL_SIZE / 2)) | 0;\n            //this.drawTexture(320 / 2 - BALL_SIZE / 2 + x, 200 / 2 - BALL_SIZE / 2 + y, texture, 1.0);\n            this.drawTextureNoClipAlpha(320 / 2 - BALL_SIZE / 2 + x, 200 / 2 - BALL_SIZE / 2 + y, texture);\n        }\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public raveMoview(elapsedTime: number, texture: Texture): void {\n\n\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, -(((elapsedTime / 200) | 0) % 11) * 200);\n\n    }\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public glitchScreen(elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.0003) * 0.5 + 0.5);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        let texture2 = new Texture();\n        texture2.height = 200;\n        texture2.width = 320;\n        texture2.texture = this.framebuffer;\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                this.drawTextureRect(20 * (16 - x), 20 * ((16 * rng.getFloat()) | 0), 20 * x, 20 * y, 20, 20, texture2, 0.1 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < 16; x++) {\n                for (let y = 0; y < 10; y++) {\n                    this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n\n\n        let rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            let scale = rng2.getFloat() * glitchFactor;\n            let off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * 320;\n                let glIndex = yStart * 320 + 320 - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    this.framebuffer[index++] = this.tmpGlitch[glIndex++];\n                }\n\n\n                glIndex = yStart * 320;\n                let count = 320 - offset;\n\n                for (let i = 0; i < count; i++) {\n                    this.framebuffer[index++] = this.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public floodFill(texture: Texture, time: number) {\n\n        let pos = ((time * 0.02) | 0) % 200;\n\n        let index = 320 * 200;\n\n        for (let y = 0; y < pos; y++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[index] = texture.texture[index];\n                index--;\n            }\n        }\n\n        let index2 = index;\n        for (let y = 0; y < 200 - pos; y++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[index] = texture.texture[index2];\n                index--;\n                index2--;\n            }\n            index2 += 320;\n        }\n    }\n\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = this.getBilinearFilteredPixel2(texture, xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = this.getBilinearFilteredPixel2(texture, xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n\n\n    /**\n     * Span Renderer\n     * \n     * http://stackoverflow.com/questions/27639005/how-to-copy-static-files-to-build-directory-with-webpack\n     */\n    drawSpan(dist: number, xpos: number, ypos: number, scale: number, texture: Texture) {\n        let framebufferIndex = xpos + ypos * this.width;\n        let textureIndex = (((ypos - Date.now() * 0.029) | 0) & 0xff) * texture.width;\n        let textureForwardDifference = texture.width / dist;\n        let hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            let color = texture.texture[textureIndex | 0];\n\n            let r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            let g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            let b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            this.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        /* return new Vector3f(Math.round((320 / 2) + (t1.x * 1.5 / (-t1.z * 0.0078))),\n             // negation breaks winding and cull mode!!\n             Math.round((200 / 2) - (t1.y * 1.5 / (-t1.z * 0.0078))), t1.z);*/\n        return new Vector3f(Math.round((320 / 2) + (192 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 1.5 / (-t1.z * 0.0078))), t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    /**\n     * https://mikro.naprvyraz.sk/docs/\n     * http://simonstechblog.blogspot.de/2012/04/software-rasterizer-part-1.html\n     * http://www.lysator.liu.se/~mikaelk/doc/perspectivetexture/\n     * http://chrishecker.com/Miscellaneous_Technical_Articles\n     * http://www.gamasutra.com/blogs/MichaelKissner/20160112/263097/Writing_a_Game_Engine_from_Scratch__Part_4_Graphics_Library.php\n     * https://www.codeproject.com/Articles/170296/D-Software-Rendering-Engine-Part-I\n     * https://www.davrous.com/2013/06/13/tutorial-series-learning-how-to-write-a-3d-soft-engine-from-scratch-in-c-typescript-or-javascript/\n     * https://www.youtube.com/playlist?list=PLEETnX-uPtBXP_B2yupUKlflXBznWIlL5\n     * https://www.youtube.com/watch?v=cQY3WTKRI7I\n     * https://www.youtube.com/playlist?list=PLEETnX-uPtBUbVOok816vTl1K9vV1GgH5\n     * https://www.youtube.com/playlist?list=PLEETnX-uPtBUG4iRqc6bEBv5uxMXswlEL\n     * https://www.youtube.com/playlist?list=PLbCDZQXIq7uYaf263gr-zb0wZGoCL-T5G\n     * https://www.youtube.com/watch?v=9A5TVh6kPLA\n     * http://joshbeam.com/articles/triangle_rasterization/\n     * http://developers-club.com/posts/257107/\n     * https://www.codeproject.com/Articles/170296/3D-Software-Rendering-Engine-Part-I\n     * https://gamedev.stackexchange.com/questions/44263/fast-software-color-interpolating-triangle-rasterization-technique\n     * https://fgiesen.wordpress.com/2011/07/05/a-trip-through-the-graphics-pipeline-2011-part-5/\n     * http://insolitdust.sourceforge.net/code.html\n     */\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 200);\n    }\n\n    public debug(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let index: Array<number> = [\n            1, 2, 3, 3, 4, 1,\n            1 + 8, 2 + 8, 3 + 8, 3 + 8, 4 + 8, 1 + 8,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(-1.0, -1.0, 1.0), new Vector3f(1.0, -1.0, 1.0),\n            new Vector3f(1.0, 1.0, 1.0), new Vector3f(-1.0, 1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0),\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n\n            new Vector3f(-1.0, -1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(1.0, -1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n            new Vector3f(1.0, 1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(-1.0, 1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n            new Vector3f(-1.0, -1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(1.0, -1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n            new Vector3f(1.0, 1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(-1.0, 1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n        ];\n\n        let colorAr: Array<number> = [\n            255 << 24 | 255 << 0,\n            255 << 24 | 255 << 8,\n            255 << 24 | 255 << 16,\n            255 << 24 | 255 << 16 | 255,\n            255 << 24 | 255 << 16 | 255 << 8,\n            255 << 24 | 255 << 8 | 128,\n        ];\n\n        let scale = 3.2;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructZRotationMatrix(elapsedTime * 0.08));\n\n\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 9; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        for (let i = 0; i < index.length; i += 3) {\n            // TODO: use eye space triangles for backface culling\n            let col = 255 << 24 | 255 << 16;\n            let col2 = 255 << 24 | 255;\n\n            this.drawTriangleDDA(points2[index[i] - 1], points2[index[i + 1] - 1], points2[index[i + 2] - 1], colorAr[(((i) / 3) | 0) % 6]);\n        }\n    }\n\n\n\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n        let radius = (Math.sin(pos.z * 11 + Date.now() * 0.001) + 1) / 2 +\n            (Math.sin(pos.x * 11 + Date.now() * 0.001) + 1) / 3;\n        pos.x = pos.x + pos.x * radius;\n        pos.y = pos.y + pos.y * radius;\n        pos.z = pos.z + pos.z * radius;\n        return pos;\n    }\n\n\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawOldSchoolPlasma(elapsedTime: number): void {\n        let time = elapsedTime * 0.0007 * 1.0;\n        let lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        let radialWaveCenter = new Vector3f(470.0 / 2.0, 230.0 / 2.0, 0).add(new Vector3f(470.0 / 2.0 *\n            Math.sin(-time), 230.0 / 2.0 * Math.cos(-time), 0));\n\n        let difference = new Vector3f(0, 0, 0);\n        // TODO: implement sin/cos lookup tables plus starfield ;)\n        let index = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let directionalWave = Math.sin(((x * lineDirection.x + y * lineDirection.y) * 0.02 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                let radialWave = (Math.cos(difference.length() * 0.03) + 1.0) * 0.5;\n                let waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                let red = (Math.cos(Math.PI * waveSum / 0.5 + time) + 1.0) * 0.5 * 255;\n                let green = (Math.sin(Math.PI * waveSum / 0.5 + time) + 1.0) * 0.5 * 255;\n                let blue = (Math.sin(time) + 1.0) * 0.5 * 255;\n\n                this.framebuffer[index++] = 255 << 24 | blue << 16 | green << 8 | red;\n            }\n        }\n    }\n\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z;\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        // draw clip region\n        let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n        this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    // seems to habe a small bug\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == Framebuffer.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & Framebuffer.REGION_CODE_TOP) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & Framebuffer.REGION_CODE_BOTTOM) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & Framebuffer.REGION_CODE_RIGHT) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & Framebuffer.REGION_CODE_LEFT) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) == Framebuffer.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) != Framebuffer.REGION_CODE_CENTER;\n    }\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    public dec2bin(dec: number) {\n        return (dec >>> 0).toString(2);\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = Framebuffer.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= Framebuffer.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= Framebuffer.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= Framebuffer.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= Framebuffer.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n    public shadingSphere(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        // Create MV Matrix\n        let scale = 5.8;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -26 + 4 * Math.sin(elapsedTime * 0.7)).multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        normals.forEach(element => {\n            normals2.push(modelViewMartrix.multiplyHom(element));\n        });\n\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiplyHom(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z;\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.5, 0.5, 0.5, 0.0).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                this.drawTriangleDDA(v1, v2, v3, color);\n                //this.drawLineDDA(v1, v2, colLine);\n                //this.drawLineDDA(v1, v3, colLine);\n                //this.drawLineDDA(v3, v2, colLine);\n            }\n        }\n    }\n\n\n    private clearColorBuffer() {\n        this.clear();\n    }\n\n    public createObject() {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.mul(-1).normalize()); // normalize?\n        }\n\n        // Create class for objects\n        return {\n            points: points, normals: normals, index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        }\n    }\n\n    public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let index: Array<number> = [\n        ];\n\n        let points: Array<Vector3f> = [];\n        for (let y = 0; y < 256; y++) {\n            for (let x = 0; x < 256; x++) {\n                points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n            }\n        }\n\n        for (let y = 0; y < 256; y += 1) {\n            for (let x = 0; x < 256 - 1; x += 1) {\n                index.push(0 + x + (y * 256));\n                index.push(1 + x + (y * 256));\n            }\n        }\n\n        for (let x = 0; x < 256; x += 1) {\n            for (let y = 0; y < 256 - 1; y += 1) {\n\n                index.push(x + ((y + 0) * 256));\n                index.push(x + ((y + 1) * 256));\n            }\n        }\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n        let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x + xOff;\n            let y = transformed.y;\n            let z = transformed.z + zOff; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n\n        for (let i = 0; i < index.length; i += 2) {\n            let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n            let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    private getDodecahedronMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let phi = (1 + Math.sqrt(5)) * 0.5;\n        let a = 1;\n        let b = 1 / phi;\n        let c = 2 - phi;\n\n        points = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        index = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getIcosahedronMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let phi = (1 + Math.sqrt(5)) * 0.5;\n        let a = 0.5;\n        let b = a * 2 / (2 * phi);\n\n        points = [\n            new Vector4f(-b, 0, a), new Vector4f(b, 0, a), new Vector4f(-b, 0, -a), new Vector4f(b, 0, -a),\n            new Vector4f(0, a, b), new Vector4f(0, a, -b), new Vector4f(0, -a, b), new Vector4f(0, -a, -b),\n            new Vector4f(a, b, 0), new Vector4f(-a, b, 0), new Vector4f(a, -b, 0), new Vector4f(-a, -b, 0)\n        ];\n\n        index = [\n            1, 4, 0, 4, 9, 0, 4, 5, 9, 8, 5, 4,\n            1, 8, 4, 1, 10, 8, 10, 3, 8, 8, 3, 5,\n            3, 2, 5, 3, 7, 2, 3, 10, 7, 10, 6, 7,\n            6, 11, 7, 6, 0, 11, 6, 1, 0, 10, 1, 6,\n            11, 0, 9, 2, 11, 9, 5, 2, 9, 11, 2, 7\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getTrapezoidMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let a = 0.5;\n        let b = 0.05;\n        points = [\n            new Vector4f(-b, a, -b),\n            new Vector4f(b, a, -b),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(-b, a, b),\n            new Vector4f(b, a, b),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        index = [\n            0, 1, 2,\n            0, 2, 3,\n            5, 4, 7,\n            5, 7, 6,\n            1, 5, 6,\n            1, 6, 2,\n            4, 0, 3,\n            4, 3, 7,\n            4, 5, 1,\n            4, 1, 0\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getCubeMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let a = 0.5;\n\n        points = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        index = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getPyramidMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let phi = (1 + Math.sqrt(5)) * 0.5;\n        let a = 0.5;\n        let b = a * 2 / (2 * phi);\n\n        points = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        index = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getPlaneMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n\n        let a = 0.5;\n\n\n        points = [\n            new Vector4f(-a, 0, a),\n            new Vector4f(a, 0, a),\n            new Vector4f(a, 0, -a),\n            new Vector4f(-a, 0, -a),\n        ];\n\n        index = [\n            0, 1, 2, 2, 3, 0\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public reproduceRazorScene(elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        let camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n        let colLine = 255 << 24 | 255 << 8;\n\n        let model = this.getDodecahedronMesh();\n        this.drawObject(model, modelViewMartrix, 221, 96, 48);\n\n        let yDisplacement = -1.5;\n        let distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getIcosahedronMesh();\n        this.drawObject(model, modelViewMartrix, 239, 187, 115);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getCubeMesh()\n        this.drawObject(model, modelViewMartrix, 144, 165, 116);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getCubeMesh();\n        this.drawObject(model, modelViewMartrix, 191, 166, 154);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getPyramidMesh();\n        this.drawObject(model, modelViewMartrix, 125, 128, 146);\n\n        /**\n         * SHADOWS\n         */\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix));\n\n        this.drawObject(this.getDodecahedronMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix));\n\n        this.drawObject(this.getPyramidMesh(), modelViewMartrix, 48, 32, 24, true, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix))\n\n        this.drawObject(this.getCubeMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix))\n\n        this.drawObject(this.getCubeMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix));\n\n\n        this.drawObject(this.getIcosahedronMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n    private getBlenderScene(file: any, disp: boolean = true): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let index: Array<number> = new Array<number>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1-v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n\n                //points.push(new Vector4f(v.x, v.y, v.z).mul(0.5).add(new Vector4f(0,3.7,0,0)));\n            });\n\n            for (let x = 0; x < object.faces.length; x++) {\n                index.push(object.faces[x].vertices[0]);\n                index.push(object.faces[x].vertices[1]);\n                index.push(object.faces[x].vertices[2]);\n            }\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,\n                faces: object.faces,\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere,\n                name: object.name\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    /**\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawPlanedeformationTunnel(elapsedTime: number, texture: Texture, texture2: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist;\n                dist += elapsedTime * 0.02;\n                dist2 += elapsedTime * 0.039;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128 + elapsedTime * 0.0069;\n\n                let color1 = texture.texture[(dist2 & 0xff) + (angle & 0xff) * 255];\n                let color2 = texture2.texture[(dist & 0xff) + (angle & 0xff) * 255];\n\n                let alpha = 0.4;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((color1 >> 0) & 0xff) * (inverseAlpha) + (((color2) >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((color1 >> 8) & 0xff) * (inverseAlpha) + (((color2) >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((color1 >> 16) & 0xff) * (inverseAlpha) + ((color2 >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n\n    public drawParticleStreams(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            let radius = 2.8;\n            let radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                let x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                let y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                let z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                let transformed = this.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort(function (a, b) {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                //let size = -(2.0 * 192 / (element.z));\n                let size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    this.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n    public drawWormhole(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            let radius = 5.8;\n\n            for (let j = 0; j < num2; j++) {\n\n                let x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                let y = Math.cos(Math.PI * 2 / num2 * j) * radius + Math.cos(Math.PI * 2 / num * i) * 10;\n                let z = Math.sin(Math.PI * 2 / num2 * j) * radius + Math.sin(Math.PI * 2 / num * i) * 10;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(\n            Math.sin(-Math.PI * 0.5 + Math.PI * 2 / num * (elapsedTime * 0.004 * scale)) * 10,\n            Math.cos(-Math.PI * 0.5 + Math.PI * 2 / num * (elapsedTime * 0.004 * scale)) * 10\n            , -49).multiplyMatrix(\n\n                Matrix4f.constructYRotationMatrix(Math.PI * 0.5));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            //let size = -(2.0 * 192 / (element.z));\n            let size = -(1.3 * 192 / (element.z));\n            if (element.z < -4)\n                this.drawParticleNoDepth(\n                    Math.round(element.x - size / 2),\n                    Math.round(element.y - size / 2),\n                    Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-90, -55, element.z));\n        });\n    }\n\n    drawParticleTorus(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 300;\n        for (let i = 0; i < num; i++) {\n            let radi = 3.4 * (2 + Math.sin((i * Math.PI / (num / 2)) * 2 + elapsedTime * 0.0004));//*sinf(Time*0.0008f)));\n            let move = elapsedTime * 0.0015;\n            let x = radi * Math.cos(((move + i) * Math.PI / (num / 2)) * 7);\n            let y = radi * Math.cos(((move + i) * Math.PI / (num / 2)) * 4);\n            let z = radi * Math.sin(((move + i) * Math.PI / (num / 2)) * 7);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -20)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0003)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0003)));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(2.2 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x) - Math.round(size / 2),\n                Math.round(element.y) - Math.round(size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0);\n        });\n    }\n\n    /**\n     * todo:\n     * - better wavefront format that uses precomputed normals\n     * - maybe use groups for material and culling\n     * - use normal matrix instead of normalization during shading\n     * - do not create the scene every frame\n     * - create material class\n     * - use camera path :-)!!!!!\n     * - fix strange artefacts where geometry hits the plane\n     * \n     * @param {number} elapsedTime \n     * @memberof Framebuffer\n    \n     * \n     */\n    public drawBlenderScene(elapsedTime: number, texture: Texture, texture2?: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let keyFrames: Array<CameraKeyFrame> = [\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(0, 0, 0)),\n            new CameraKeyFrame(new Vector3f(5, 10, 10), new Vector3f(0, 0, 0.1)),\n            new CameraKeyFrame(new Vector3f(5, 10, 0), new Vector3f(1.5, -1, -0.2)),\n            new CameraKeyFrame(new Vector3f(5, 3, -10), new Vector3f(2.5, 0, -0.09)),\n            new CameraKeyFrame(new Vector3f(-5, 7, -10), new Vector3f(3.5, 0, 1)),\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(4, 0, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 3, -2), new Vector3f(3, -0.2, 0.)),\n            new CameraKeyFrame(new Vector3f(18, 2, -0), new Vector3f(2, -0.4, 0.)),\n            new CameraKeyFrame(new Vector3f(15, 4, -0), new Vector3f(2, -0.5, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 7, -10), new Vector3f(2.5, 0, -0.09)),\n        ];\n\n        let cameraAnimator = new CameraAnimator();\n        cameraAnimator.setKeyFrames(keyFrames);\n\n        let modelViewMartrix: Matrix4f = cameraAnimator.getViewMatrix(elapsedTime);\n\n\n        let pos = new Vector4f(-modelViewMartrix.m14, -modelViewMartrix.m24, -modelViewMartrix.m34);\n\n        let count = 0;\n\n        let frustumCuller = new FrustumCuller();\n        frustumCuller.updateFrustum(modelViewMartrix, cameraAnimator.pos);\n        let i = 0;\n\n        for (let j = 0; j < this.blenderObj.length; j++) {\n\n            let model = this.blenderObj[j];\n\n            if (frustumCuller.isPotentiallyVisible(model.boundingSphere)) {\n                this.drawObject2(model, modelViewMartrix, 144, 165, 116);\n                let colLine = 255 << 24 | 255 << 8;\n                // this.drawBoundingSphere(model.boundingSphere, modelViewMartrix, colLine);\n                // element.vis = true;\n                count++;\n            } else {\n                let colLine = 255 << 24 | 255;\n                // this.drawBoundingSphere(model.boundingSphere, modelViewMartrix, colLine);\n                //   element.vis = false;\n            }\n\n        }\n\n        if (texture2) {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(66);\n            for (let i = 0; i < 640; i++) {\n                //points.push(new Vector3f(rng.getFloat() * 30 - 15, rng.getFloat() * 10 - 1, rng.getFloat() * 30 - 15));\n                let x = rng.getFloat() * 30 - 15;\n                x += Math.sin(elapsedTime * 0.0008 + x) * 2;\n                let y = rng.getFloat() * 30 - 15;\n                y += Math.sin(elapsedTime * 0.0009 + y) * 2;\n                let z = rng.getFloat() * 30 - 15;\n                z += Math.sin(elapsedTime * 0.0011 + z) * 2;\n                points.push(new Vector3f(x, y, z));\n            }\n\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                let transformed = this.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort(function (a, b) {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                let size = -(3.1 * 192 / (element.z));\n                this.drawSoftParticle(\n                    Math.round(element.x - size * 0.5),\n                    Math.round(element.y - size * 0.5),\n                    Math.round(size), Math.round(size), texture2, 1 / element.z, 1.0);\n            });\n        }\n        this.drawText(8, 18 + 8, 'RENDERED OBJECTS: ' + count + '/' + this.blenderObj.length, texture);\n        let colred = 255 << 24 | 255 | 255 << 8 | 255 << 16;\n        let width = 320 / 2;\n        let height = 200 / 2;\n        //this.drawLineDDANoZ(new Vector3f(width / 2, height / 2, 0), new Vector3f(width / 2 + width, height / 2, -100), colred);\n        //this.drawLineDDANoZ(new Vector3f(width / 2, height / 2, 0), new Vector3f(width / 2, height / 2 + height, -100), colred);\n        //this.drawLineDDANoZ(new Vector3f(width / 2 + width, height / 2, 0), new Vector3f(width / 2 + width, height / 2 + height, -100), colred);\n        //this.drawLineDDANoZ(new Vector3f(width / 2, height / 2 + height, 0), new Vector3f(width / 2 + width, height / 2 + height, -100), colred);\n    }\n\n    /**\n     * Requirements for blender export:\n     * - Wavefront OBJ\n     * - \n     */\n    public drawBlenderScene2(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model = this.blenderObj2[0];\n        this.drawObject2(model, mv, 246, 165, 177);\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * this.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * this.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.blenderObj2[1];\n        this.drawObject2(model, mv, 186, 165, 197);\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.drawObject2(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.drawObject2(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.drawObject2(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.drawObject2(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.drawObject2(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.drawObject2(model, mv, 244, 100, 116, false, true);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n\n    public drawBlenderScene7(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = 1.0;\n        for (let j = 0; j < this.blenderObj8.length; j++) {\n            let model = this.blenderObj8[j];\n            this.drawObjectTexture(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n    }\n\n    public drawBlenderScene8(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -64 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.00035).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0003)));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = 1.0;\n        for (let j = 0; j < this.blenderObj9.length; j++) {\n            let model = this.blenderObj9[j];\n            this.drawObjectTexture(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n    }\n\n    public drawBlenderScene3(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -5).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        for (let i: number = 0; i < 10; i++) {\n            const scale = Math.sin(Math.PI * 2 / 10 * i + elapsedTime * 0.002) * 0.2 + 0.2 + 0.3;\n            let mv: Matrix4f = camera.multiplyMatrix(\n                Matrix4f.constructTranslationMatrix(0, ((i + elapsedTime * 0.0008) % 10) - 5, 0).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix((i * 0.36 + elapsedTime * 0.0016)).multiplyMatrix(\n                        Matrix4f.constructScaleMatrix(scale, 1, scale)\n                    )\n                )\n            );\n            let model = this.blenderObj3[0];\n            this.drawObject2(model, mv, 246, 165, 177);\n        }\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n\n    public drawBlenderScene4(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale = 0.1 * 2.1 * 2.1;\n        let factor = 2.1 - 0.09 - 0.09;\n        let fade = 0.09;\n        let dampFactor = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            let modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n            modelViewMartrix = Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(modelViewMartrix);\n\n            let mv = camera.multiplyMatrix(modelViewMartrix);\n            let model = this.blenderObj3[0];\n            this.drawObject2(model, mv, 246, 165, 177);\n        }\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n\n    public drawStarField(elapsedTime: number): void {\n        let darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        let lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        let backgroundColor = 255 << 24 | 87 << 16 | 62 << 8 | 47;\n\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        let stars = new Array<Vector3f>();\n        let stars2 = new Array<Vector3f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        this.clearCol(backgroundColor);\n        for (let i = 0; i < 100; i++) {\n            this.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % 320, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            this.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % 320, stars2[i].y, lightStarColor);\n        }\n    }\n\n    // TODO: implement fursutm culling here!\n    private isVisible(element: any): boolean {\n        return true;\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        // this.clearColorBuffer();\n        this.clearDepthBuffer();\n        // one line is missing due to polygon clipping in viewport!\n        let modelViewMartrix: Matrix4f;\n\n        let scale = 1.6;\n\n        // viewMatrix = this.camera.getViewMatrix();\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        //modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        /**\n         * TODO:\n         * - optimization\n         * - object with position, rotation, material, color\n         * - do not generate the object every frame!\n         * - no temp arrays per frame!\n         * - remove tempp matrix objects: instead store one global MV  matrix and manipulate it directly without generating temp amtrices every frame\n         * - backface culling\n         * - no lighting for culled triangles\n         * - only z clip if necessary (no clip, fully visible)\n         * - find the right time to compute the projection ( after transformation or after clipping to z plane? maybe hybrid?)\n         */\n\n        this.drawObject(this.obj, modelViewMartrix, 215, 30, 120);\n\n    }\n\n    private drawObject2(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, culling: boolean = false) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(obj.points[i], obj.points2[i]);\n        }\n\n        let lightDirection = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n        for (let i = 0; i < obj.faces.length; i++) {\n            let v1 = obj.points2[obj.faces[i].vertices[0]];\n            let v2 = obj.points2[obj.faces[i].vertices[1]];\n            let v3 = obj.points2[obj.faces[i].vertices[2]];\n\n            let normal = obj.normals2[obj.faces[i].normals[0]];\n\n            // if (this.isTriangleCCW(v1,v2,v3)) {\n            // 2d Backface culling is here not allowed because we did not project here!\n            // FIXME: find a robust way to cull without cracks!\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                let p1 = this.project(v1);\n                let p2 = this.project(v2);\n                let p3 = this.project(v3);\n\n                if (culling || this.isTriangleCCW(p1, p2, p3)) {\n                    // TODO: do lighting only if triangle is visible\n                    let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                    scalar = scalar * 0.85 + 0.15;\n                    let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                    if (noLighting) {\n                        color = 255 << 24 | red | green << 8 | blue << 16;\n                    }\n\n                    this.clipConvexPolygon(new Array<Vector3f>(p1, p2, p3), color, true);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) && !this.isInFrontOfNearPlane(v2) && !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                scalar = scalar * 0.85 + 0.15;\n                let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                if (noLighting) {\n                    color = 255 << 24 | red | green << 8 | blue << 16;\n                }\n                this.zClipTriangle(new Array<Vector3f>(v1, v2, v3), color);\n            }\n\n        }\n    }\n\n    private drawObjectTexture(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, culling: boolean = false) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(obj.points[i], obj.points2[i]);\n            obj.points2[i] = this.project(obj.points2[i]);\n        }\n\n        let vertexArray = new Array<Vertex>(new Vertex(), new Vertex(), new Vertex());\n        for (let i = 0; i < obj.faces.length; i++) {\n            let v1 = obj.points2[obj.faces[i].vertices[0]];\n            let v2 = obj.points2[obj.faces[i].vertices[1]];\n            let v3 = obj.points2[obj.faces[i].vertices[2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let color = 255;\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = obj.uv[obj.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = obj.uv[obj.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = obj.uv[obj.faces[i].uv[2]];\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n    private drawObject(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, oldLDir: boolean = true) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr2(obj.points[i], obj.points2[i]);\n        }\n\n        let lightDirection = oldLDir ? new Vector4f(0.5, 0.5, 0.3, 0.0).normalize() : new Vector4f(0.1, 0.1, -0.5, 0.0).normalize();\n\n        for (let i = 0; i < obj.index.length; i += 3) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            let normal = obj.normals2[i / 3];\n\n            // if (this.isTriangleCCW(v1,v2,v3)) {\n            // 2d Backface culling is here not allowed because we did not project here!\n            // FIXME: find a robust way to cull without cracks!\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                let p1 = this.project(v1);\n                let p2 = this.project(v2);\n                let p3 = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    // TODO: do lighting only if triangle is visible\n                    let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                    scalar = scalar * 0.85 + 0.15;\n                    let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                    if (noLighting) {\n                        color = 255 << 24 | red | green << 8 | blue << 16;\n                    }\n\n                    this.clipConvexPolygon(new Array<Vector3f>(p1, p2, p3), color, true);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) && !this.isInFrontOfNearPlane(v2) && !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                scalar = scalar * 0.85 + 0.15;\n                let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                if (noLighting) {\n                    color = 255 << 24 | red | green << 8 | blue << 16;\n                }\n                this.zClipTriangle(new Array<Vector3f>(v1, v2, v3), color);\n            }\n\n        }\n    }\n\n    NEAR_PLANE_Z = -1.7;\n\n    public isInFrontOfNearPlane(p: Vector3f): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        let ratio = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector3f(ratio * (p2.x - p1.x) + p1.x, ratio * (p2.y - p1.y) + p1.y, this.NEAR_PLANE_Z);\n    }\n\n    public zClipTriangle(subject: Array<Vector3f>, color: number): void {\n\n        let output = subject;\n\n        let input = output;\n        output = new Array<Vector3f>();\n        let S = input[input.length - 1];\n\n        for (let i = 0; i < input.length; i++) {\n            let point = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        let projected: Vector3f[] = output.map<Vector3f>((v) => {\n            return this.project(v);\n        })\n\n        if (output.length === 3 && !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (output.length === 4 && !this.isTriangleCCW2(projected[0], projected[1], projected[2], projected[3])) {\n            return;\n        }\n        //if (this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n        this.clipConvexPolygon(projected, color, true);\n        // }\n    }\n\n\n    private torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n\n    /**\n     * https://www.youtube.com/watch?v=VMD7fsCYO9o\n     * http://www.cs.jhu.edu/~misha/Fall16/13.pdf\n     * http://www.cubic.org/docs/3dclip.htm\n     * \n     * @param {number} elapsedTime \n     * @memberof Framebuffer\n     */\n    public shadingTorus2(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.09));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 25,\n            Math.sin(elapsedTime * 0.05) * 9, -24).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon(new Array<Vector3f>(v1, v2, v3), color, false);\n                } else {\n                    this.drawTriangleDDA(v1, v2, v3, color);\n                    //this.drawTriangleDDA2(v1, v2, v3, new Vector3f(0, 0, 0), new Vector3f(0, 16, 0), new Vector3f(16, 16, 0), color);\n                }\n            }\n        }\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    public shadingTorusDamp(elapsedTime: number, sync: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(1.0);\n            up = right.cross(tangent).normalize().mul(1.0);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(10));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n\n\n        for (let i = 0; i < 7; i++) {\n            let scale = 0.1 + 0.1 * i;\n\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035 + 0.3 * (4 - i)));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04 + 0.3 * (4 - i)));\n\n            /**\n             * Vertex Shader Stage\n             */\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n            for (let n = 0; n < normals.length; n++) {\n                normals2.push(modelViewMartrix.multiply(normals[n]));\n            }\n\n            let ukBasslineBpm = 130 / 2;\n            let ukBasslineClapMs = 60000 / ukBasslineBpm;\n            let smashTime = sync % ukBasslineClapMs;\n            let smash = (this.cosineInterpolate(0, 15, smashTime) - this.cosineInterpolate(15, 200, smashTime) +\n                0.4 * this.cosineInterpolate(200, 300, smashTime) - 0.4 * this.cosineInterpolate(300, 400, smashTime)\n            )\n                * 12;\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -88).multiplyMatrix(modelViewMartrix);\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z; // TODO: use translation matrix!\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) - (y / (-z * 0.0078));\n                // commented out because it breaks the winding. inversion\n                // of y has to be done after back-face culling in the\n                // viewport transform\n                // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            /**\n             * Primitive Assembly and Rasterization Stage:\n             * 1. back-face culling\n             * 2. viewport transform\n             * 3. scan conversion (rasterization)\n             */\n            for (let i = 0; i < index.length; i += 3) {\n\n                // Only render triangles with CCW-ordered vertices\n                // \n                // Reference:\n                // David H. Eberly (2006).\n                // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n                // p. 69. Morgan Kaufmann Publishers, United States.\n                //\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let normal = normals2[i / 3];\n                    let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize()))) + 0.2, 1.0);\n                    let color = 255 << 24 | (scalar * 136) << 16 | (scalar * 215) << 8 | (scalar * 244);\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n                        this.clipConvexPolygon(new Array<Vector3f>(v1, v2, v3), color, false);\n                    } else {\n                        this.drawTriangleDDA(v1, v2, v3, color);\n                        //this.drawTriangleDDA2(v1, v2, v3, new Vector3f(0, 0, 0), new Vector3f(0, 16, 0), new Vector3f(16, 16, 0), color);\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    public shadingTorus5(elapsedTime: number, sync: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction2(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction2(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(0.4);\n            up = right.cross(tangent).normalize().mul(0.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(10));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        let ukBasslineBpm = 130 / 2;\n        let ukBasslineClapMs = 60000 / ukBasslineBpm;\n        let smashTime = sync % ukBasslineClapMs;\n        let smash = (this.cosineInterpolate(0, 15, smashTime) - this.cosineInterpolate(15, 200, smashTime) +\n            0.4 * this.cosineInterpolate(200, 300, smashTime) - 0.4 * this.cosineInterpolate(300, 400, smashTime)\n        )\n            * 12;\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 20,\n            Math.sin(elapsedTime * 0.05) * 8 - smash, -28).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon(new Array<Vector3f>(v1, v2, v3), color, false);\n                } else {\n                    this.drawTriangleDDA(v1, v2, v3, color);\n                    //this.drawTriangleDDA2(v1, v2, v3, new Vector3f(0, 0, 0), new Vector3f(0, 16, 0), new Vector3f(16, 16, 0), color);\n                }\n            }\n        }\n    }\n\n\n    public torusTunnel(elapsedTime: number, sync: number, texture: Texture): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize());\n        }\n\n        let scale = 1.0;\n\n        let frame = this.torusFunction3(elapsedTime * 0.02);\n        let frame2 = this.torusFunction3(elapsedTime * 0.02 + 0.01);\n\n        let tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize()\n        let right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        let translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        let rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        let finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        let model: any = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n        // model = this.getDodecahedronMesh();\n\n        this.drawObject(model, modelViewMartrix, 221, 96, 48, false, false);\n\n\n        let ppoints = new Array<Vector3f>();\n        const num = 40;\n        const STEPS22 = 8 * 2;\n        for (let j = 0; j < num; j++) {\n            let frame = this.torusFunction3(j * 2 * Math.PI / num);\n            let frame2 = this.torusFunction3(j * 2 * Math.PI / num + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(10.4);\n            up = right.cross(tangent).normalize().mul(10.4);\n\n            for (let r = 0; r < STEPS22; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS22)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS22))).add(frame);\n                ppoints.push(new Vector3f(pos.x, pos.y, pos.z));\n            }\n\n        }\n\n        let ppoints2: Array<Vector3f> = new Array<Vector3f>(ppoints.length);\n        ppoints.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            ppoints2.push(transformed);\n        });\n\n        ppoints2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        ppoints2.forEach(element => {\n            //let size = -(2.0 * 192 / (element.z));\n            let size = -(2.3 * 192 / (element.z));\n            if (element.z < -4)\n                this.drawParticle(\n                    Math.round(element.x - size / 2),\n                    Math.round(element.y - size / 2),\n                    Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-90, -55, element.z));\n        });\n\n    }\n\n\n    public shadingTorus4(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector3f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertexArray = new Array<Vertex>(new Vertex(), new Vertex(), new Vertex());\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.2, 0.2, 1).normalize())) * 255), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = textCoords[index[i]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = textCoords[index[i + 1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = textCoords[index[i + 2]];\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector3f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n\n\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n                normals.push(frame.sub(pos).normalize());\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n\n\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n\n    public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n\n        // this.wBuffer.fill(100);\n\n        let result = this.sphereDisp2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Optimization:\n     * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n     * - use delta step method from black art of 3d programming\n     * - generate object only once\n     * - dont use temp arrays / instead use always the same array preallocated\n     */\n\n    public createBunny(): any {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        bunnyJson.vertices.forEach(x => {\n            points.push(new Vector3f(x.x, x.y, x.z));\n        });\n\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        bunnyJson.normals.forEach(x => {\n            normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n        });\n\n        let index: Array<number> = bunnyJson.faces;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < points.length; i++) {\n            points2.push(new Vector3f(0, 0, 0));\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals2.push(new Vector3f(0, 0, 0));\n        }\n\n        let object = {\n            index: index,\n            points: points,\n            normals: normals,\n            points2: points2,\n            normals2: normals2\n        };\n\n        return object;\n    }\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            // this is the bottleneck: 20 -> 48 fps speedup\n            // when normalization is removed!\n            // solution: dont use MV for normal transformation\n            // use normal matrix instead\n            // normalMatrix : transpose(inverse(MV))\n\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n\n\n    public fakeSphere(normal: Vector3f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n\n    }\n    public shadingTorus3(elapsedTime: number): void {\n        let points: Array<Vector3f> = [];\n        const STEPS = 15 * 2;\n        const STEPS2 = 12 * 2;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let scale = 1.2;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.09));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 25,\n            Math.sin(elapsedTime * 0.05) * 9, -34).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < points2.length; i++) {\n            let v1 = points2[i];\n            let color = 0xffbbffbb;\n            if (v1.x > Framebuffer.minWindow.x && v1.x < Framebuffer.maxWindow.x &&\n                v1.y > Framebuffer.minWindow.y && v1.y < Framebuffer.maxWindow.y) {\n                this.drawPixel(v1.x, v1.y, color);\n            }\n        }\n    }\n\n\n\n    // Sutherland-Hodgman\n    // http://www.sunshine2k.de/coding/java/SutherlandHodgman/SutherlandHodgman.html\n    // http://www.cubic.org/docs/3dclip.htm\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightEdge(),\n        new LeftEdge(),\n        new BottomEdge(),\n        new TopEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     * https://www.npmjs.com/package/npm-check-updates\n     * \n     * @param {Vector3f} v1 \n     * @param {Vector3f} v2 \n     * @param {Vector3f} v3 \n     * @param {number} color \n     * @returns {void} \n     * @memberof Framebuffer\n     */\n    public clipConvexPolygon(subject: Array<Vector3f>, color: number, clipping: boolean = true): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.drawTriangleDDA(output[0], output[1 + i], output[2 + i], color);\n        }\n    }\n\n\n    public clipConvexPolygon2(subject: Array<Vertex>, color: number): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.drawTriangleDDA2(output[0], output[1 + i], output[2 + i], color);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    // TODO: create interesting pattern!\n    public led(elapsedTime: number, texture: Texture): void {\n        let time = elapsedTime * 0.0007 * 1.0;\n        let lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        let radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        let difference: Vector3f = new Vector3f(0, 0, 0);\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                let radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                let waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n    public shadingTorus(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                this.drawTriangleDDA(v1, v2, v3, color);\n            }\n        }\n    }\n\n    /**\n     * Full Pipeline:\n     * https://www.ntu.edu.sg/home/ehchua/programming/opengl/CG_BasicsTheory.html\n     * http://www.songho.ca/index.html\n     * https://en.wikipedia.org/wiki/Graphics_pipeline\n     * https://en.wikipedia.org/wiki/Clipping_(computer_graphics)\n     * https://www.ntu.edu.sg/home/ehchua/programming/opengl/CG_BasicsTheory.html\n     * http://www.gamasutra.com/blogs/MichaelKissner/20160112/263097/Writing_a_Game_Engine_from_Scratch__Part_4_Graphics_Library.php\n     * culling:\n     * https://developer.tizen.org/development/guides/native-application/graphics/opengl-es/primitive-assembly-and-rasterization\n     * assumption:\n     * By default, vertices of every 3D triangle are in a counter-clockwise (CCW) order\n     */\n    public shadingDemo(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let index: Array<number> = [\n            1, 2, 3, 4, 1, 3,\n            5, 7, 6, 8, 7, 5,\n\n            2, 6, 7, 7, 3, 2,\n            5, 1, 4, 4, 8, 5,\n\n            4, 3, 7, 7, 8, 4,\n            1, 6, 2, 5, 6, 1\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(-1.0, -1.0, 1.0), new Vector3f(1.0, -1.0, 1.0),\n            new Vector3f(1.0, 1.0, 1.0), new Vector3f(-1.0, 1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0),\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n        ];\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1] - 1].sub(points[index[i] - 1]).cross(points[index[i + 2] - 1].sub(points[index[i] - 1]));\n            normals.push(normal);\n        }\n\n\n        let colorAr: Array<number> = [\n            255 << 24 | 255 << 0,\n            255 << 24 | 255 << 8,\n            255 << 24 | 255 << 16,\n            255 << 24 | 255 << 16 | 255,\n            255 << 24 | 255 << 16 | 255 << 8,\n            255 << 24 | 255 << 8 | 128,\n        ];\n\n        let scale = 3.2;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage:\n         * 1. Local Space -> World Space -> Eye Space -> Clip Space -> NDC Space -> Screen Space\n         * 2. Computes Lighting per Vertex\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        normals.forEach(element => {\n            normals2.push(modelViewMartrix.multiply(element));\n        });\n\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 9; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n            /**\n             * Only render triangles with CCW-ordered vertices\n             * \n             * Reference:\n             * David H. Eberly (2006).\n             * 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n             * p. 69. Morgan Kaufmann Publishers, United States.\n             */\n            let v1 = points2[index[i] - 1];\n            let v2 = points2[index[i + 1] - 1];\n            let v3 = points2[index[i + 2] - 1];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let normal = normals2[i / 3];\n\n                let light = new Vector3f(0.5, 0.5, 0.5);\n                let ambient = new Vector3f(50, 100, 50);\n                let diffuse = new Vector3f(90, 90, 90).mul(Math.max(0.0, normal.normalize().dot(light.normalize())));\n                let reflection = new Vector3f(0, 0, 1).sub(light.mul(-1).normalize());\n                // http://www.lighthouse3d.com/tutorials/glsl-tutorial/directional-lights-per-vertex-ii/\n                let specular = new Vector3f(0, 0, 0);\n                let phong: Vector3f = ambient.add(diffuse).add(specular);\n                let color = 255 << 24 | (phong.z & 0xff) << 16 | (phong.y & 0xff) << 8 | (phong.x & 0xff);\n                this.drawTriangleDDA(v1, v2, v3, color);\n            }\n        }\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     * \n     * @private\n     * @param {{ x: number, y: number, z: number }} v1 \n     * @param {{ x: number, y: number, z: number }} v2 \n     * @param {{ x: number, y: number, z: number }} v3 \n     * @returns {boolean} \n     * @memberof Framebuffer\n    \n     * \n     */\n    private isTriangleCCW(v1: { x: number, y: number, z: number }, v2: { x: number, y: number, z: number }, v3: { x: number, y: number, z: number }): boolean {\n        let det: number =  //(v2.x - v1.x) * (v3.y - v1.y) - (v2.y - v1.y) * (v3.x - v1.x);\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    private isTriangleCCW2(v1: { x: number, y: number, z: number }, v2: { x: number, y: number, z: number }, v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        let det: number = //(v2.x - v1.x) * (v3.y - v1.y) - (v2.y - v1.y) * (v3.x - v1.x) - (v3.y - v2.y) * (v4.x - v2.x);\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public scene10(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let index: Array<number> = [\n            1, 2, 3, 4, 1, 3,\n            5, 7, 6, 8, 7, 5,\n\n            2, 6, 7, 7, 3, 2,\n            5, 1, 4, 4, 8, 5,\n\n            4, 3, 7, 7, 8, 4,\n            1, 6, 2, 5, 6, 1\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(-1.0, -1.0, 1.0), new Vector3f(1.0, -1.0, 1.0),\n            new Vector3f(1.0, 1.0, 1.0), new Vector3f(-1.0, 1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0),\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n        ];\n\n        let colorAr: Array<number> = [\n            255 << 24 | 255 << 0,\n            255 << 24 | 255 << 8,\n            255 << 24 | 255 << 16,\n            255 << 24 | 255 << 16 | 255,\n            255 << 24 | 255 << 16 | 255 << 8,\n            255 << 24 | 255 << 8 | 128,\n        ];\n\n        let scale = 3.2;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        for (let i = 0; i < 2; i++) {\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + i * 4 - 2;\n                let y = transformed.y;\n                let z = transformed.z - 9; // TODO: use translation matrix!\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) - (y / (-z * 0.0078));\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            });\n\n            for (let i = 0; i < index.length; i += 3) {\n                if (points2[index[i + 1] - 1].sub(points2[index[i] - 1]).cross(points2[index[i + 2] - 1].sub(points2[index[i] - 1])).z < 0) {\n\n                    // TODO: use eye space triangles for backface culling\n                    let col = 255 << 24 | 255 << 16;\n                    let col2 = 255 << 24 | 255;\n\n\n                    this.drawTriangleDDA(points2[index[i] - 1], points2[index[i + 1] - 1], points2[index[i + 2] - 1], colorAr[(((i) / 6) | 0) % 6]);\n\n                }\n            }\n        }\n\n    }\n\n    public scene9(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let data: any = json;\n\n        let index: Array<number> = data.faces;\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        data.vertices.forEach(x => {\n            points.push(new Vector3f(x.x, x.y, x.z));\n        });\n\n        let scale = 4.0;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 9; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        let color = 255 | 255 << 16 | 255 << 24;\n\n        for (let i = 0; i < index.length; i += 3) {\n            // backface culling\n            if (points2[index[i + 1] - 1].sub(points2[index[i] - 1]).cross(points2[index[i + 2] - 1].sub(points2[index[i] - 1])).z < 0) {\n                let normal = points[index[i + 1] - 1].sub(points[index[i] - 1]).cross(points[index[i + 2] - 1].sub(points[index[i] - 1])).mul(-1);\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(1, -1, 0).normalize())) * 155), 255) + 100;\n\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n                let col3 = 255 << 24 | 0;\n                this.drawTriangleDDA(points2[index[i] - 1], points2[index[i + 1] - 1], points2[index[i + 2] - 1], color);\n                //       this.drawLineDDA(points2[index[i] - 1], points2[index[i + 1] - 1], col3);\n                //      this.drawLineDDA(points2[index[i + 1] - 1], points2[index[i + 2] - 1], col3);\n                //    this.drawLineDDA(points2[index[i + 2] - 1], points2[index[i] - 1], col3);\n            }\n        }\n\n    }\n\n    drawTriangleSpan(dist: number, xpos: number, ypos: number, color: number): void {\n        let framebufferIndex = xpos + ypos * this.width;\n        this.framebuffer.fill(color, framebufferIndex, framebufferIndex + dist);\n    }\n\n    /**\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix\n     * http://www.flipcode.com/archives/articles.shtml\n     * http://lodev.org/cgtutor/\n     * http://lodev.org/cgtutor/lineclipping.html\n     * http://www.hugi.scene.org/online/coding/\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/perspective-correct-interpolation-vertex-attributes\n     * http://simonstechblog.blogspot.de/2012/04/software-rasterizer-part-2.html\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rendering-3d-scene-overview\n     * http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/visibility-problem-depth-buffer-depth-interpolation\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/perspective-correct-interpolation-vertex-attributes\n     * https://gamedev.stackexchange.com/questions/38213/depth-interpolation-for-z-buffer-with-scanline\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/shading-normals\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/transforming-objects-using-matrices\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-polygon-mesh\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/3d-viewing-pinhole-camera\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points\n     */\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex, color: number): void {\n\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    fillLongLeftTriangle2(v1: Vector3f, v2: Vector3f, v3: Vector3f, t1: Vector3f, t2: Vector3f, t3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n\n\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex, color: number): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y == p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3, color);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0), color);\n            }\n        }\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n\n    /**\n     * TODO:\n     * - adjust method in order to have window coordinates as parameter\n     *   that gonna be used to define the area to be displayed\n     * - http://qzx.com/pc-gpe/\n     */\n    drawRotoZoomer(texture: Texture) {\n        let scale = Math.sin(Date.now() * 0.0005) + 1.1;\n\n        let yStepX = Math.sin(Date.now() * 0.0003) * scale;\n        let yStepY = Math.cos(Date.now() * 0.0003) * scale;\n\n        let xStepX = yStepY;\n        let xStepY = -yStepX;\n\n        let texYCoord = Math.sin(Date.now() * 0.0002) * 512;\n        let texXCoord = Math.cos(Date.now() * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < 200; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[framebufferPos++] = texture.texture[(texXCoordInner & 63) + (texYCoordInner & 0xff) * 64];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n    /**\n     * Generates a voxel landscape.\n     * \n     * TODO:\n     * - y-span color interpolation\n     * - texturing\n     * \n     * http://simulationcorner.net/index.php?page=comanche\n     * http://www.flipcode.com/archives/Realtime_Voxel_Landscape_Engines-Part_2_Rendering_the_Landscapes_Structure.shtml\n     * http://www.massal.net/article/voxel/\n     * \n     * @param {Texture} texture The heightmap\n     * @param {number} time Elapsed time in milliseconds\n     * \n     * @memberof Framebuffer\n     */\n    drawVoxelLandscape2(texture: Texture, time: number) {\n        this.clearCol(255 << 24);\n\n        const MIN_DIST = 45;\n        const MAX_DIST = 200;\n\n        let camX = time * 0.008;\n        let camY = 0;\n\n        const focus = 125.7;\n        const center = 300;\n        const eye = 250;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = this.getBilinearFilteredPixel(texture, rayX, rayY);\n                let projHeight = Math.round((height - eye) * focus / dist + center);\n                let color = Math.round(height) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)) * 10);\n                let packedRGB = 255 << 24 | (color + 10) << 16 | (color + 20) << 8 | (color + 13);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearCol(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearCol(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return texture.texture[x + y * texture.width];\n    }\n\n    getBilinearFilteredPixel(texture: Texture, x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(texture, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(texture, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(texture, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(texture, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    getBilinearFilteredPixel2(texture: Texture, x: number, y: number) {\n\n        let x0 = Math.min(x | 0, texture.width - 1);\n        let x1 = Math.min((x | 0) + 1, texture.width - 1);\n        let y0 = Math.min(y | 0, texture.height - 1);\n        let y1 = Math.min((y | 0) + 1, texture.height - 1);\n\n        let x0y0 = this.getPixel2(texture, x0, y0);\n        let x1y0 = this.getPixel2(texture, x1, y0);\n        let x0y1 = this.getPixel2(texture, x0, y1);\n        let x1y1 = this.getPixel2(texture, x1, y1);\n\n\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n\n    drawTitanEffect() {\n        this.clear();\n        const horizontalNum = 320 / 20;\n        const verticalNum = 200 / 20;\n\n\n\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                let scale = ((Math.sin(Date.now() * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                let size = Math.round(scale * 8 + 1) * 2;\n                let offset = (20 / 2 - size / 2) | 0;\n                let color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                this.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n    drawMetaballs() {\n        let balls: Array<Vector3f> = [\n            new Vector3f(Math.sin(Date.now() * 0.002) * 100 + 150,\n                Math.cos(Date.now() * 0.0035) * 70 + 100, 0),\n            new Vector3f(Math.sin(Date.now() * 0.0015) * 100 + 150,\n                Math.cos(Date.now() * 0.002) * 70 + 100, 0),\n            new Vector3f(Math.sin(Date.now() * 0.003) * 100 + 150,\n                Math.cos(Date.now() * 0.0045) * 70 + 100, 0)\n        ]\n\n        let index = 0;\n\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let intensity = 0;\n                for (let b = 0; b < 3; b++) {\n                    let xx = (balls[b].x - x);\n                    let yy = (balls[b].y - y);\n                    let length = Math.sqrt(xx * xx + yy * yy);\n                    intensity += 5500 / length;\n                }\n                this.framebuffer[index++] = 255 << 24 | this.mapColor(intensity);\n            }\n        }\n    }\n\n    private interpolateColor(start: number, end: number, value: number, color1: number, color2: number): number {\n        let scale = this.interpolate(start, end, value);\n        let red = (color1 >> 0 & 0xff) * (1 - scale) + scale * (color2 >> 0 & 0xff);\n        let green = (color1 >> 8 & 0xff) * (1 - scale) + scale * (color2 >> 8 & 0xff);\n        let blue = (color1 >> 16 & 0xff) * (1 - scale) + scale * (color2 >> 16 & 0xff);\n        return red | green << 8 | blue << 16;\n    }\n    private mapColor(intensity: number): number {\n        if (intensity >= 235) {\n            return 255;\n        } else if (intensity >= 230) {\n            return this.interpolateColor(230, 235, intensity, 255 << 8 | 255, 255);\n        } else if (intensity >= 100) {\n            return this.interpolateColor(100, 230, intensity, 255 << 8, 255 << 8 | 255);\n        }\n        return 255 << 8;\n    }\n\n    draw(texture: Texture, time: number) {\n        // this.clearCol(80 << 16 | 80 << 8 | 99 << 0 | 255 << 24)\n        let a = time * 0.001;\n        for (let i = 10; i < 190; i++) {\n            let xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            let rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let x1 = (Math.sin(rot) * 32) | 0;\n            let x2 = (Math.sin(Math.PI * 2 / 4 + rot) * 32) | 0;\n            let x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * 32) | 0;\n            let x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * 32) | 0;\n\n            if (x2 > x1) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                let dist = x2 - x1;\n                let xPos = x1 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n\n            if (x3 > x2) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                let dist = x3 - x2;\n                let xPos = x2 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n\n            if (x4 > x3) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                let dist = x4 - x3;\n                let xPos = x3 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n\n            if (x1 > x4) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                let dist = x1 - x4;\n                let xPos = x4 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n        }\n    }\n\n}\n","import { CullFace } from './CullFace';\nimport Framebuffer from './Framebuffer';\nimport { Vector4f } from './math/index';\nimport { Matrix4f } from './math/Matrix4f';\nimport { Sphere } from './math/Sphere';\nimport { Vector3f } from './math/Vector3f';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport Texture from './Texture';\n\ndeclare function require(resource: string): string;\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private start: number;\n    private texture: Texture;\n    private mask: Texture;\n    private texture2: Texture;\n    private heightmap: Texture;\n    private heightmapSphere: Texture;\n    private texture4: Texture;\n    private texture5: Texture;\n    private baked: Texture;\n    private texture6: Texture;\n    private texture7: Texture;\n    private texture8: Texture;\n    private texture9: Texture;\n    private texture10: Texture;\n    private platonian: Texture;\n    private dirt: Texture;\n    private texture11: Texture;\n    private texture12: Texture;\n    private texture13: Texture;\n    private texture14: Texture;\n    private texture15: Texture;\n    private revision: Texture;\n    private hoodlumLogo: Texture;\n    private blurred: Texture;\n    private envmap: Texture;\n    private particleTexture: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private rave: Texture;\n    private metal: Texture;\n    private micro: Texture;\n    private hlm: Texture;\n    private meth: Texture;\n    private displacementMap: Texture;\n    private cross: Texture;\n    private abstract: Texture;\n    private myAudio: HTMLAudioElement;\n    private spheremap: Texture;\n    private boundRenderLoop: (time: number) => void;\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n\n    constructor(width: number, height: number) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    /**\n     * http://www.hugi.scene.org/online/coding/hugi%20se%204%20-%20index%20sorted%20by%20topic.htm\n     * http://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_01_Prologue.shtml\n     * http://insolitdust.sourceforge.net/code.html\n     *\n     * http://www.wab.com/screen.php?screen=20\n     * http://www.helixsoft.nl/articles/circle/sincos.htm\n     * https://gamedev.stackexchange.com/questions/24957/doing-an-snes-mode-7-affine-transform-effect-in-pygame\n     * https://www.coranac.com/tonc/text/mode7ex.htm\n     *\n     * http://codeincomplete.com/posts/javascript-racer-v1-straight/\n     * http://www.extentofthejam.com/pseudo/\n     *\n     * http://hugi.scene.org/online/hugi24/coding%20graphics%20bonz%20sines%20and%20cosines%20for%20fun%20and%20profit.htm\n     *\n     * @memberof Canvas\n     */\n    public render(): void {\n\n        const currentTime: number = Date.now();\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        let time: number = (Date.now() - this.start);\n        time = time * 3 + 550000;\n        time = time % (1050000);\n\n        this.framebuffer.setCullFace(CullFace.FRONT);\n        /*\n                if (time < 5000) {\n                    this.framebuffer.drawTitanEffect();\n                    this.framebuffer.shadingTorus(time * 0.02);\n                    this.framebuffer.drawTexture(32, 1, this.texture2, 1.0);\n                } else if (time < 15000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.draw(this.texture, time);\n                } else if (time < 25000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.drawLens(this.texture5, this.texture6, time);\n                } else if (time < 30000) {\n                    this.framebuffer.drawRotoZoomer(this.texture);\n                    this.framebuffer.shadingDemo(time * 0.02);\n                } else if (time < 35000) {\n                    this.framebuffer.drawRotoZoomer(this.texture);\n                    this.framebuffer.shadingSphere(time * 0.01);\n                } else if (time < 40000) {\n                    this.framebuffer.drawRotoZoomer(this.texture);\n                    this.framebuffer.wireFrameSphereClipping(time * 0.01);\n                } else if (time < 45000) {\n                    this.framebuffer.drawVoxelLandscape2(this.heightmap, time);\n                    this.framebuffer.drawTexture(32, 1, this.texture2, 1.0);\n                } else if (time < 50000) {\n                    this.framebuffer.drawOldSchoolPlasma(time);\n                } else if (time < 55000) {\n                    // https://www.youtube.com/watch?v=ccYLb7cLB1I&t=773s\n                    this.framebuffer.drawMetaballs();\n                } else if (time < 60000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.shadingTorus2(time * 0.02);\n                } else if (time < 70000) {\n                    this.framebuffer.floodFill(this.texture5, time - 60000);\n                } else if (time < 80000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.drawBobs(this.texture7, time);\n                } else if (time < 95000) {\n                    this.framebuffer.blockFace(this.texture5, time, 80000);\n                } else if (time < 140000) {\n                    this.framebuffer.scrollingBackground(this.texture8, time - 95000);\n                } else if (time < 160000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture9.texture);\n                    this.framebuffer.cinematicScroller(this.texture4, time - 140000);\n                } else if (time < 185000) {\n                    this.framebuffer.shadingSphereClip((time - 170000) * 0.003);\n                    this.framebuffer.cinematicScroller(this.texture4, time - 160000);\n                } else if (time < 200000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture12.texture);\n                    this.framebuffer.shadingTorus(time * 0.02);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                } else if (time < 210000) {\n                    this.framebuffer.blur();\n                    this.framebuffer.shadingTorus3(time * 0.015);\n                    this.framebuffer.drawTexture(32, 70, this.texture2, 1.0);\n                } else if (time < 215000) {\n                    this.framebuffer.led(time, this.texture14);\n                    this.framebuffer.drawTexture(32, 64, this.texture2, 1.0);\n                } else if (time < 230000) {\n                    this.framebuffer.setBob(this.metal);\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.shadingTorus4(time * 0.002);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                    this.framebuffer.cinematicScroller(this.texture4, time);\n                } else if (time < 240000) {\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.clear();\n                    this.framebuffer.shadingTorusENvironment(time * 0.006);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                } else if (time < 250000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.reproduceRazorScene(time * 0.003);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                } else if (time < 260000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.led(time, this.texture14);\n                    this.framebuffer.reflectionBunny(time * 0.002);\n                } else if (time < 270000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.drawBlenderScene(time - 260000, this.texture4);\n                } else if (time < 280000) {\n                    this.framebuffer.drawStarField(time * 0.9);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.reflectionBunny(time * 0.002);\n                    this.framebuffer.scene7(time * 0.2, this.texture7);\n                } else if (time < 290000) {\n                    this.framebuffer.drawPlaneDeformation(time, this.metal);\n                    this.framebuffer.drawTexture(32, 69, this.texture2, 1.0);\n                } else if (time < 330000) {\n                    this.framebuffer.drawLedTunnel(time, this.texture14);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 360000) {\n                    this.framebuffer.drawParticleTorus(time, this.particleTexture);\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 380000) {\n                    this.framebuffer.drawPlanedeformationTunnel(time, this.heightmap, this.metal);\n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 15, smashTime) -\n                        this.framebuffer.cosineInterpolate(15, 200, smashTime) +\n                        0.4 * this.framebuffer.cosineInterpolate(200, 300, smashTime) -\n                        0.4 * this.framebuffer.cosineInterpolate(300, 400, smashTime)) * 35;\n                    this.framebuffer.drawScaledTextureClipBi((320 / 2 - (this.hoodlumLogo.width + smash) / 2) | 0,\n                        (200 / 2 - (this.hoodlumLogo.height - smash) / 2) | 0, this.hoodlumLogo.width + smash, (this.hoodlumLogo.height - smash) | 0, this.hoodlumLogo, 1.0);\n                } else if (time < 400000) {\n                    // THE NEXT LINE IS THE BOTTLENECK NOT THE SPHERE!\n                    this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 420000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.shadingSphereEnv(time * 0.0002);\n                } else if (time < 440000) {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n                    this.framebuffer.glitchScreen(time, this.noise);\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 450000) {\n                    this.framebuffer.drawVoxelLandscape3(this.heightmap, time);\n                    let tempTexture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y = 0; y < 256; y++) {\n                        for (let x = 0; x < 256; x++) {\n                            let ypos = Math.round(200 / 256 * x);\n                            let xpos = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n                    this.framebuffer.drawPolarDistotion(time, tempTexture);\n                } else if (time < 490000) {\n                    this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n                    let tempTexture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y = 0; y < 256; y++) {\n                        for (let x = 0; x < 256; x++) {\n                            let ypos = 199 - Math.round(200 / 256 * x);\n                            let xpos = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n                    this.framebuffer.drawPolarDistotion2(time, tempTexture);\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 520000) {\n                    this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n                    this.framebuffer.noise(time, this.noise);\n        \n                    let scale = 1 / (99 - ((time * 0.02) % 100));\n                    let width = (this.hoodlumLogo.width * scale * 10) | 0;\n                    let height = (this.hoodlumLogo.height * scale * 10) | 0;\n        \n                    this.framebuffer.drawScaledTextureClipBi(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, this.hoodlumLogo, 1.0);\n                } else if (time < 550000) {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.glitchScreen(time, this.noise);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingPlaneEnv(time * 0.0002);\n                } else if (time < 570000) {\n                    this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n                    let tempTexture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y = 0; y < 256; y++) {\n                        for (let x = 0; x < 256; x++) {\n                            let ypos = 199 - Math.round(200 / 256 * x);\n                            let xpos = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n                    this.framebuffer.drawPolarDistotion2(time, tempTexture);\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 15, smashTime) -\n                        this.framebuffer.cosineInterpolate(15, 200, smashTime) +\n                        0.4 * this.framebuffer.cosineInterpolate(200, 300, smashTime) -\n                        0.4 * this.framebuffer.cosineInterpolate(300, 400, smashTime)) * 35;\n        \n        \n                    let size = Math.round(1 * smash);\n                    let size2 = Math.round(2 * smash);\n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20 + size,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)) + size2,\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n                    this.framebuffer.glitchScreen(time, this.noise);\n                } else if (time < 590000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.drawParticleTorus(time, this.particleTexture2, true);\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture(tmpGlitch, 320, 200);\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = 320 + smash * 320 / 100;\n                    let height = 200 + smash * 200 / 100;\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 650000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n        \n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 50);\n                    let height = Math.round(200 + smash * 200 / 50);\n        \n                    // slow\n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 670000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n        \n                    let source: number = 0;\n                    let dest: number = 319;\n                    for (let y: number = 0; y < 200; y++) {\n                        for (let x: number = 0; x < 160; x++) {\n                            this.framebuffer.framebuffer[dest--] = this.framebuffer.framebuffer[source++];\n                        }\n                        source += 160;\n                        dest += 320 + 160;\n                    }\n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 50);\n                    let height = Math.round(200 + smash * 200 / 50);\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    for (let y = 0; y < 3; y++) {\n                        for (let x = 0; x < 4; x++) {\n                            let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                            let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n        \n                            this.framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n                        }\n                    }\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 690000) {\n        \n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n        \n                    this.framebuffer.shadingSphereEnv(time * 0.0002);\n        \n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n        \n        \n                    let source: number = 0;\n                    let dest: number = 319;\n                    for (let y: number = 0; y < 100; y++) {\n                        for (let x: number = 0; x < 160; x++) {\n                            this.framebuffer.framebuffer[dest--] = this.framebuffer.framebuffer[source++];\n                        }\n                        source += 160;\n                        dest += 320 + 160;\n                    }\n        \n                    source = 0;\n                    dest = 199 * 320;\n                    for (let y: number = 0; y < 100; y++) {\n                        for (let x: number = 0; x < 320; x++) {\n                            this.framebuffer.framebuffer[dest++] = this.framebuffer.framebuffer[source++];\n                        }\n                        dest -= 320 * 2;\n                    }\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 50);\n                    let height = Math.round(200 + smash * 200 / 50);\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    for (let y = 0; y < 3; y++) {\n                        for (let x = 0; x < 4; x++) {\n                            let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                            let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n        \n                            this.framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n                        }\n                    }\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 720000) {\n                    // Rave video & Wobblin Cylinder\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.FRONT);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingCylinderEnv(time * 0.0002);\n        \n                    // Crosses\n                    for (let y = 0; y < 3; y++) {\n                        for (let x = 0; x < 4; x++) {\n                            let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                            let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n                            this.framebuffer.drawTexture(xx, yy, this.cross, 0.2);\n                        }\n                    }\n        \n                    // Motion Blur\n                    let texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture, 0.3 + 0.6 * (0.5 + 0.5 * Math.sin(time * 0.0003)));\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 750000) {\n                    let rng = new RandomNumberGenerator();\n                    rng.setSeed(666);\n                    let texture = new Texture(new Uint32Array(32 * 32), 32, 32);\n                    // FIXME:\n                    // - remove realtime glow and put it pre baked into the texture insteadt!\n                    for (let k = 0; k < 100; k++) {\n                        let x = Math.round(rng.getFloat() * 32);\n                        let y = Math.round(rng.getFloat() * 32);\n                        if (k < 50)\n                            texture.texture[x + y * 32] = 47 | 181 << 8 | 243 << 16;\n                        else\n                            texture.texture[x + y * 32] = 252 | 130 << 8 | 195 << 16;\n                    }\n        \n                    this.framebuffer.drawPlanedeformationTunnelAnim(time, texture);\n        \n        \n                    // GLOW\n                    let glowBuffer = new Uint32Array(16 * 2 * 10 * 2);\n                    let glowBuffer2 = new Uint32Array(16 * 2 * 10 * 2);\n        \n                    // todo filer onlyy brigh parts\n                    // blur if too blocky\n                    // clamp to border when filterting bilinear\n                    // add and dont blend with alpha\n                    for (let y = 0; y < 20; y++) {\n                        for (let x = 0; x < 32; x++) {\n                            let xx = Math.round(10 * x);\n                            let yy = Math.round(10 * y);\n                            let r = this.framebuffer.framebuffer[xx + yy * 320] & 0xff;\n                            let g = this.framebuffer.framebuffer[xx + yy * 320] >> 8 & 0xff;\n                            let b = this.framebuffer.framebuffer[xx + yy * 320] >> 16 & 0xff;\n                            let intensity = (r + g + b) / 3;\n                            let scale = this.framebuffer.cosineInterpolate(200, 130, intensity);\n                            let color = r * scale | g * scale << 8 | b * scale << 16 | 255 << 24;\n                            //  if (intensity > 138) {\n                            glowBuffer[x + y * 32] = this.framebuffer.framebuffer[xx + yy * 320];//color ;\n                            // } \n                        }\n                    }\n        \n                    for (let y = 0; y < 20; y++) {\n                        for (let x = 0; x < 32; x++) {\n                            let col1 = glowBuffer[Math.max(x - 1, 0) + y * 32];\n                            let col2 = glowBuffer[(x) % 32 + y * 32];\n                            let col3 = glowBuffer[Math.min(x + 1, 31) + y * 32];\n                            let r = (col1 & 0xff) * 1 / 4 + (col2 & 0xff) * 2 / 4 + (col3 & 0xff) * 1 / 4;\n                            let g = (col1 >> 8 & 0xff) * 1 / 4 + (col2 >> 8 & 0xff) * 2 / 4 + (col3 >> 8 & 0xff) * 1 / 4;\n                            let b = (col1 >> 16 & 0xff) * 1 / 4 + (col2 >> 16 & 0xff) * 2 / 4 + (col3 >> 16 & 0xff) * 1 / 4;\n                            glowBuffer2[x + y * 32] = r | g << 8 | b << 16;\n                        }\n                    }\n        \n                    for (let y = 0; y < 20; y++) {\n                        for (let x = 0; x < 32; x++) {\n                            let col1 = glowBuffer2[(x) + Math.max(y - 1, 0) * 32];\n                            let col2 = glowBuffer2[(x) + y % 20 * 32];\n                            let col3 = glowBuffer2[(x) + Math.min(y + 1, 19) * 32];\n                            let r = ((col1 & 0xff) * 1 / 4 + (col2 & 0xff) * 2 / 4 + (col3 & 0xff) * 1 / 4);\n                            let g = ((col1 >> 8 & 0xff) * 1 / 4 + (col2 >> 8 & 0xff) * 2 / 4 + (col3 >> 8 & 0xff) * 1 / 4);\n                            let b = ((col1 >> 16 & 0xff) * 1 / 4 + (col2 >> 16 & 0xff) * 2 / 4 + (col3 >> 16 & 0xff) * 1 / 4);\n                            glowBuffer[x + y * 32] = r | g << 8 | b << 16;\n                        }\n                    }\n        \n                    let texture2 = new Texture();\n                    texture2.texture = glowBuffer;\n                    texture2.width = 32;\n                    texture2.height = 20;\n        \n        \n                    this.framebuffer.drawScaledTextureClipBiAdd(\n                        0, 0,\n                        320, 200, texture2, 0.75);\n        \n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.reflectionBunny(time * 0.002);\n                    // Motion Blur\n                    let texture3 = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.8);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    this.framebuffer.noise(time, this.noise);\n                } else {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.FRONT);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingCylinderEnvDisp(time * 0.0002);\n                    this.framebuffer.drawTexture((320 / 2 - 256 / 2) | 0, (200 / 2 - 122 / 2) | 0, this.meth, Math.max(0, Math.sin(time * 0.0002)));\n                    // Motion Blur\n                    let texture3 = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.8);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n        \n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 100);\n                    let height = Math.round(200 + smash * 200 / 100);\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    this.framebuffer.noise(time, this.noise);\n                }\n        */\n\n        // music: https://youtu.be/XNUaoQeTu9U\n\n        if (time < 50000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingSphereEnvDisp(time * 0.0002);\n\n            // Motion Blur\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm: number = 140;\n            const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n            const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width: number = Math.round(320 + smash * 320 / 100);\n            const height: number = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClip(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 100000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            // this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.setBob(this.envmap);\n\n            let scale: number = 3.7;\n            let elapsedTime: number = (time - 50000) * 0.0002;\n\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3)));\n\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n                -10 - (Math.sin(elapsedTime * 0.3) * 0.5 + 0.5) * 6)\n                .multiplyMatrix(modelViewMartrix);\n            this.framebuffer.clearDepthBuffer();\n            this.framebuffer.shadingSphereEnvDisp2((time - 50000) * 0.0002, modelViewMartrix);\n\n            // Motion Blur\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm: number = 140;\n            const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n            const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width: number = Math.round(320 + smash * 320 / 100);\n            const height: number = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 150000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.drawParticleTorus(time, this.particleTexture2, true);\n\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm: number = 140;\n            const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n            const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width: number = Math.round(320 + smash * 320 / 100);\n            const height: number = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 200000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm = 140;\n            const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n            const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width = Math.round(320 + smash * 320 / 100);\n            const height = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 250000) {\n            this.framebuffer.raveMoview(time, this.rave);\n            this.framebuffer.glitchScreen(time, this.noise, false);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingPlaneEnv(time * 0.0002);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 300000) {\n            this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n            const tempTexture: Texture = new Texture();\n            tempTexture.texture = new Uint32Array(256 * 256);\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const ypos: number = 199 - Math.round(200 / 256 * x);\n                    const xpos: number = Math.round(320 / 256 * y);\n                    tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                }\n            }\n\n            this.framebuffer.drawPolarDistotion2(time, tempTexture);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.65);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 350000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingCylinderEnvDisp(time * 0.0002);\n\n            const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 400000) {\n            this.framebuffer.raveMoview(time, this.rave);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n            this.framebuffer.glitchScreen(time, this.noise);\n        } else if (time < 450000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.drawParticleWaves(time, this.particleTexture2, true);\n\n            const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n\n        } else if (time < 500000) {\n            this.framebuffer.drawMetaballs();\n            this.framebuffer.noise(time, this.noise, 0.1);\n        } else if (time < 550000) {\n            this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 600000) {\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.reproduceRazorScene(time * 0.0018, [\n                { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            this.framebuffer.noise(time, this.noise, 0.04);\n        } else if (time < 650000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.drawParticleStreams(time, this.particleTexture2, true);\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.55);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 700000) {\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.torusTunnel(time * 0.007, (Date.now() - this.start), this.particleTexture);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 750000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.drawBlenderScene2(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 800000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.drawBlenderScene3(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n            this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, 0.6);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 850000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.drawBlenderScene4(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n            //this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, 0.6);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 900000) {\n\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.envmap);\n\n            this.framebuffer.drawBlenderScene5(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            this.framebuffer.glitchScreen(time * 0.9, this.noise);\n        } else if (time < 950000) {\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.envmap);\n\n            this.framebuffer.drawBlenderScene6(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 1000000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.baked);\n\n            this.framebuffer.drawBlenderScene7(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            //this.framebuffer.glitchScreen(time * 0.9, this.noise);\n            this.framebuffer.noise(time, this.noise);\n        } else {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.platonian);\n\n            this.framebuffer.drawBlenderScene8(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            //this.framebuffer.glitchScreen(time * 0.9, this.noise);\n            this.framebuffer.noise(time, this.noise);\n        }\n        /**\n         * TODO:\n         * - Draw Vector ART in SVG Inkscape\n         * - Vectorize with Blender and Display\n         * - do texture mapped wavefront in blender\n         * - bake lighting\n         */\n        //this.framebuffer.drawTexture(30, 25, this.meth, 1);\n\n\n        //  this.framebuffer.drawTexture(0, 0, this.hlm, 0.50);\n\n\n        // this.framebuffer.glitchScreen(time, this.noise);\n        // this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n        // this.framebuffer.drawWormhole(time, this.particleTexture2, true);\n\n        /**\n         * TODO:\n         * - lens flare in razor scene\n         * - transition effects with alpha layer\n         * - wormhole particle tunnel\n         * - rubiks cube animation :-)\n         * - cube with animated texture\n         * - Oldskool amiga screen with disk loading and decrunching\n         * - screen exploding intro cubes\n         * - Split red green and blue channels and displace them in x direction\n         */\n\n\n        /**\n         * TODO:\n         * - Stripe landscape: http://farm3.static.flickr.com/2653/5710494901_2ca6ddbfb2_b.jpg\n         *   maybe with sync to bass and fft\n         * - Blender modells (Flat, textured, GI baked)\n         * - particle tunnel\n         * - ribbons on curves\n         * - dof\n         */\n\n        // this.framebuffer.drawRadialBlur();\n\n\n\n        //this.framebuffer.noise(time, this.noise);\n\n\n        // this.framebuffer.drawText(8, 18, 'FPS: ' + this.fps.toString(), this.texture4);\n\n\n        /*\n        let bufferLength = this.analyzer.frequencyBinCount;\n        let dataArray = new Uint8Array(bufferLength);\n        this.analyzer.getByteFrequencyData(dataArray);\n    \n        let pos1 = new Vector3f(0,0,0);\n        let pos2 = new Vector3f(0,0,0);\n        const STEPS = 100;\n        for (let i = 0; i < STEPS; i++) {\n            \n            let x = Math.sin(Math.PI * 2 / STEPS * i+time*0.0003);\n            let y = Math.cos(Math.PI * 2 / STEPS * i+time*0.0003);\n            pos1.x = x*60 +320/2;\n            pos1.y = y*60 + 200/2;\n            pos2.y=  y*(60+dataArray[Math.floor(bufferLength/ STEPS * (i))]/255*40)+200/2;\n            pos2.x = x*(60+dataArray[Math.floor(bufferLength/ STEPS * (i))]/255*40)+ 320/2;\n            this.framebuffer.drawLineDDANoZ(pos1, pos2, 255);\n        }\n        */\n\n\n        // TS SoftSynth Project\n        // http://natureofcode.com/book/\n        // https://noisehack.com/generate-noise-web-audio-api/\n        // https://noisehack.com/custom-audio-effects-javascript-web-audio-api/\n        // https://noisehack.com/how-to-build-supersaw-synth-web-audio-api/\n        // https://noisehack.com/build-music-visualizer-web-audio-api/\n        // https://noisehack.com/how-to-build-monotron-synth-web-audio-api/\n        // https://davidwalsh.name/web-audio-api\n        // https://codepen.io/gregh/post/recreating-legendary-8-bit-games-music-with-web-audio-api\n        // https://developer.mozilla.org/en-US/docs/Games/Techniques/Audio_for_Web_Games\n        // https://www.html5rocks.com/en/tutorials/webaudio/intro/\n\n        //this.framebuffer.drawTexture(0, 0, this.displacementMap, 0.8);\n        /*\n        this.framebuffer.drawPolarDistotion3(time, this.revision);\n        this.framebuffer.setCullFace(CullFace.FRONT);\n        this.framebuffer.shadingSphere(time * 0.004);\n        // Motion Blur\n        let texture = new Texture(this.accumulationBuffer, 320, 200);\n        //this.framebuffer.drawTexture(0, 0, texture, 0.75);\n        this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n        this.framebuffer.glitchScreen(time, this.noise);\n        */\n\n        // TODO:\n        // - Progress Bar for Loading\n        // - Web Audio API\n        // - blasphemy line sphere with particles and blur\n        // - fractal landscape fade in / out\n        // - particle emitter\n        // - plane deformation on rendererd scenes\n        // - alpha blend between different or same scene\n        // - fade to white\n        // - spike ball / particle and 3d mesh with normals\n        // - glow\n        // - kewlers cube torus\n        // - kewlsers recht billboard spikeball\n        // - kewslers rect billboard cylinder\n        // seminars:\n        // - https://www.youtube.com/playlist?list=PLwbFJIXXSsXvbpDxOaaBrxSBdLUW1hdax\n        // - https://www.youtube.com/watch?v=XZLqwXdXjqY\n        // - https://www.youtube.com/watch?v=nt-BpAYMeJs&list=PLNqQO7lFY6dmH5kMSWtuRP6ZhBiQdQIU1&index=5\n        // - https://www.youtube.com/watch?v=WgUkCRvti3Y&list=PLNqQO7lFY6dlPOg7cA1SczEU0Y7UW6iMW\n        // - https://www.youtube.com/watch?v=7wYq6O-g2U8&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC\n        // - https://www.youtube.com/watch?v=hszyYAT5R1Q&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC&index=5\n        // - https://www.youtube.com/watch?v=4Q5sgNCN2Jw&list=PL2EEF025A89BAA0FC\n        // - https://www.youtube.com/watch?v=TbcZyAO6K7c\n        // - https://www.youtube.com/watch?v=2p2JcHzRlJU\n        // - https://www.youtube.com/watch?v=QT2ftidLTn4\n        // - https://www.youtube.com/watch?v=Oo-jlpvhTcY\n\n        /*\n              // SCALE\n              let texture = new Texture();\n              texture.texture = this.accumulationBuffer;\n              texture.width = 320;\n              texture.height = 200;\n      \n              let scale = 1 + (1+Math.sin(time*0.00006))*0.5*20;\n              let width = 320 *  scale;\n              let height = 200 * scale;\n      \n              // looks crappy with linear interpolation!\n              // probably  bilinear is required here\n         \n              \n                  this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                  this.framebuffer.drawScaledTextureClipBi(\n                      Math.round(320/2-width/2),\n                      Math.round(200/2-height/2),\n                      width, height, texture, 1.0);\n                  */\n\n        /*\n            // RADIAL BLUR\n    let texture = new Texture();\n    texture.texture = this.accumulationBuffer;\n    texture.width = 320;\n    texture.height = 200;\n    \n    let scale = 1.05;\n    let width = 320 *  scale;\n    let height = 200 * scale;\n    \n    // looks crappy with linear interpolation!\n    // probably  bilinear is required here\n     \n     \n        this.framebuffer.drawScaledTextureClipBi(\n            Math.round(320/2-width/2),\n            Math.round(200/2-height/2),\n            width, height, texture, 0.95);\n     \n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            */\n\n\n        //this.framebuffer.noise(time, this.noise);\n\n        // https://github.com/ninjadev/nin/blob/38e80381415934136c7bd97233a2792df2bffa8d/nin/dasBoot/shims.js\n        /*****/\n        /*\n    \n        let scale =  (99-((time * 0.04) % 100))/99;\n        let width = (this.micro.width * scale * 2) | 0;\n        let height = (this.micro.height * scale * 2) | 0;\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(22);\n        let pos = [];\n        for(let i=0; i < 100; i++) {\n            pos.push({x:rng.getFloat(), y: rng.getFloat()});\n        }\n    \n        let xpos = 20+(320-40) * pos[((time*0.04/99)%100)|0].x;\n        let ypos = 20+(200-40) * pos[((time*0.04/99)%100)|0].y;\n        this.framebuffer.drawScaledTextureClipAdd(\n            Math.round(xpos - width / 2),\n            Math.round(ypos - height / 2),\n            width, height, this.micro, 1.0);\n            */\n\n\n        // this.framebuffer.drawRadialBlur();\n\n        // NEW EFFECTS:\n        // * https://www.youtube.com/watch?v=bg-MTl_nRiU\n        // * SPIKEBALL KYLE\n        // plane deformation with texture to LED\n        // 16 / 9 --> 320 x 180\n\n\n        /*\n        this.framebuffer.setCullFace(CullFace.BACK);\n        //this.framebuffer.drawBlenderScene(time, this.texture4, this.particleTexture2);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);  \n        this.framebuffer.shadingSphereEnv(time*0.0002);\n         this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);  \n        */\n\n        /**\n         * Inspiration:\n         * - https://www.youtube.com/watch?v=7kLNXg4BmM8\n         * - https://www.youtube.com/watch?v=PLrio-uwvwk\n         * - https://www.youtube.com/watch?v=XJKDb4ByZ7Y\n         */\n        /**\n         * TODO:\n         * - http://sol.gfxile.net/gp/ch18.html\n         * - http://insolitdust.sourceforge.net/code.html\n         * - http://sol.gfxile.net/sphere/index.html\n         * - http://4matprojects.blogspot.de/\n         * - http://sol.gfxile.net/particle/index.html\n         * - http://sol.gfxile.net/gp/ch19.html\n         * - http://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_07_Bump_Mapping.shtml\n         * - http://sol.gfxile.net/interpolation/index.html\n         * - http://adrianboeing.blogspot.de/2011/06/deform-textured-interference-effect-in.html\n         * - particle ball pulsating (https://www.youtube.com/watch?v=NPZEkhtXhgE)\n         * - metaballs\n         * - particle stream\n         * - scene with baked lighting & wobbling ball & camera animation\n         * - DOF flares\n         * - demo tool http://peisik.untergrund.net/engines/\n         * - https://www.youtube.com/watch?v=ghX1-EUx-fQ&index=7&list=PLPnuj18PSHazbti_tw1zoQ23fqx8-ZZP7 (min 15)\n         */\n\n        //  this.framebuffer.cinematicScroller(this.texture4, time);\n        //  this.framebuffer.drawTextureScaledLame(0,0, 16,16, this.texture7);\n        // http://doc.babylonjs.com/tutorials/discover_basic_elements\n\n        // implement modells with baked shaods and lighting :)\n        // http://iquilezles.org/www/index.htm\n        // http://iquilezles.org/www/articles/normals/normals.htm\n        // http://iquilezles.org/www/articles/areas/areas.htm\n        // http://iquilezles.org/www/articles/frustum/frustum.htm\n        // http://iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n        // http://iquilezles.org/www/articles/deform/deform.htm\n        // http://www.gamers.org/dEngine/quake/papers/ddjzsort.html\n        // http://fabiensanglard.net/quakeSource/quakeSourceRendition.php\n\n        //  this.framebuffer.shadingSphereClip((time ) * 0.003);\n        // this.framebuffer.cinematicScroller(this.texture4, time );\n        //   this.framebuffer.drawText(8, 192 - 18, 'TRIANGLE NEAR PLANE CLIPPING', this.texture4);\n\n        // TODO:\n        // - textured cube / dynamic textures\n        // - skybox\n        // - specular highlights\n        // - 3d bobs (with shadows)\n        // - plane deformation effect\n        // - sine scroller (color bar texture)\n        // - dot tunnel\n        // - 2d / 3d start field\n        // - 2d vector start\n        // - wobble logo\n        // - text writer\n        // - scroller / sine scroller\n        // - fractalplasma fade in\n        // - water effect\n        // - cross fade\n        // - 2d bump mapping ( maybe on 3d object)\n        // - smooth shading (gouraud)\n        // - voxel landscape with color\n        // - metaballs\n        // - rasterbars\n        // - 3d particles / 3d particle collision\n        // - vector morphing\n        // - voxel tunnel / sphere / torus\n        // - stencil vectors\n        // - chess zoomer / chess waver\n        // - raycaster\n\n        // this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n        // this.framebuffer.shadingTorus2(time * 0.02);\n        // this.framebuffer.drawTexture(32, 60, this.texture2, 1.0);\n\n        //this.framebuffer.clear();\n\n        //this.framebuffer.wireFrameTerrain(time*0.01, this.texture3);\n        // this.framebuffer.pixelate();\n\n\n\n        //     this.framebuffer.wireFrameTerrain(time*0.008,this.texture3);\n        //    this.framebuffer.cinematicScroller(this.texture4, time );\n        // todo: radial blur -> pouet.net\n\n        // http://www.cubic.org/docs/camera.htm\n        // http://www.cubic.org/docs/3dclip.htm\n        // http://www.cubic.org/docs/backcull.htm\n\n        // this.framebuffer.addReflections();\n\n        // this.framebuffer.drawRaster();\n        // this.framebuffer.enableBackfaceCulling();\n        // this.framebuffer.setCullFace(FRONT);\n\n        // TODO: text\n        // 3d line clipping for fly by :)\n        // different transitions:\n        // - stripes etc\n        // - chessboard\n        // wobble logo\n        // ball 3d with precalculated sizes lookup\n        // starfield 2d /3d\n        // wormhole\n        // glitch logo\n    }\n\n    getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        let canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        let context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        let data = context.getImageData(0, 0, image.width, image.height).data;\n        let conv = new Uint32Array(data.length / 4);\n        let c = 0;\n        for (let i = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n    public createTexture(path: string, hasAlpha: boolean): Promise<Texture> {\n        return new Promise((resolve) => {\n            const img = new Image();\n            img.onload = () => {\n                const texture = new Texture();\n                texture.texture = this.getImageData(img, hasAlpha);\n                texture.width = img.width;\n                texture.height = img.height;\n                resolve(texture);\n            };\n            img.onerror = () => resolve();\n            img.src = path;\n        });\n    }\n\n    public createProceduralTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    texture.texture[x + y * 256] = (rng.getFloat() * 256) | 0 | 255 << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralDisplacementMap(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            texture.texture.fill(128 | 255 << 24);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = (texture.texture[x + y * 256] & 0xffffff00) | texture.texture[x + y * 256] & 0xff + (c * 255);\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralTexture4(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public init(): void {\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n\n        Promise.all([\n            this.createTexture(require('./assets/spheremap.png'), false).then(texture => this.spheremap = texture),\n            this.createTexture(require('./assets/metall.png'), false).then(texture => this.metal = texture),\n            this.createTexture(require('./assets/logo.png'), false).then(texture => this.texture = texture),\n            this.createTexture(require('./assets/razor1911.png'), true).then(texture => this.texture2 = texture),\n            this.createTexture(require('./assets/heightmap.png'), false).then(texture => this.heightmap = texture),\n            this.createTexture(require('./assets/font.png'), true).then(texture => this.texture4 = texture),\n            this.createTexture(require('./assets/atlantis.png'), false).then(texture => this.texture5 = texture),\n            this.createTexture(require('./assets/lens.png'), true).then(texture => this.texture6 = texture),\n            this.createTexture(require('./assets/ball2.png'), true).then(texture => this.texture7 = texture),\n            this.createTexture(require('./assets/pandabear.png'), false).then(texture => this.texture8 = texture),\n            this.createTexture(require('./assets/battleofilona.png'), false).then(texture => this.texture9 = texture),\n            this.createTexture(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            this.createTexture(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            this.createTexture(require('./assets/sky.png'), true).then(texture => this.texture12 = texture),\n            this.createTexture(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            this.createTexture(require('./assets/led.png'), false).then(texture => this.texture14 = texture),\n            this.createTexture(require('./assets/revision.png'), false).then(texture => this.revision = texture),\n            this.createTexture(require('./assets/platonian_baked.png'), false).then(texture => this.platonian = texture),\n            this.createTexture(require('./assets/meth.png'), true).then(texture => this.meth = texture),\n            this.createProceduralTexture().then(texture => this.texture15 = texture),\n            this.createProceduralTexture2().then(texture => this.particleTexture = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n            this.createProceduralTexture4().then(texture => this.noise = texture),\n            this.createProceduralDisplacementMap().then(texture => this.displacementMap = texture),\n            this.createTexture(require('./assets/hoodlumLogo.png'), true).then(texture => this.hoodlumLogo = texture),\n            this.createTexture(require('./assets/abstract.png'), false).then(texture => this.abstract = texture),\n            this.createTexture(require('./assets/rave.png'), false).then(texture => this.rave = texture),\n            this.createTexture(require('./assets/microstrange.png'), false).then(texture => this.micro = texture),\n            this.createTexture(require('./assets/Backed.png'), false).then(texture => this.baked = texture),\n            this.createTexture(require('./assets/blurredBackground.png'), false).then(texture => this.blurred = texture),\n            this.createTexture(require('./assets/hlm.png'), true).then(texture => this.hlm = texture),\n            this.createTexture(require('./assets/cross.png'), true).then(texture => this.cross = texture),\n            this.createTexture(require('./assets/envmap.png'), false).then(texture => this.envmap = texture),\n            this.createTexture(require('./assets/heightmapSphere.png'), false).then(texture => this.heightmapSphere = texture),\n            this.createTexture(require('./assets/mask.png'), true).then(texture => this.mask = texture),\n            this.createTexture(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n        ]).then(() => {\n            // Web Audio API\n            // FIXME: put this into a Player Class\n            this.framebuffer.precompute(this.heightmap, this.heightmapSphere);\n\n            let audioContext = new AudioContext();\n            let request = new XMLHttpRequest();\n            request.open('GET', require('./assets/xmix_q2_final.ogg'), true);\n            request.responseType = 'arraybuffer';\n            request.onload = () => {\n                let undecodedAudio = request.response;\n                audioContext.decodeAudioData(undecodedAudio,\n                    (buffer) => {\n                        const sourceBuffer = audioContext.createBufferSource();\n                        sourceBuffer.buffer = buffer;\n                        sourceBuffer.connect(audioContext.destination);\n                        sourceBuffer.loop = true;\n                        sourceBuffer.start(audioContext.currentTime);\n                        this.start = Date.now();\n                        this.renderLoop(0);\n                    });\n            };\n\n            request.send();\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.render();\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import * as AISA from './Canvas';\n\nclass Application {\n\n    public main(): void {\n        const canvas: AISA.Canvas = new AISA.Canvas(320, 200);\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"sourceRoot":""}