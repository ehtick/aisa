{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/Texture.ts","webpack:///./src/camera/BasicCamera.ts","webpack:///./src/camera/index.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/CullFace.ts","webpack:///./src/assets/xmix_q2_final.ogg","webpack:///./src/assets/dirt.png","webpack:///./src/assets/mask.png","webpack:///./src/assets/heightmapSphere.png","webpack:///./src/assets/envmap.png","webpack:///./src/assets/cross.png","webpack:///./src/assets/hlm.png","webpack:///./src/assets/blurredBackground.png","webpack:///./src/assets/Backed.png","webpack:///./src/assets/microstrange.png","webpack:///./src/assets/rave.png","webpack:///./src/assets/abstract.png","webpack:///./src/assets/hoodlumLogo.png","webpack:///./src/assets/meth.png","webpack:///./src/assets/platonian_baked.png","webpack:///./src/assets/skybox/skybox_up.png","webpack:///./src/assets/skybox/skybox_right.png","webpack:///./src/assets/skybox/skybox_left.png","webpack:///./src/assets/skybox/skybox_front.png","webpack:///./src/assets/skybox/skybox_down.png","webpack:///./src/assets/skybox/skybox_back.png","webpack:///./src/assets/lab2.png","webpack:///./src/assets/revision.png","webpack:///./src/assets/led.png","webpack:///./src/assets/bokeh.png","webpack:///./src/assets/sky.png","webpack:///./src/assets/ring.png","webpack:///./src/assets/spark.png","webpack:///./src/assets/battleofilona.png","webpack:///./src/assets/pandabear.png","webpack:///./src/assets/ball2.png","webpack:///./src/assets/lens.png","webpack:///./src/assets/atlantis.png","webpack:///./src/assets/font.png","webpack:///./src/assets/heightmap.png","webpack:///./src/assets/razor1911.png","webpack:///./src/assets/logo.png","webpack:///./src/assets/metall.png","webpack:///./src/assets/spheremap.png","webpack:///./src/Vertex.ts","webpack:///./src/camera/ControllableCamera.ts","webpack:///./src/animation/CameraAnimator.ts","webpack:///./src/animation/CameraKeyFrame.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/math/Plane.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/clustered-culling/FrustumCuller.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/Application.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","default","seed","texture","width","height","math_1","BasicCamera","position","yaw","pitch","roll","constructZRotationMatrix","constructXRotationMatrix","constructYRotationMatrix","translation","constructTranslationMatrix","multiplyMatrix","BasicCamera_1","ControllableCamera_1","ControllableCamera","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverse","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tx","ty","tz","alpha","cos","sin","sx","sy","sz","result","vector","w","CullFace","TextureCoordinate","u","v","Vertex","super","speed","deltaTime","distance","camera_1","CosineInterpolate","y1","y2","mu","mu2","PI","CubicInterpolate","y0","y3","a0","a1","a2","a3","CameraAnimator","keyFrames","elapsedTime","first","zero","second","third","fraction","look","rotation","add","pos","getViewMatrix","CameraKeyFrame","Sphere","radius","center","plane","getNormal","getDistance","mat","multiplyHom","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","forEach","point","max","sub","normal","angle","xScale","yScale","zScale","Plane_1","FrustumCuller","planes","Array","push","HALF_HORIZONTAL_FOV","atan","HALF_VERTICAL_FOV","near","far","normals","modelViewMatrix","getInverseRotation","multiplyHomArr","boundingVolume","isInsidePositiveHalfSpace","FrustumCuller_1","Geometry_1","CameraKeyFrame_1","CameraAnimator_1","CullFace_1","Vertex_1","Texture_1","RandomNumberGenerator_1","json","bunnyJson","worldJson","torusJson","gearJson","roomJson","hoodlumJson","labJson","labJson2","bakedJson","platonian","hlm2018Json","AbstractClipEdge","Framebuffer","cullMode","BACK","tmp","Uint32Array","tmp2","tmpGlitch","NEAR_PLANE_Z","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","wBuffer","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","framebuffer","camera","face","bob","texture2","obj","createObject","bunnyObj","createBunny","blenderObj","getBlenderScene","blenderObj2","blenderObj3","blenderObj4","blenderObj5","blenderObj6","blenderObj7","blenderObj8","blenderObj9","blenderObj10","sphere","createSphere","createPlane","cylinder","createCylinder","cylinder2","createCylinder2","sphereDisp","createSphereDistplaced","sphereDisp2","data","set","color","toColor","count","col","h","fill","fb","red","start","j","text","xpos","firstIndex","charCodeAt","index","floor","drawTextureRectFastAlpha","interpolate","Date","now","xs","ys","xt","yt","alpha2","texIndex","frIndex","inverseAlpha","g","b","fbPixel","txPixel","min","tex","time","xoff","yoff","xx","round","yy","xx2","yy2","drawTexture","scrollText","scrollerOffset","drawText","sumIndex","fastFramebufferCopy","drawBox2","readPixel","drawLineDDA","end","current","offset","fastFramebufferCopyOffset","colorLUT","shade","startTime","fadeArray","rng","setSeed","getFloat","clear","drawTextureRect","src","dest","k","scaledTime","drawTextureNoClipAlpha","xdist","ydist","dist","atan2","color1","distScale","noise","glitchFactor","rng2","yStart","size","off","abs","glIndex","index2","xp","yp","newHeight","newWidth","xStart","xTextureStart","xStep","yStep","textureIndex","alphaBlend","alphaScale","framebufferPixel","texturePixel","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","framebufferIndex","textureRowOffset","framebufferRowOffset","div","ypos","textureForwardDifference","hightlight","pow","points","modelViewMartrix","constructScaleMatrix","points2","element","transformed","multiply","nearPlaneClipping","t1","t2","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","colorAr","drawTriangleDDA","theta","phi","maxWindow","minWindow","x1","lineDirection","radialWaveCenter","difference","directionalWave","waveSum","green","blue","sphereFunction2","drawBox","v1","v2","v3","colLine","isTriangleCCW","p1","p2","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","dec","toString","regionCode","sphereFunction","cross","normals2","scalar","normalize","frame","torusFunction","frame2","up","right","map","heightmap","xOff","zOff","a","getRadius","getCenter","dirt","clearCol","model","getDodecahedronMesh","drawObject","yDisplacement","getIcosahedronMesh","getCubeMesh","getPyramidMesh","constructShadowMatrix","lensflareScreenSpace","drawLensFlare","file","disp","scene","coords","uv","faces","computeBoundingSphere","boundingSphere","dist2","color2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","intensity","drawTextureRectNoAlpha","noClear","num","sort","drawParticle","radius2","drawParticleNoDepth","radi","move","cameraAnimator","setKeyFrames","frustumCuller","updateFrustum","isPotentiallyVisible","drawObject2","drawSoftParticle","texture3","mv","model2","scale2","skybox","drawObjectTexture","drawSkyBox","getRotation","textures","back","left","front","skyPoints","skyBoxSideModel","setBob","drawObjectTexture2","down","factor","dampFactor","IMG_WIDTH","IMG_HEIGHT","rotMat","stars","stars2","drawPixel","noLighting","culling","normalMatrix","computeNormalMatrix","lightDirection","isInFrontOfNearPlane","p3","clipConvexPolygon","zClipTriangle","vertexArray","textureCoordinate","clipConvexPolygon2","drawTriangleDDA2","zClipTriangle2","oldLDir","multiplyHomArr2","subject","output","input","S","computeNearPlaneIntersection","projected","isTriangleCCW2","vertex","computeNearPlaneIntersection2","sync","tangent","smashTime","torusFunction2","smash","torusFunction3","finalMatrix","ppoints","ppoints2","textCoords","STEPS","STEPS2","t","vertex1","vertex2","vertex3","n1","n2","n3","fakeSphere","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","newPoints","asin","xpos2","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","norm","norm2","sub2","cross2","add2","normalize2","multiplyArr","myScale","textureCoords","fakeSphere2","rot","clipping","clipRegion","edge","isInside","computeIntersection","isInside2","computeIntersection2","screenPos","dir","temp","drawTextureRectAdd","light","ambient","diffuse","specular","phong","det","v4","yDistanceLeft","yDistanceRight","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","spanzStep","wStart","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","yDistance","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","dx","dy","xDistance","sign","wDelta","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","camX","dirX","dirY","highestPoint","rayX","rayY","getBilinearFilteredPixel","projHeight","packedRGB","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","balls","mapColor","interpolateColor","x2","x3","x4","xPos","drawSpan","textCoord","Framebuffer_1","Canvas","fpsStartTime","fpsCount","fps","accumulationBuffer","canvas","document","createElement","style","cssText","context","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","bind","currentTime","setCullFace","FRONT","blurred","spheremap","shadingSphereEnvDisp","ukBasslineClapMs","envmap","shadingSphereEnvDisp2","drawScaledTextureClipBi","drawParticleTorus","particleTexture2","shadingTorusDamp","raveMoview","rave","glitchScreen","shadingPlaneEnv","drawVoxelLandscape4","tempTexture","drawPolarDistotion2","shadingCylinderEnvDisp","shadingTorus5","drawParticleWaves","drawMetaballs","drawPlanedeformationTunnelV2","abstract","metal","reproduceRazorScene","texture10","texture11","texture13","drawParticleStreams","torusTunnel","particleTexture","drawBlenderScene2","texture4","drawBlenderScene3","hoodlumLogo","drawBlenderScene4","drawBlenderScene5","drawBlenderScene6","baked","drawBlenderScene7","drawBlenderScene8","lab2","drawBlenderScene9","image","withAlpha","drawImage","getImageData","conv","path","hasAlpha","Promise","resolve","img","Image","onload","onerror","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","all","createTexture","then","texture5","texture6","texture7","texture8","texture9","texture12","texture14","revision","meth","createProceduralTexture","texture15","createProceduralTexture2","createProceduralTexture3","createProceduralTexture4","createProceduralDisplacementMap","displacementMap","micro","hlm","heightmapSphere","mask","precompute","audioContext","AudioContext","request","XMLHttpRequest","open","responseType","undecodedAudio","response","decodeAudioData","buffer","sourceBuffer","createBufferSource","connect","destination","loop","send","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","AISA","appendTo","getElementById","init","main"],"mappings":"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AAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2B,EAAA,wDCAAxB,EAAAD,QAAAF,EAAA2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","file":"application.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 71);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\r\n\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n\r\n    constructor(x: number, y:number, z:number) {\r\n        this.x=x;\r\n        this.y=y;\r\n        this.z=z;\r\n    }\r\n\r\n    public mult(scale: number) {\r\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\r\n    }\r\n\r\n    sub(vec: Vector3f): Vector3f {\r\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\r\n    }\r\n\r\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\r\n       this.x = vec1.x - vec2.x;\r\n       this.y = vec1.y - vec2.y;\r\n       this.z =  vec1.z - vec2.z;\r\n    }\r\n\r\n    mul(scal: number): Vector3f {\r\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\r\n    }\r\n\r\n    add(vec: Vector3f): Vector3f {\r\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\r\n    }\r\n\r\n    add2(vec: Vector3f,vec2: Vector3f): void {\r\n        this.x = vec.x + vec2.x;\r\n        this.y =  vec.y + vec2.y;\r\n        this.z =  vec.z + vec2.z;\r\n    }\r\n\r\n    cross(vec: Vector3f): Vector3f {\r\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\r\n            this.z * vec.x - this.x * vec.z,\r\n            this.x * vec.y - this.y * vec.x);\r\n    }\r\n\r\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\r\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\r\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\r\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\r\n    }\r\n\r\n    normalize(): Vector3f {\r\n        let reci = 1.0/this.length();\r\n        return this.mul(reci);\r\n    }\r\n\r\n    normalize2(): void {\r\n        let reci = 1.0/this.length();\r\n       this.x *= reci;\r\n       this.y *= reci;\r\n       this.z *= reci;\r\n    }\r\n\r\n    dot(vec:Vector3f): number {\r\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\r\n    }\r\n\r\n}","export default class RandomNumberGenerator {\r\n\r\n    private seed: number;\r\n\r\n    constructor() {\r\n        this.seed = 6;\r\n    }\r\n\r\n    getFloat() {\r\n        this.seed = (this.seed * 9301 + 49297) % 233280;\r\n        return this.seed / 233280;\r\n    }\r\n\r\n    setSeed(seed) {\r\n        this.seed = seed;\r\n    }\r\n\r\n}","export default class Texture {\n\n    texture: Uint32Array\n    width: number;\n    height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math';\r\n\r\nexport class BasicCamera {\r\n\r\n    protected position: Vector3f;\r\n    protected yaw: number;\r\n    protected pitch: number;\r\n    protected roll: number;\r\n\r\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\r\n        this.position = position;\r\n        this.yaw = yaw;\r\n        this.pitch = pitch;\r\n        this.roll = roll;\r\n    }\r\n\r\n    public getViewMatrix(): Matrix4f {\r\n        let roll  = Matrix4f.constructZRotationMatrix(-this.roll);\r\n        let pitch = Matrix4f.constructXRotationMatrix(-this.pitch);\r\n        let yaw   = Matrix4f.constructYRotationMatrix(-this.yaw);\r\n\r\n        let translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\r\n\r\n        return roll.multiplyMatrix(pitch).multiplyMatrix(yaw).multiplyMatrix(translation);\r\n    }\r\n\r\n}","export { BasicCamera } from './BasicCamera';\r\nexport { ControllableCamera } from './ControllableCamera';","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","export class Vector4f {\r\n\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    public w: number;\r\n\r\n    constructor(x: number, y: number, z: number, w: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n\r\n    sub(vec: Vector4f): Vector4f {\r\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\r\n    }\r\n\r\n    add(vec: Vector4f): Vector4f {\r\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\r\n    }\r\n\r\n    cross(vec: Vector4f): Vector4f {\r\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\r\n            this.z * vec.x - this.x * vec.z,\r\n            this.x * vec.y - this.y * vec.x, 0.0);\r\n    }\r\n\r\n    normalize(): Vector4f {\r\n        let reci = 1.0 / this.length();\r\n        return this.mul(reci);\r\n    }\r\n\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    mul(scal: number): Vector4f {\r\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\r\n    }\r\n\r\n    dot(vec: Vector4f): number {\r\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\r\n    }\r\n\r\n}","export enum CullFace {\r\n    FRONT = 0,\r\n    BACK = 1\r\n}","module.exports = __webpack_public_path__ + \"69adb964e9ef816f3bd99df3b7ddd560.ogg\";","module.exports = __webpack_public_path__ + \"28310db934c54c285a709a1e980e4efc.png\";","module.exports = __webpack_public_path__ + \"04259b8d38e7b73dae45b2c29ceeb4d3.png\";","module.exports = __webpack_public_path__ + \"b01bbcd1860ad00f64ab16cc21569634.png\";","module.exports = __webpack_public_path__ + \"fa5e6c40cb378f6ee6cab4e16ef0934b.png\";","module.exports = __webpack_public_path__ + \"9f73952b51a9a6343babe0c489a2b980.png\";","module.exports = __webpack_public_path__ + \"c55143e127c426cd69827603bbd05978.png\";","module.exports = __webpack_public_path__ + \"bbaba2795420534ca9f0184e07fb74f8.png\";","module.exports = __webpack_public_path__ + \"9ab8cc0b50548d6322136e5429447362.png\";","module.exports = __webpack_public_path__ + \"2047b8a2f49ee5b609dc16ab0e62c014.png\";","module.exports = __webpack_public_path__ + \"539826c16dd852792e84c205811ca9f8.png\";","module.exports = __webpack_public_path__ + \"aecaf306ad634d628614dca09cfab828.png\";","module.exports = __webpack_public_path__ + \"042200790f9c9b7eb4c1dcdc1bfa6778.png\";","module.exports = __webpack_public_path__ + \"6a04a9d0a0989ac43da2da2261c14c98.png\";","module.exports = __webpack_public_path__ + \"c16d3cb192829b6ee4ed2952fa366a80.png\";","module.exports = __webpack_public_path__ + \"be94eeab3984f80ebfdcd07d341a990a.png\";","module.exports = __webpack_public_path__ + \"83fdfd697ed80cbc9b563bbac7f9d257.png\";","module.exports = __webpack_public_path__ + \"67b8c44c95f484c2821fcc7ec27e7b7c.png\";","module.exports = __webpack_public_path__ + \"22b0189c8151c6965aa41bb5d604d1f1.png\";","module.exports = __webpack_public_path__ + \"a0a56c1d6711c1d56c062f88b874b0e1.png\";","module.exports = __webpack_public_path__ + \"2625cad5669068ee0efc8226924156fa.png\";","module.exports = __webpack_public_path__ + \"df5e31e77b9339c4d0b43d5664e5e3ed.png\";","module.exports = __webpack_public_path__ + \"f657ac4e01beddb5085242cb1c20ecb3.png\";","module.exports = __webpack_public_path__ + \"b456e9dc15d272b079029a5ca6468305.png\";","module.exports = __webpack_public_path__ + \"54e31707db0fbae7dec46d063517665a.png\";","module.exports = __webpack_public_path__ + \"f1dde6672b0d9b18b4373a26d3803351.png\";","module.exports = __webpack_public_path__ + \"5c07fbf7949c365c56f8188b02827d6e.png\";","module.exports = __webpack_public_path__ + \"c196269cf8b2fc9593276f497c8ffdd9.png\";","module.exports = __webpack_public_path__ + \"47d04e8b7dc74f4980d66796a632547c.png\";","module.exports = __webpack_public_path__ + \"0009cb245d8a3129bcd470b1c30a2c17.png\";","module.exports = __webpack_public_path__ + \"f4f2b50d7d886d02949a38f94c217a86.png\";","module.exports = __webpack_public_path__ + \"dad0119c8dd1a33ab48b6870bfa8b432.png\";","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","module.exports = __webpack_public_path__ + \"211f2046cf2c6739bad5c6209b09dac4.png\";","module.exports = __webpack_public_path__ + \"c4e4b266fe4b4281371e908cb2fa6e89.png\";","module.exports = __webpack_public_path__ + \"b30d17fb175566e9e20d5584d7ae6bfb.png\";","module.exports = __webpack_public_path__ + \"36fbc222529fa8e2b722e7de1ca8f010.png\";","module.exports = __webpack_public_path__ + \"2989b3135074a9d7d10f7d6c42cecd4a.png\";","module.exports = __webpack_public_path__ + \"14bd8cd5c9c3b1bcb59e2ec9f4c8ed16.png\";","import { Vector3f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector3f;\n    public textureCoordinate: TextureCoordinate;\n}\n","import { Vector3f } from '../math';\r\nimport { BasicCamera } from './BasicCamera';\r\n\r\nexport class ControllableCamera extends BasicCamera {\r\n\r\n    constructor() {\r\n        super(new Vector3f(0, 0, 0), 0, 0, 0);\r\n    }\r\n\r\n    public moveForward(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.position.x += distance * -Math.sin(this.yaw);\r\n        this.position.z += distance * -Math.cos(this.yaw);\r\n    }\r\n\r\n    public moveBackward(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.position.x -= distance * -Math.sin(this.yaw);\r\n        this.position.z -= distance * -Math.cos(this.yaw);\r\n    }\r\n\r\n    public turnLeft(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.yaw += distance;\r\n    }\r\n\r\n    public turnRight(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.yaw -= distance;\r\n    }\r\n\r\n    public turnUp(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.pitch += distance;\r\n    }\r\n\r\n    public turnDown(speed: number, deltaTime: number): void {\r\n        let distance = speed * deltaTime;\r\n        this.pitch -= distance;\r\n    }\r\n\r\n}","import { CameraKeyFrame } from './CameraKeyFrame';\r\nimport { Vector3f } from '../math/Vector3f';\r\nimport { Matrix4f } from '../math/Matrix4f';\r\nimport { BasicCamera } from '../camera';\r\nimport { Vector4f } from \"../math/Vector4f\";\r\n\r\nexport class CameraAnimator {\r\n\r\n    private keyFrames: Array<CameraKeyFrame>;\r\n    pos: Vector3f;\r\n\r\n    // TODO:\r\n    // - should we really loop or better restart??\r\n    // - dont use linear interpolation see bourke\r\n    // - maybe quaternions and slerp for rotation\r\n    // temp solution: no linear for \r\n\r\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>) {\r\n        this.keyFrames = keyFrames;\r\n    }\r\n\r\n    getViewMatrix(elapsedTime: number): Matrix4f {\r\n\r\n        let keyFrameDuration = 5000;\r\n\r\n        let first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\r\n        let zero = ((first - 1)+this.keyFrames.length) % this.keyFrames.length;\r\n        let second = (first + 1) % this.keyFrames.length;\r\n        let third = (first + 2) % this.keyFrames.length;\r\n        let fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\r\n\r\n        let mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\r\n        let position = new Vector3f(\r\n            CosineInterpolate(this.keyFrames[first].position.x, this.keyFrames[second].position.x, fraction),\r\n            CosineInterpolate(this.keyFrames[first].position.y, this.keyFrames[second].position.y, fraction),\r\n            CosineInterpolate(this.keyFrames[first].position.z, this.keyFrames[second].position.z, fraction)\r\n        );\r\n         position = new Vector3f(\r\n            CubicInterpolate(this.keyFrames[zero].position.x,this.keyFrames[first].position.x, this.keyFrames[second].position.x,this.keyFrames[third].position.x, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].position.y,this.keyFrames[first].position.y, this.keyFrames[second].position.y,this.keyFrames[third].position.y, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].position.z,this.keyFrames[first].position.z, this.keyFrames[second].position.z,this.keyFrames[third].position.z, fraction)\r\n        );\r\n        let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\r\n\r\n        look = new Vector3f(\r\n            CubicInterpolate(this.keyFrames[zero].rotation.x,this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x,this.keyFrames[third].rotation.x, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].rotation.y,this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y,this.keyFrames[third].rotation.y, fraction),\r\n            CubicInterpolate(this.keyFrames[zero].rotation.z,this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z,this.keyFrames[third].rotation.z, fraction)\r\n        );\r\n        this.pos = position;\r\n\r\n        return new BasicCamera(position, look.x, look.y, look.z).getViewMatrix();\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction CosineInterpolate(y1: number, y2: number, mu: number): number {\r\n    let mu2: number;\r\n    mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\r\n    return (y1 * (1 - mu2) + y2 * mu2);\r\n}\r\n\r\nfunction CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\r\n    let a0: number;\r\n    let a1: number;\r\n    let a2: number;\r\n    let a3: number;\r\n    let mu2: number;\r\n\r\n    mu2 = mu * mu;\r\n    a0 = y3 - y2 - y0 + y1;\r\n    a1 = y0 - y1 - a0;\r\n    a2 = y2 - y0;\r\n    a3 = y1;\r\n\r\n    return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\r\n}","import { Vector3f } from '../math';\r\n\r\nexport class CameraKeyFrame {\r\n\r\n    public position: Vector3f;\r\n    public rotation: Vector3f;\r\n\r\n    constructor(position: Vector3f, rotation: Vector3f) {\r\n        this.position = position;\r\n        this.rotation = rotation;\r\n    }\r\n\r\n}","import { Matrix4f } from './Matrix4f';\r\nimport { Vector4f } from './index';\r\nimport { BoundingVolume } from './BoundingVolume';\r\nimport Plane from './Plane';\r\nimport { Vector3f } from './Vector3f';\r\n\r\nexport class Sphere implements BoundingVolume {\r\n\r\n    private center: Vector4f;\r\n    private radius: number;\r\n\r\n    public constructor(position: Vector4f, radius: number) {\r\n        this.center = position;\r\n        this.radius = radius;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Plane} plane \r\n     * @returns {boolean} \r\n     * @memberof Sphere\r\n     */\r\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\r\n        return plane.getNormal().dot(this.center) - plane.getDistance() >- this.radius;\r\n    }\r\n\r\n    public getTran(mat: Matrix4f): Vector4f {\r\n        return mat.multiplyHom(this.center);\r\n    }\r\n\r\n    public getRadius(): number {\r\n        return this.radius;\r\n    }\r\n\r\n    public getCenter(): Vector4f {\r\n        return this.center;\r\n    }\r\n\r\n}","import { Vector3f, Vector4f } from './index';\r\nimport { Sphere } from './Sphere';\r\n\r\nexport class ComputationalGeometryUtils {\r\n\r\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\r\n\r\n        if (vertices.length === 0) {\r\n            throw new Error('More than one vertex required.');\r\n        }\r\n\r\n        if (vertices.length === 1) {\r\n            return new Sphere(vertices[0], 0);\r\n        }\r\n\r\n        let center = new Vector4f(0, 0, 0, 0);\r\n        let radius = 0;\r\n\r\n        vertices.forEach(point => {\r\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\r\n        });\r\n\r\n        center = center.mul(1.0 / vertices.length);\r\n\r\n        vertices.forEach(point => {\r\n            radius = Math.max(radius, center.sub(point).length());\r\n        });\r\n\r\n        return new Sphere(center, radius);\r\n    }\r\n\r\n}","/**\r\n * Defines a plane as used for primitive clipping against the\r\n * view frustum. \r\n */\r\nimport { Vector4f } from './index';\r\n\r\nexport default class Plane {\r\n\r\n    public distance: number;\r\n    public normal: Vector4f;\r\n\r\n    constructor(normal: Vector4f, distance: number) {\r\n        this.normal = normal;\r\n        this.distance = distance;\r\n    }\r\n\r\n    public getNormal(): Vector4f {\r\n        return this.normal;\r\n    }\r\n\r\n    public getDistance(): number {\r\n        return this.distance;\r\n    }\r\n\r\n}","import { Vector3f } from './Vector3f';\r\n\r\nexport class Matrix3f {\r\n\r\n    public m11: number;\r\n    public m12: number;\r\n    public m13: number;\r\n\r\n    public m21: number;\r\n    public m22: number;\r\n    public m23: number;\r\n\r\n    public m31: number;\r\n    public m32: number;\r\n    public m33: number;\r\n\r\n    static constructXRotationMatrix(angle: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n\r\n        matrix.m11 = 1.0;\r\n        matrix.m12 = 0.0;\r\n        matrix.m13 = 0.0;\r\n\r\n        matrix.m21 = 0.0;\r\n        matrix.m22 = cos;\r\n        matrix.m23 = -sin;\r\n\r\n        matrix.m31 = 0.0;\r\n        matrix.m32 = sin;\r\n        matrix.m33 = cos;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    static constructYRotationMatrix(angle: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        matrix.m11 = Math.cos(angle);\r\n        matrix.m12 = 0.0;\r\n        matrix.m13 = Math.sin(angle);\r\n\r\n        matrix.m21 = 0.0;\r\n        matrix.m22 = 1.0;\r\n        matrix.m23 = 0.0;\r\n\r\n        matrix.m31 = -Math.sin(angle);\r\n        matrix.m32 = 0.0;\r\n        matrix.m33 = Math.cos(angle);\r\n\r\n        return matrix;\r\n    }\r\n\r\n    static constructZRotationMatrix(angle: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        matrix.m11 = Math.cos(angle);\r\n        matrix.m12 = -Math.sin(angle);\r\n        matrix.m13 = 0.0;\r\n\r\n        matrix.m21 = Math.sin(angle);\r\n        matrix.m22 = Math.cos(angle);\r\n        matrix.m23 = 0.0;\r\n\r\n        matrix.m31 = 0.0;\r\n        matrix.m32 = 0.0;\r\n        matrix.m33 = 1.0;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\r\n        let matrix = new Matrix3f();\r\n\r\n        matrix.m11 = xScale;\r\n        matrix.m12 = 0.0;\r\n        matrix.m13 = 0.0;\r\n\r\n        matrix.m21 = 0.0;\r\n        matrix.m22 = yScale;\r\n        matrix.m23 = 0.0;\r\n\r\n        matrix.m31 = 0.0;\r\n        matrix.m32 = 0.0;\r\n        matrix.m33 = zScale;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\r\n        let result = new Matrix3f();\r\n\r\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\r\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\r\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\r\n\r\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\r\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\r\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\r\n\r\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\r\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\r\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    public multiply(vector: Vector3f): Vector3f {\r\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\r\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\r\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\r\n    }\r\n}","import { Sphere } from '../math/Sphere';\r\nimport { Vector4f } from '../math/index';\r\nimport { BoundingVolume } from '../math/BoundingVolume';\r\nimport Plane from \"../math/Plane\";\r\nimport { Matrix4f } from \"../math/Matrix4f\";\r\nimport { Vector3f } from \"../math/Vector3f\";\r\n\r\nexport class FrustumCuller {\r\n\r\n    private planes: Array<Plane>;\r\n    private pos: Vector4f;\r\n    private normals: Array<Vector4f>;\r\n    private near: number;\r\n    private far: number;\r\n\r\n    public constructor() {\r\n        this.planes = new Array<Plane>();\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            this.planes.push(new Plane(new Vector4f(0, 0, 0, 0), 0));\r\n        }\r\n\r\n        this.pos = new Vector4f(0, 0, 0, 0);\r\n\r\n        const DISTANCE = 192;\r\n\r\n        let SCREEN_HEIGHT = 320 / 2;\r\n        let SCREEN_WIDTH = 200 / 2;\r\n\r\n        let HORIZONTAL_FIELD_OF_VIEW = 2.0 * Math.atan(SCREEN_HEIGHT / (2.0 * DISTANCE));\r\n        let VERTICAL_FIELD_OF_VIEW = 2.0 * Math.atan(SCREEN_WIDTH / (2.0 * DISTANCE));\r\n\r\n        let HALF_HORIZONTAL_FOV = HORIZONTAL_FIELD_OF_VIEW * 1.0;\r\n        let HALF_VERTICAL_FOV = VERTICAL_FIELD_OF_VIEW * 1.0;\r\n\r\n        const NEAR_DISTANCE: number = 1.7;\r\n        const FAR_DISTANCE: number = 30.0;\r\n\r\n        this.near = NEAR_DISTANCE;\r\n        this.far = FAR_DISTANCE;\r\n\r\n        this.normals = [\r\n            new Vector4f(Math.cos(-HALF_HORIZONTAL_FOV), 0, Math.sin(-HALF_HORIZONTAL_FOV), 0.0),\r\n            new Vector4f(-Math.cos(HALF_HORIZONTAL_FOV), 0, -Math.sin(HALF_HORIZONTAL_FOV), 0.0),\r\n            new Vector4f(0, -Math.cos(HALF_VERTICAL_FOV), -Math.sin(HALF_VERTICAL_FOV), 0.0),\r\n            new Vector4f(0, Math.cos(-HALF_VERTICAL_FOV), Math.sin(-HALF_VERTICAL_FOV), 0.0),\r\n            new Vector4f(0.0, 0.0, -1.0, 0.0),\r\n            new Vector4f(0.0, 0.0, 1.0, 0.0)\r\n        ];\r\n    }\r\n\r\n    // precompute normal vectors in constructor\r\n    // dont create temp objects\r\n    public updateFrustum(modelViewMatrix: Matrix4f, position: Vector3f): void {\r\n        const inverseRotation = modelViewMatrix.getInverseRotation();\r\n\r\n        inverseRotation.multiplyHomArr(this.normals[0], this.planes[0].normal); // left\r\n        inverseRotation.multiplyHomArr(this.normals[1], this.planes[1].normal); // right\r\n        inverseRotation.multiplyHomArr(this.normals[2], this.planes[2].normal); // bottom\r\n        inverseRotation.multiplyHomArr(this.normals[3], this.planes[3].normal); // top\r\n        inverseRotation.multiplyHomArr(this.normals[4], this.planes[4].normal); // near\r\n        inverseRotation.multiplyHomArr(this.normals[5], this.planes[5].normal); // far\r\n\r\n        this.pos.x = -position.x;\r\n        this.pos.y = -position.y;\r\n        this.pos.z = -position.z;\r\n\r\n        this.planes[0].distance = -this.planes[0].normal.dot(this.pos);\r\n        this.planes[1].distance = -this.planes[1].normal.dot(this.pos);\r\n        this.planes[2].distance = -this.planes[2].normal.dot(this.pos);\r\n        this.planes[3].distance = -this.planes[3].normal.dot(this.pos);\r\n        this.planes[4].distance = -this.planes[4].normal.dot(this.pos) + this.near;\r\n        this.planes[5].distance = -this.planes[3].normal.dot(this.pos) - this.far;\r\n    }\r\n\r\n    public isPotentiallyVisible(boundingVolume: Sphere): boolean {\r\n        for (let i = 0; i < this.planes.length; i++) {\r\n            if (!boundingVolume.isInsidePositiveHalfSpace(this.planes[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n","\nimport { FrustumCuller } from './clustered-culling/FrustumCuller';\nimport { ComputationalGeometryUtils } from './math/Geometry';\n\nimport { Sphere } from './math/Sphere';\nimport { CameraKeyFrame } from './animation/CameraKeyFrame';\nimport { CameraAnimator } from './animation/CameraAnimator';\n\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\n\n/**\n * 3d polygon clipping:\n * http://www.gamers.org/dEngine/quake/papers/ddjclip.html\n * http://www.jagregory.com/abrash-black-book/#chapter-65-3-d-clipping-and-other-thoughts\n * http://downloads.gamedev.net/pdf/gpbb/gpbb65.pdf\n * http://www.cubic.org/docs/3dclip.htm\n * http://fabiensanglard.net/polygon_codec/\n * \n * http://fabiensanglard.net/quake2/quake2_software_renderer.php\n * \n * http://www.xbdev.net/maths_of_3d/rasterization/clipping/index.php\n * http://www.gamasutra.com/view/news/168577/Indepth_Software_rasterizer_and_triangle_clipping.php\n * https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/projection-matrix-GPU-rendering-pipeline-clipping\n * http://www.songho.ca/opengl/gl_pipeline.html\n * http://www.songho.ca/opengl/gl_transform.html\n * http://www.songho.ca/opengl/gl_camera.html\n * http://www.songho.ca/opengl/gl_matrix.html\n * http://www.songho.ca/math/homogeneous/homogeneous.html\n */\nimport Texture from './Texture';\nimport Point from './Point';\n\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { BasicCamera, ControllableCamera } from './camera';\n\nimport RandomNumberGenerator from './RandomNumberGenerator';\n\ndeclare function require(string): string;\nlet json = require('./assets/f16.json');\nlet bunnyJson = <any>require('./assets/bunny.json');\nlet worldJson = <any>require('./assets/world2.json');\n\nlet torusJson = <any>require('./assets/stravaganza.json');\nlet gearJson = <any>require('./assets/gear.json');\nlet roomJson = <any>require('./assets/room.json');\nlet hoodlumJson = <any>require('./assets/hoodlum.json');\nlet labJson = <any>require('./assets/lab.json');\nlet labJson2 = <any>require('./assets/lab2.json');\nlet bakedJson = <any>require('./assets/abstract.json');\nlet platonian = <any>require('./assets/platonian_backed.json');\n\nlet hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nabstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n\nclass RightEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n\nclass LeftEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n\nclass TopEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n\nclass BottomEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector3f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n\nexport default class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    private x: number = 0;\n    public cullMode: CullFace = CullFace.BACK;\n\n    private camera: ControllableCamera;\n\n    private obj: any;\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj2: any;\n    private blenderObj3: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    private blenderObj8: any;\n    private blenderObj9: any;\n    private blenderObj10: any;\n    private bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setBob(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.camera = new ControllableCamera();\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n\n        this.obj = this.createObject();\n        this.bunnyObj = this.createBunny();\n        this.blenderObj = this.getBlenderScene(worldJson);\n        this.blenderObj2 = this.getBlenderScene(torusJson, false);\n        this.blenderObj3 = this.getBlenderScene(gearJson, false);\n        this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        this.blenderObj6 = this.getBlenderScene(labJson, false);\n        this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n        this.blenderObj8 = this.getBlenderScene(bakedJson, false);\n        this.blenderObj9 = this.getBlenderScene(platonian, false);\n        this.blenderObj10 = this.getBlenderScene(labJson2, false);\n\n\n        this.sphere = this.createSphere();\n\n        this.plane = this.createPlane();\n        this.cylinder = this.createCylinder();\n        this.cylinder2 = this.createCylinder2(texture);\n        this.sphereDisp = this.createSphereDistplaced(texture);\n        this.sphereDisp2 = this.createSphereDistplaced(texture2);\n\n\n        /*\n        document.addEventListener(\"keydown\", (e) => {\n            console.log('key pressed');\n            if (e.which == 38) this.camera.moveForward(0.2, 1.0);\n            if (e.which == 40) this.camera.moveBackward(0.2, 1.0);\n            if (e.which == 37) this.camera.turnLeft(0.05, 1.0);\n            if (e.which == 39) this.camera.turnRight(0.05, 1.0);\n        });*/\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearH(col: number, h: number) {\n        let color: number = col;\n        let count: number = this.width * h;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearCol(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public readPixel2(fb: Uint32Array, x: number, y: number, color: number): number {\n        return fb[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawLens(texture: Texture, tex: Texture, time: number) {\n\n        const radius = 47;\n        let xoff = 320 / 2 + Math.cos(6 * time * 0.0002) * (320 / 2 - 50);\n        let yoff = 200 / 2 + Math.sin(4 * time * 0.0002) * (200 / 2 - 50);\n\n        // TODO: precalculate displacement in an array\n        for (let y = -radius; y <= radius; y++) {\n            for (let x = -radius; x <= radius; x++) {\n                if (x * x + y * y <= radius * radius) {\n\n                    let xx = Math.round(x + xoff);\n                    let yy = Math.round(y + yoff);\n\n                    let z = 1 + Math.sqrt(radius * radius - x * x - y * y) * 0.03;\n                    let xx2 = Math.round(x / z + xoff);\n                    let yy2 = Math.round(y / z + yoff);\n                    let col = texture.texture[xx2 + yy2 * 320];\n\n                    let index = xx + yy * 320;\n                    this.framebuffer[index] = col;\n                }\n            }\n        }\n\n        this.drawTexture(Math.round(xoff - 50), Math.round(yoff - 50), tex, 1.0);\n    }\n\n    public cinematicScroller(texture: Texture, time: number) {\n        let scrollText: Array<string> = [\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '', '', '', '', '', '',\n            '', '', '', '', '',\n            'YOU HAVE BEEN WATCHING',\n            '',\n            'D A R K   M A T T E R',\n            '',\n            'A JAVASCRIPT DEMO MADE FOR',\n            'NORDLICHT 2018',\n            '',\n            'CREDITS',\n            '',\n            'CODE BY',\n            'TRIGGER',\n            '',\n            'GRAFICS BY',\n            'PREMIUM',\n            '',\n            'MUSIC BY',\n            'VIRGILL'\n        ];\n        time = time * 0.6;\n\n        let scrollerOffset = Math.round(this.interpolate(0, 250, time % 255) * 8);\n\n        for (let i = 1; i < 200 / 8; i++) {\n            let text = scrollText[(i + (time / 255) | 0) % scrollText.length];\n            let x = (320 / 2 - text.length * 8 / 2) | 0;\n            let y = 8 * i - scrollerOffset;\n            // TODO: proper text clipping to rect\n            // maybe just for first and last row\n            this.drawText(x, y, text, texture);\n        }\n    }\n\n    public starField() {\n        // plus razor logo\n    }\n\n\n    // Crossfade 2 effects\n    public crossFade() {\n\n    }\n\n    // optimization:\n    // - downscale image to half the size before bluring\n    // render result to texture in order to not blur the logo\n    tmp = new Uint32Array(320 * 200);\n    tmp2 = new Uint32Array(320 * 200);\n    public blur() {\n        let scale = 1 / (3.1);\n        let r: number = 0;\n        let g: number = 0;\n        let b: number = 0;\n        let index = 1 + 320;\n        let sumIndex = 320;\n        let color: number;\n        for (let y = 0; y < 198; y++) {\n            for (let x = 0; x < 318; x++) {\n                color = this.framebuffer[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex++;\n\n                color = this.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                color = this.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                sumIndex -= 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp[index] = r | g << 8 | b << 16 | 255 << 24;\n                index++;\n            }\n            sumIndex += 2;\n            index += 2;\n        }\n\n        index = 320 + 1;\n        sumIndex = 1;\n        for (let x = 1; x < 320 - 1; x++) {\n            //   index = x + 320;\n            sumIndex = x;\n            for (let y = 0; y < 198; y++) {\n                color = this.tmp[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex += 320;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += 320;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += 320;\n\n                sumIndex -= 320 * 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp2[index] = r | g << 8 | b << 16 | 255 << 24;\n                index += 320;\n            }\n            index += -198 * 320 + 1;\n        }\n\n        /*\n                for (let y = 1; y < 200 - 1; y++) {\n                    for (let x = 1; x < 320 - 1; x++) {\n                        r = g = b = 0;\n                        for (let i = -1; i <= 1; i++) {\n                            let color = this.readPixel2(this.tmp, x, y + i, 0);\n                            r += color & 0xff;\n                            g += color >> 8 & 0xff;\n                            b += color >> 16 & 0xff;\n                        }\n                        r *= scale;\n                        g *= scale;\n                        b *= scale;\n                        this.tmp2[x + y * 320] = r | g << 8 | b << 16 | 255 << 24;\n                    }\n                }*/\n        this.fastFramebufferCopy(this.framebuffer, this.tmp2);\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    private interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public drawRaster() {\n        let colorLUT = new Array<number>();\n        for (let i = 0; i < 16; i++) {\n            let shade = (Math.sin(Math.PI * i / 15) * 255) | 0;\n            let color = shade << 16 | shade << 8 | shade | 255 << 24;\n            colorLUT.push(color);\n        }\n\n        let pos = ((Math.sin(Date.now() * 0.002) + 1) / 2 * (200 - 16)) | 0;\n        for (let i = 0; i < 16; i++) {\n            this.framebuffer.fill(colorLUT[i], 320 * (pos + i), 320 * (pos + i) + 320);\n        }\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public draw3dBobs() {\n\n    }\n\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n        /*\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        while (--i) {\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n            src[--k] = dest[k]; src[--k] = dest[k];\n        }\n        */\n    }\n\n    public drawBobs(texture: Texture, time: number) {\n        let scaledTime = time * 0.2;\n        const BALL_SIZE = 16;\n        for (let i = 0; i < 30; i++) {\n            let x = (Math.cos(3 * scaledTime * 0.002 + i * 0.11) * (320 / 2 - BALL_SIZE / 2)) | 0;\n            let y = (Math.sin(4 * scaledTime * 0.002 + i * 0.11) * (200 / 2 - BALL_SIZE / 2)) | 0;\n            //this.drawTexture(320 / 2 - BALL_SIZE / 2 + x, 200 / 2 - BALL_SIZE / 2 + y, texture, 1.0);\n            this.drawTextureNoClipAlpha(320 / 2 - BALL_SIZE / 2 + x, 200 / 2 - BALL_SIZE / 2 + y, texture);\n        }\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public raveMoview(elapsedTime: number, texture: Texture): void {\n\n\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, -(((elapsedTime / 200) | 0) % 11) * 200);\n\n    }\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public glitchScreen(elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.0003) * 0.5 + 0.5);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        let texture2 = new Texture();\n        texture2.height = 200;\n        texture2.width = 320;\n        texture2.texture = this.framebuffer;\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                this.drawTextureRect(20 * (16 - x), 20 * ((16 * rng.getFloat()) | 0), 20 * x, 20 * y, 20, 20, texture2, 0.1 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < 16; x++) {\n                for (let y = 0; y < 10; y++) {\n                    this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n\n\n        let rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            let scale = rng2.getFloat() * glitchFactor;\n            let off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * 320;\n                let glIndex = yStart * 320 + 320 - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    this.framebuffer[index++] = this.tmpGlitch[glIndex++];\n                }\n\n\n                glIndex = yStart * 320;\n                let count = 320 - offset;\n\n                for (let i = 0; i < count; i++) {\n                    this.framebuffer[index++] = this.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public floodFill(texture: Texture, time: number) {\n\n        let pos = ((time * 0.02) | 0) % 200;\n\n        let index = 320 * 200;\n\n        for (let y = 0; y < pos; y++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[index] = texture.texture[index];\n                index--;\n            }\n        }\n\n        let index2 = index;\n        for (let y = 0; y < 200 - pos; y++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[index] = texture.texture[index2];\n                index--;\n                index2--;\n            }\n            index2 += 320;\n        }\n    }\n\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = this.getBilinearFilteredPixel2(texture, xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = this.getBilinearFilteredPixel2(texture, xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n\n\n    /**\n     * Span Renderer\n     * \n     * http://stackoverflow.com/questions/27639005/how-to-copy-static-files-to-build-directory-with-webpack\n     */\n    drawSpan(dist: number, xpos: number, ypos: number, scale: number, texture: Texture) {\n        let framebufferIndex = xpos + ypos * this.width;\n        let textureIndex = (((ypos - Date.now() * 0.029) | 0) & 0xff) * texture.width;\n        let textureForwardDifference = texture.width / dist;\n        let hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            let color = texture.texture[textureIndex | 0];\n\n            let r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            let g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            let b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            this.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        /* return new Vector3f(Math.round((320 / 2) + (t1.x * 1.5 / (-t1.z * 0.0078))),\n             // negation breaks winding and cull mode!!\n             Math.round((200 / 2) - (t1.y * 1.5 / (-t1.z * 0.0078))), t1.z);*/\n        return new Vector3f(Math.round((320 / 2) + (192 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 1.5 / (-t1.z * 0.0078))), t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    /**\n     * https://mikro.naprvyraz.sk/docs/\n     * http://simonstechblog.blogspot.de/2012/04/software-rasterizer-part-1.html\n     * http://www.lysator.liu.se/~mikaelk/doc/perspectivetexture/\n     * http://chrishecker.com/Miscellaneous_Technical_Articles\n     * http://www.gamasutra.com/blogs/MichaelKissner/20160112/263097/Writing_a_Game_Engine_from_Scratch__Part_4_Graphics_Library.php\n     * https://www.codeproject.com/Articles/170296/D-Software-Rendering-Engine-Part-I\n     * https://www.davrous.com/2013/06/13/tutorial-series-learning-how-to-write-a-3d-soft-engine-from-scratch-in-c-typescript-or-javascript/\n     * https://www.youtube.com/playlist?list=PLEETnX-uPtBXP_B2yupUKlflXBznWIlL5\n     * https://www.youtube.com/watch?v=cQY3WTKRI7I\n     * https://www.youtube.com/playlist?list=PLEETnX-uPtBUbVOok816vTl1K9vV1GgH5\n     * https://www.youtube.com/playlist?list=PLEETnX-uPtBUG4iRqc6bEBv5uxMXswlEL\n     * https://www.youtube.com/playlist?list=PLbCDZQXIq7uYaf263gr-zb0wZGoCL-T5G\n     * https://www.youtube.com/watch?v=9A5TVh6kPLA\n     * http://joshbeam.com/articles/triangle_rasterization/\n     * http://developers-club.com/posts/257107/\n     * https://www.codeproject.com/Articles/170296/3D-Software-Rendering-Engine-Part-I\n     * https://gamedev.stackexchange.com/questions/44263/fast-software-color-interpolating-triangle-rasterization-technique\n     * https://fgiesen.wordpress.com/2011/07/05/a-trip-through-the-graphics-pipeline-2011-part-5/\n     * http://insolitdust.sourceforge.net/code.html\n     */\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 500);\n    }\n\n    public debug(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let index: Array<number> = [\n            1, 2, 3, 3, 4, 1,\n            1 + 8, 2 + 8, 3 + 8, 3 + 8, 4 + 8, 1 + 8,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(-1.0, -1.0, 1.0), new Vector3f(1.0, -1.0, 1.0),\n            new Vector3f(1.0, 1.0, 1.0), new Vector3f(-1.0, 1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0),\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n\n            new Vector3f(-1.0, -1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(1.0, -1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n            new Vector3f(1.0, 1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(-1.0, 1.0, 1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n            new Vector3f(-1.0, -1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(1.0, -1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n            new Vector3f(1.0, 1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)), new Vector3f(-1.0, 1.0, -1.0).add(new Vector3f(2.0, 0.0, 0.0)),\n        ];\n\n        let colorAr: Array<number> = [\n            255 << 24 | 255 << 0,\n            255 << 24 | 255 << 8,\n            255 << 24 | 255 << 16,\n            255 << 24 | 255 << 16 | 255,\n            255 << 24 | 255 << 16 | 255 << 8,\n            255 << 24 | 255 << 8 | 128,\n        ];\n\n        let scale = 3.2;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructZRotationMatrix(elapsedTime * 0.08));\n\n\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 9; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        for (let i = 0; i < index.length; i += 3) {\n            // TODO: use eye space triangles for backface culling\n            let col = 255 << 24 | 255 << 16;\n            let col2 = 255 << 24 | 255;\n\n            this.drawTriangleDDA(points2[index[i] - 1], points2[index[i + 1] - 1], points2[index[i + 2] - 1], colorAr[(((i) / 3) | 0) % 6]);\n        }\n    }\n\n\n\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n        let radius = (Math.sin(pos.z * 11 + Date.now() * 0.001) + 1) / 2 +\n            (Math.sin(pos.x * 11 + Date.now() * 0.001) + 1) / 3;\n        pos.x = pos.x + pos.x * radius;\n        pos.y = pos.y + pos.y * radius;\n        pos.z = pos.z + pos.z * radius;\n        return pos;\n    }\n\n\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawOldSchoolPlasma(elapsedTime: number): void {\n        let time = elapsedTime * 0.0007 * 1.0;\n        let lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        let radialWaveCenter = new Vector3f(470.0 / 2.0, 230.0 / 2.0, 0).add(new Vector3f(470.0 / 2.0 *\n            Math.sin(-time), 230.0 / 2.0 * Math.cos(-time), 0));\n\n        let difference = new Vector3f(0, 0, 0);\n        // TODO: implement sin/cos lookup tables plus starfield ;)\n        let index = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let directionalWave = Math.sin(((x * lineDirection.x + y * lineDirection.y) * 0.02 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                let radialWave = (Math.cos(difference.length() * 0.03) + 1.0) * 0.5;\n                let waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                let red = (Math.cos(Math.PI * waveSum / 0.5 + time) + 1.0) * 0.5 * 255;\n                let green = (Math.sin(Math.PI * waveSum / 0.5 + time) + 1.0) * 0.5 * 255;\n                let blue = (Math.sin(time) + 1.0) * 0.5 * 255;\n\n                this.framebuffer[index++] = 255 << 24 | blue << 16 | green << 8 | red;\n            }\n        }\n    }\n\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z;\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        // draw clip region\n        let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n        this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    // seems to habe a small bug\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == Framebuffer.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & Framebuffer.REGION_CODE_TOP) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & Framebuffer.REGION_CODE_BOTTOM) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & Framebuffer.REGION_CODE_RIGHT) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & Framebuffer.REGION_CODE_LEFT) != Framebuffer.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) == Framebuffer.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) != Framebuffer.REGION_CODE_CENTER;\n    }\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    public dec2bin(dec: number) {\n        return (dec >>> 0).toString(2);\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = Framebuffer.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= Framebuffer.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= Framebuffer.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= Framebuffer.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= Framebuffer.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n    public shadingSphere(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        // Create MV Matrix\n        let scale = 5.8;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -26 + 4 * Math.sin(elapsedTime * 0.7)).multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        normals.forEach(element => {\n            normals2.push(modelViewMartrix.multiplyHom(element));\n        });\n\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiplyHom(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z;\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.5, 0.5, 0.5, 0.0).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                this.drawTriangleDDA(v1, v2, v3, color);\n                //this.drawLineDDA(v1, v2, colLine);\n                //this.drawLineDDA(v1, v3, colLine);\n                //this.drawLineDDA(v3, v2, colLine);\n            }\n        }\n    }\n\n\n    private clearColorBuffer() {\n        this.clear();\n    }\n\n    public createObject() {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.mul(-1).normalize()); // normalize?\n        }\n\n        // Create class for objects\n        return {\n            points: points, normals: normals, index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        }\n    }\n\n    public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let index: Array<number> = [\n        ];\n\n        let points: Array<Vector3f> = [];\n        for (let y = 0; y < 256; y++) {\n            for (let x = 0; x < 256; x++) {\n                points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n            }\n        }\n\n        for (let y = 0; y < 256; y += 1) {\n            for (let x = 0; x < 256 - 1; x += 1) {\n                index.push(0 + x + (y * 256));\n                index.push(1 + x + (y * 256));\n            }\n        }\n\n        for (let x = 0; x < 256; x += 1) {\n            for (let y = 0; y < 256 - 1; y += 1) {\n\n                index.push(x + ((y + 0) * 256));\n                index.push(x + ((y + 1) * 256));\n            }\n        }\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n        let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x + xOff;\n            let y = transformed.y;\n            let z = transformed.z + zOff; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n\n        for (let i = 0; i < index.length; i += 2) {\n            let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n            let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    private getDodecahedronMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let phi = (1 + Math.sqrt(5)) * 0.5;\n        let a = 1;\n        let b = 1 / phi;\n        let c = 2 - phi;\n\n        points = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        index = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getIcosahedronMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let phi = (1 + Math.sqrt(5)) * 0.5;\n        let a = 0.5;\n        let b = a * 2 / (2 * phi);\n\n        points = [\n            new Vector4f(-b, 0, a), new Vector4f(b, 0, a), new Vector4f(-b, 0, -a), new Vector4f(b, 0, -a),\n            new Vector4f(0, a, b), new Vector4f(0, a, -b), new Vector4f(0, -a, b), new Vector4f(0, -a, -b),\n            new Vector4f(a, b, 0), new Vector4f(-a, b, 0), new Vector4f(a, -b, 0), new Vector4f(-a, -b, 0)\n        ];\n\n        index = [\n            1, 4, 0, 4, 9, 0, 4, 5, 9, 8, 5, 4,\n            1, 8, 4, 1, 10, 8, 10, 3, 8, 8, 3, 5,\n            3, 2, 5, 3, 7, 2, 3, 10, 7, 10, 6, 7,\n            6, 11, 7, 6, 0, 11, 6, 1, 0, 10, 1, 6,\n            11, 0, 9, 2, 11, 9, 5, 2, 9, 11, 2, 7\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getTrapezoidMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let a = 0.5;\n        let b = 0.05;\n        points = [\n            new Vector4f(-b, a, -b),\n            new Vector4f(b, a, -b),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(-b, a, b),\n            new Vector4f(b, a, b),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        index = [\n            0, 1, 2,\n            0, 2, 3,\n            5, 4, 7,\n            5, 7, 6,\n            1, 5, 6,\n            1, 6, 2,\n            4, 0, 3,\n            4, 3, 7,\n            4, 5, 1,\n            4, 1, 0\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getCubeMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let a = 0.5;\n\n        points = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        index = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getPyramidMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        let phi = (1 + Math.sqrt(5)) * 0.5;\n        let a = 0.5;\n        let b = a * 2 / (2 * phi);\n\n        points = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        index = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    private getPlaneMesh(): any {\n        let points: Array<Vector4f> = new Array<Vector4f>();\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        let index: Array<number> = new Array<number>();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n\n        let a = 0.5;\n\n\n        points = [\n            new Vector4f(-a, 0, a),\n            new Vector4f(a, 0, a),\n            new Vector4f(a, 0, -a),\n            new Vector4f(-a, 0, -a),\n        ];\n\n        index = [\n            0, 1, 2, 2, 3, 0\n        ];\n\n        // todo use index array for normals to have less normal objects\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize()); // normalize?\n        }\n\n        // Create class for objects\n        let obj = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n\n        return obj;\n    }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public reproduceRazorScene(elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        let camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n        let colLine = 255 << 24 | 255 << 8;\n\n        let model = this.getDodecahedronMesh();\n        this.drawObject(model, modelViewMartrix, 221, 96, 48);\n\n        let yDisplacement = -1.5;\n        let distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getIcosahedronMesh();\n        this.drawObject(model, modelViewMartrix, 239, 187, 115);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getCubeMesh()\n        this.drawObject(model, modelViewMartrix, 144, 165, 116);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getCubeMesh();\n        this.drawObject(model, modelViewMartrix, 191, 166, 154);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.getPyramidMesh();\n        this.drawObject(model, modelViewMartrix, 125, 128, 146);\n\n        /**\n         * SHADOWS\n         */\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix));\n\n        this.drawObject(this.getDodecahedronMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix));\n\n        this.drawObject(this.getPyramidMesh(), modelViewMartrix, 48, 32, 24, true, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix))\n\n        this.drawObject(this.getCubeMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix))\n\n        this.drawObject(this.getCubeMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix(modelViewMartrix).multiplyMatrix(modelViewMartrix));\n\n\n        this.drawObject(this.getIcosahedronMesh(), modelViewMartrix, 48, 32, 24, true);\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n    private getBlenderScene(file: any, disp: boolean = true): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let index: Array<number> = new Array<number>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n\n                //points.push(new Vector4f(v.x, v.y, v.z).mul(0.5).add(new Vector4f(0,3.7,0,0)));\n            });\n\n            for (let x = 0; x < object.faces.length; x++) {\n                index.push(object.faces[x].vertices[0]);\n                index.push(object.faces[x].vertices[1]);\n                index.push(object.faces[x].vertices[2]);\n            }\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,\n                faces: object.faces,\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere,\n                name: object.name\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    /**\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawPlanedeformationTunnel(elapsedTime: number, texture: Texture, texture2: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist;\n                dist += elapsedTime * 0.02;\n                dist2 += elapsedTime * 0.039;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128 + elapsedTime * 0.0069;\n\n                let color1 = texture.texture[(dist2 & 0xff) + (angle & 0xff) * 255];\n                let color2 = texture2.texture[(dist & 0xff) + (angle & 0xff) * 255];\n\n                let alpha = 0.4;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((color1 >> 0) & 0xff) * (inverseAlpha) + (((color2) >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((color1 >> 8) & 0xff) * (inverseAlpha) + (((color2) >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((color1 >> 16) & 0xff) * (inverseAlpha) + ((color2 >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n\n    public drawParticleStreams(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            let radius = 2.8;\n            let radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                let x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                let y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                let z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                let transformed = this.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort(function (a, b) {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                //let size = -(2.0 * 192 / (element.z));\n                let size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    this.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n    public drawWormhole(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            let radius = 5.8;\n\n            for (let j = 0; j < num2; j++) {\n\n                let x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                let y = Math.cos(Math.PI * 2 / num2 * j) * radius + Math.cos(Math.PI * 2 / num * i) * 10;\n                let z = Math.sin(Math.PI * 2 / num2 * j) * radius + Math.sin(Math.PI * 2 / num * i) * 10;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(\n            Math.sin(-Math.PI * 0.5 + Math.PI * 2 / num * (elapsedTime * 0.004 * scale)) * 10,\n            Math.cos(-Math.PI * 0.5 + Math.PI * 2 / num * (elapsedTime * 0.004 * scale)) * 10\n            , -49).multiplyMatrix(\n\n                Matrix4f.constructYRotationMatrix(Math.PI * 0.5));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            //let size = -(2.0 * 192 / (element.z));\n            let size = -(1.3 * 192 / (element.z));\n            if (element.z < -4)\n                this.drawParticleNoDepth(\n                    Math.round(element.x - size / 2),\n                    Math.round(element.y - size / 2),\n                    Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-90, -55, element.z));\n        });\n    }\n\n    drawParticleTorus(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 300;\n        for (let i = 0; i < num; i++) {\n            let radi = 3.4 * (2 + Math.sin((i * Math.PI / (num / 2)) * 2 + elapsedTime * 0.0004));//*sinf(Time*0.0008f)));\n            let move = elapsedTime * 0.0015;\n            let x = radi * Math.cos(((move + i) * Math.PI / (num / 2)) * 7);\n            let y = radi * Math.cos(((move + i) * Math.PI / (num / 2)) * 4);\n            let z = radi * Math.sin(((move + i) * Math.PI / (num / 2)) * 7);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -20)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0003)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0003)));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(2.2 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x) - Math.round(size / 2),\n                Math.round(element.y) - Math.round(size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0);\n        });\n    }\n\n    /**\n     * todo:\n     * - better wavefront format that uses precomputed normals\n     * - maybe use groups for material and culling\n     * - use normal matrix instead of normalization during shading\n     * - do not create the scene every frame\n     * - create material class\n     * - use camera path :-)!!!!!\n     * - fix strange artefacts where geometry hits the plane\n     * \n     * @param {number} elapsedTime \n     * @memberof Framebuffer\n    \n     * \n     */\n    public drawBlenderScene(elapsedTime: number, texture: Texture, texture2?: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        this.clearCol(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let keyFrames: Array<CameraKeyFrame> = [\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(0, 0, 0)),\n            new CameraKeyFrame(new Vector3f(5, 10, 10), new Vector3f(0, 0, 0.1)),\n            new CameraKeyFrame(new Vector3f(5, 10, 0), new Vector3f(1.5, -1, -0.2)),\n            new CameraKeyFrame(new Vector3f(5, 3, -10), new Vector3f(2.5, 0, -0.09)),\n            new CameraKeyFrame(new Vector3f(-5, 7, -10), new Vector3f(3.5, 0, 1)),\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(4, 0, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 3, -2), new Vector3f(3, -0.2, 0.)),\n            new CameraKeyFrame(new Vector3f(18, 2, -0), new Vector3f(2, -0.4, 0.)),\n            new CameraKeyFrame(new Vector3f(15, 4, -0), new Vector3f(2, -0.5, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 7, -10), new Vector3f(2.5, 0, -0.09)),\n        ];\n\n        let cameraAnimator = new CameraAnimator();\n        cameraAnimator.setKeyFrames(keyFrames);\n\n        let modelViewMartrix: Matrix4f = cameraAnimator.getViewMatrix(elapsedTime);\n\n\n        let pos = new Vector4f(-modelViewMartrix.m14, -modelViewMartrix.m24, -modelViewMartrix.m34);\n\n        let count = 0;\n\n        let frustumCuller = new FrustumCuller();\n        frustumCuller.updateFrustum(modelViewMartrix, cameraAnimator.pos);\n        let i = 0;\n\n        for (let j = 0; j < this.blenderObj.length; j++) {\n\n            let model = this.blenderObj[j];\n\n            if (frustumCuller.isPotentiallyVisible(model.boundingSphere)) {\n                this.drawObject2(model, modelViewMartrix, 144, 165, 116);\n                let colLine = 255 << 24 | 255 << 8;\n                // this.drawBoundingSphere(model.boundingSphere, modelViewMartrix, colLine);\n                // element.vis = true;\n                count++;\n            } else {\n                let colLine = 255 << 24 | 255;\n                // this.drawBoundingSphere(model.boundingSphere, modelViewMartrix, colLine);\n                //   element.vis = false;\n            }\n\n        }\n\n        if (texture2) {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(66);\n            for (let i = 0; i < 640; i++) {\n                //points.push(new Vector3f(rng.getFloat() * 30 - 15, rng.getFloat() * 10 - 1, rng.getFloat() * 30 - 15));\n                let x = rng.getFloat() * 30 - 15;\n                x += Math.sin(elapsedTime * 0.0008 + x) * 2;\n                let y = rng.getFloat() * 30 - 15;\n                y += Math.sin(elapsedTime * 0.0009 + y) * 2;\n                let z = rng.getFloat() * 30 - 15;\n                z += Math.sin(elapsedTime * 0.0011 + z) * 2;\n                points.push(new Vector3f(x, y, z));\n            }\n\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                let transformed = this.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort(function (a, b) {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                let size = -(3.1 * 192 / (element.z));\n                this.drawSoftParticle(\n                    Math.round(element.x - size * 0.5),\n                    Math.round(element.y - size * 0.5),\n                    Math.round(size), Math.round(size), texture2, 1 / element.z, 1.0);\n            });\n        }\n        this.drawText(8, 18 + 8, 'RENDERED OBJECTS: ' + count + '/' + this.blenderObj.length, texture);\n        let colred = 255 << 24 | 255 | 255 << 8 | 255 << 16;\n        let width = 320 / 2;\n        let height = 200 / 2;\n        //this.drawLineDDANoZ(new Vector3f(width / 2, height / 2, 0), new Vector3f(width / 2 + width, height / 2, -100), colred);\n        //this.drawLineDDANoZ(new Vector3f(width / 2, height / 2, 0), new Vector3f(width / 2, height / 2 + height, -100), colred);\n        //this.drawLineDDANoZ(new Vector3f(width / 2 + width, height / 2, 0), new Vector3f(width / 2 + width, height / 2 + height, -100), colred);\n        //this.drawLineDDANoZ(new Vector3f(width / 2, height / 2 + height, 0), new Vector3f(width / 2 + width, height / 2 + height, -100), colred);\n    }\n\n    /**\n     * Requirements for blender export:\n     * - Wavefront OBJ\n     * - \n     */\n    public drawBlenderScene2(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model = this.blenderObj2[0];\n        this.drawObject2(model, mv, 246, 165, 177);\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * this.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * this.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.blenderObj2[1];\n        this.drawObject2(model, mv, 186, 165, 197);\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.drawObject2(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.drawObject2(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.drawObject2(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.drawObject2(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.drawObject2(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.drawObject2(model, mv, 244, 100, 116, false, true);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n\n    public drawBlenderScene7(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture,\n    skybox?: any): void {\n\n        elapsedTime*= 0.2;\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = 1.0;\n        for (let j = 0; j < this.blenderObj8.length; j++) {\n            let model = this.blenderObj8[j];\n            this.drawObjectTexture(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        if(skybox)\n         this.drawSkyBox(mv.getRotation(),skybox);\n\n         let scale = 20;\n         let lensflareScreenSpace = this.project(camera.getRotation().multiply(new Vector3f(1.1*scale, 2*scale, -0.9*scale)));\n\n         this.drawLensFlare(lensflareScreenSpace, elapsedTime * 1.2, texture, dirt);\n    }\n\n    public drawBlenderScene8(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -64 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.00035).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0003)));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = 1.0;\n        for (let j = 0; j < this.blenderObj9.length; j++) {\n            let model = this.blenderObj9[j];\n            this.drawObjectTexture(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n    }\n\n    public drawSkyBox(rotation: Matrix4f, skybox: { back?: Texture, down?: Texture, front?: Texture, left?: Texture, right?: Texture, up?: Texture }): void {\n\n\n        const sclae = 20;\n        let textures = [\n            skybox.back,\n            skybox.left,\n            skybox.front,\n            skybox.right\n        ];\n        for (let i = 0; i < 4; i++) {\n            let camera: Matrix4f =\n              rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n            let skyPoints = [\n                new Vector4f(1, 1, -1, 1),\n                new Vector4f(-1, 1, -1, 1),\n                new Vector4f(-1, -1, -1, 1),\n                new Vector4f(1, 1, -1, 1),\n                new Vector4f(-1, -1, -1, 1),\n                new Vector4f(1, -1, -1, 1)\n            ];\n            //skybox: starz\n            let skyBoxSideModel = {\n                normals: [],\n                normals2: [],\n                points: skyPoints,\n                points2: skyPoints.map(x => new Vector3f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            this.setBob(textures[i]);\n            this.drawObjectTexture2(skyBoxSideModel, mv, 244, 225, 216);\n\n        }\n\n         let camera: Matrix4f =\n\n\n  \n\n          rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4*1 ).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4 )))\n                );\n\n\n         let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n         let skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n        //skybox: starz\n         let skyBoxSideModel = {\n            normals: [],\n            normals2: [],\n            points: skyPoints,\n            points2: skyPoints.map(x => new Vector3f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        this.setBob(skybox.up);\n        this.drawObjectTexture2(skyBoxSideModel, mv, 244, 225, 216);\n\n\n         camera =\n         rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2 ).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4 )))\n            \n            );\n\n\n     mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n     skyPoints = [\n        new Vector4f(1, 1, -1, 1),\n        new Vector4f(-1, 1, -1, 1),\n        new Vector4f(-1, -1, -1, 1),\n        new Vector4f(1, 1, -1, 1),\n        new Vector4f(-1, -1, -1, 1),\n        new Vector4f(1, -1, -1, 1)\n    ];\n    //skybox: starz\n     skyBoxSideModel = {\n        normals: [],\n        normals2: [],\n        points: skyPoints,\n        points2: skyPoints.map(x => new Vector3f(0, 0, 0)),\n        uv: [\n            new TextureCoordinate(1, 1),\n            new TextureCoordinate(0, 1),\n            new TextureCoordinate(0, 0),\n            new TextureCoordinate(1, 1),\n            new TextureCoordinate(0, 0),\n            new TextureCoordinate(1, 0),\n        ],\n        faces: [\n            {\n                vertices: [0, 1, 2],\n                uv: [0, 1, 2]\n            },\n            {\n                vertices: [3, 4, 5],\n                uv: [3, 4, 5]\n            }\n        ]\n    };\n\n    this.setBob(skybox.down);\n    this.drawObjectTexture2(skyBoxSideModel, mv, 244, 225, 216);\n\n\n    }\n\n    public drawBlenderScene9(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture, skybox: { back?: Texture, down?: Texture, front?: Texture, left?: Texture, right?: Texture, up?: Texture }): void {\n\n        this.clearDepthBuffer();\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n\n       \n        for (let j = 0; j < this.blenderObj10.length; j++) {\n            let model = this.blenderObj10[j];\n            this.drawObjectTexture2(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.drawObject2(model, mv, 244, 100, 116, false, true);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n\n    }\n\n    public drawBlenderScene3(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -5).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        for (let i: number = 0; i < 10; i++) {\n            const scale = Math.sin(Math.PI * 2 / 10 * i + elapsedTime * 0.002) * 0.2 + 0.2 + 0.3;\n            let mv: Matrix4f = camera.multiplyMatrix(\n                Matrix4f.constructTranslationMatrix(0, ((i + elapsedTime * 0.0008) % 10) - 5, 0).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix((i * 0.36 + elapsedTime * 0.0016)).multiplyMatrix(\n                        Matrix4f.constructScaleMatrix(scale, 1, scale)\n                    )\n                )\n            );\n            let model = this.blenderObj3[0];\n            this.drawObject2(model, mv, 246, 165, 177);\n        }\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n\n    public drawBlenderScene4(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale = 0.1 * 2.1 * 2.1;\n        let factor = 2.1 - 0.09 - 0.09;\n        let fade = 0.09;\n        let dampFactor = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            let modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n            modelViewMartrix = Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(modelViewMartrix);\n\n            let mv = camera.multiplyMatrix(modelViewMartrix);\n            let model = this.blenderObj3[0];\n            this.drawObject2(model, mv, 246, 165, 177);\n        }\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n\n    public drawStarField(elapsedTime: number): void {\n        let darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        let lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        let backgroundColor = 255 << 24 | 87 << 16 | 62 << 8 | 47;\n\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        let stars = new Array<Vector3f>();\n        let stars2 = new Array<Vector3f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        this.clearCol(backgroundColor);\n        for (let i = 0; i < 100; i++) {\n            this.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % 320, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            this.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % 320, stars2[i].y, lightStarColor);\n        }\n    }\n\n    // TODO: implement fursutm culling here!\n    private isVisible(element: any): boolean {\n        return true;\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        // this.clearColorBuffer();\n        this.clearDepthBuffer();\n        // one line is missing due to polygon clipping in viewport!\n        let modelViewMartrix: Matrix4f;\n\n        let scale = 1.6;\n\n        // viewMatrix = this.camera.getViewMatrix();\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        //modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        /**\n         * TODO:\n         * - optimization\n         * - object with position, rotation, material, color\n         * - do not generate the object every frame!\n         * - no temp arrays per frame!\n         * - remove tempp matrix objects: instead store one global MV  matrix and manipulate it directly without generating temp amtrices every frame\n         * - backface culling\n         * - no lighting for culled triangles\n         * - only z clip if necessary (no clip, fully visible)\n         * - find the right time to compute the projection ( after transformation or after clipping to z plane? maybe hybrid?)\n         */\n\n        this.drawObject(this.obj, modelViewMartrix, 215, 30, 120);\n\n    }\n\n    private drawObject2(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, culling: boolean = false) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(obj.points[i], obj.points2[i]);\n        }\n\n        let lightDirection = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n        for (let i = 0; i < obj.faces.length; i++) {\n            let v1 = obj.points2[obj.faces[i].vertices[0]];\n            let v2 = obj.points2[obj.faces[i].vertices[1]];\n            let v3 = obj.points2[obj.faces[i].vertices[2]];\n\n            let normal = obj.normals2[obj.faces[i].normals[0]];\n\n            // if (this.isTriangleCCW(v1,v2,v3)) {\n            // 2d Backface culling is here not allowed because we did not project here!\n            // FIXME: find a robust way to cull without cracks!\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                let p1 = this.project(v1);\n                let p2 = this.project(v2);\n                let p3 = this.project(v3);\n\n                if (culling || this.isTriangleCCW(p1, p2, p3)) {\n                    // TODO: do lighting only if triangle is visible\n                    let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                    scalar = scalar * 0.85 + 0.15;\n                    let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                    if (noLighting) {\n                        color = 255 << 24 | red | green << 8 | blue << 16;\n                    }\n\n                    this.clipConvexPolygon(new Array<Vector3f>(p1, p2, p3), color, true);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) && !this.isInFrontOfNearPlane(v2) && !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                scalar = scalar * 0.85 + 0.15;\n                let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                if (noLighting) {\n                    color = 255 << 24 | red | green << 8 | blue << 16;\n                }\n                this.zClipTriangle(new Array<Vector3f>(v1, v2, v3), color);\n            }\n\n        }\n    }\n\n    private drawObjectTexture(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, culling: boolean = false) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(obj.points[i], obj.points2[i]);\n            obj.points2[i] = this.project(obj.points2[i]);\n        }\n\n        let vertexArray = new Array<Vertex>(new Vertex(), new Vertex(), new Vertex());\n        for (let i = 0; i < obj.faces.length; i++) {\n            let v1 = obj.points2[obj.faces[i].vertices[0]];\n            let v2 = obj.points2[obj.faces[i].vertices[1]];\n            let v3 = obj.points2[obj.faces[i].vertices[2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let color = 255;\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = obj.uv[obj.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = obj.uv[obj.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = obj.uv[obj.faces[i].uv[2]];\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n    private drawObjectTexture2(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, culling: boolean = false) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(obj.points[i], obj.points2[i]);\n        }\n\n        let vertexArray = new Array<Vertex>(new Vertex(), new Vertex(), new Vertex());\n\n        for (let i = 0; i < obj.faces.length; i++) {\n            let v1 = obj.points2[obj.faces[i].vertices[0]];\n            let v2 = obj.points2[obj.faces[i].vertices[1]];\n            let v3 = obj.points2[obj.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                let p1 = this.project(v1);\n                let p2 = this.project(v2);\n                let p3 = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    let color = 255;\n\n                    vertexArray[0].position = p1;\n                    vertexArray[0].textureCoordinate = obj.uv[obj.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = obj.uv[obj.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = obj.uv[obj.faces[i].uv[2]];\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) && !this.isInFrontOfNearPlane(v2) && !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                let color = 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = obj.uv[obj.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = obj.uv[obj.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = obj.uv[obj.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray, color);\n            }\n        }\n    }\n\n    private drawObject(obj: any, modelViewMartrix: Matrix4f, red: number, green: number, blue: number, noLighting: boolean = false, oldLDir: boolean = true) {\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let i = 0; i < obj.normals.length; i++) {\n            normalMatrix.multiplyHomArr(obj.normals[i], obj.normals2[i]);\n        }\n\n        for (let i = 0; i < obj.points.length; i++) {\n            modelViewMartrix.multiplyHomArr2(obj.points[i], obj.points2[i]);\n        }\n\n        let lightDirection = oldLDir ? new Vector4f(0.5, 0.5, 0.3, 0.0).normalize() : new Vector4f(0.1, 0.1, -0.5, 0.0).normalize();\n\n        for (let i = 0; i < obj.index.length; i += 3) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            let normal = obj.normals2[i / 3];\n\n            // if (this.isTriangleCCW(v1,v2,v3)) {\n            // 2d Backface culling is here not allowed because we did not project here!\n            // FIXME: find a robust way to cull without cracks!\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                let p1 = this.project(v1);\n                let p2 = this.project(v2);\n                let p3 = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    // TODO: do lighting only if triangle is visible\n                    let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                    scalar = scalar * 0.85 + 0.15;\n                    let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                    if (noLighting) {\n                        color = 255 << 24 | red | green << 8 | blue << 16;\n                    }\n\n                    this.clipConvexPolygon(new Array<Vector3f>(p1, p2, p3), color, true);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) && !this.isInFrontOfNearPlane(v2) && !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                let scalar = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n                scalar = scalar * 0.85 + 0.15;\n                let color = 255 << 24 | Math.min(scalar * blue, 255) << 16 | Math.min(scalar * green, 255) << 8 | Math.min(scalar * red, 255);\n                if (noLighting) {\n                    color = 255 << 24 | red | green << 8 | blue << 16;\n                }\n                this.zClipTriangle(new Array<Vector3f>(v1, v2, v3), color);\n            }\n\n        }\n    }\n\n    NEAR_PLANE_Z = -1.7;\n\n    public isInFrontOfNearPlane(p: Vector3f): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        let ratio = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector3f(ratio * (p2.x - p1.x) + p1.x, ratio * (p2.y - p1.y) + p1.y, this.NEAR_PLANE_Z);\n    }\n\n    public zClipTriangle(subject: Array<Vector3f>, color: number): void {\n\n        let output = subject;\n\n        let input = output;\n        output = new Array<Vector3f>();\n        let S = input[input.length - 1];\n\n        for (let i = 0; i < input.length; i++) {\n            let point = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        let projected: Vector3f[] = output.map<Vector3f>((v) => {\n            return this.project(v);\n        })\n\n        if (output.length === 3 && !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (output.length === 4 && !this.isTriangleCCW2(projected[0], projected[1], projected[2], projected[3])) {\n            return;\n        }\n        //if (this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n        this.clipConvexPolygon(projected, color, true);\n        // }\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let ratio = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        let vertex = new Vertex();\n        vertex.position = new Vector3f(ratio * (p2.position.x - p1.position.x) + p1.position.x, ratio * (p2.position.y - p1.position.y) + p1.position.y, this.NEAR_PLANE_Z);\n\n        let tex = new TextureCoordinate();\n        tex.u = ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u;\n        tex.v = ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v;\n        vertex.textureCoordinate = tex;\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>, color: number): void {\n\n        let output = subject;\n\n        let input = output;\n        output = new Array<Vertex>();\n        let S = input[input.length - 1];\n\n        for (let i = 0; i < input.length; i++) {\n            let point = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        let projected: Vertex[] = output.map<Vertex>((v) => {\n            v.position = this.project(v.position);\n            return v;\n        })\n\n        if (output.length === 3 && !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 && !this.isTriangleCCW2(projected[0].position, projected[1].position, projected[2].position, projected[3].position)) {\n            return;\n        }\n        //if (this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n        //this.clipConvexPolygon(projected, color, true);\n        this.clipConvexPolygon2(projected, color);\n        // }\n    }\n\n\n    private torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n\n    /**\n     * https://www.youtube.com/watch?v=VMD7fsCYO9o\n     * http://www.cs.jhu.edu/~misha/Fall16/13.pdf\n     * http://www.cubic.org/docs/3dclip.htm\n     * \n     * @param {number} elapsedTime \n     * @memberof Framebuffer\n     */\n    public shadingTorus2(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.09));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 25,\n            Math.sin(elapsedTime * 0.05) * 9, -24).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon(new Array<Vector3f>(v1, v2, v3), color, false);\n                } else {\n                    this.drawTriangleDDA(v1, v2, v3, color);\n                    //this.drawTriangleDDA2(v1, v2, v3, new Vector3f(0, 0, 0), new Vector3f(0, 16, 0), new Vector3f(16, 16, 0), color);\n                }\n            }\n        }\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    public shadingTorusDamp(elapsedTime: number, sync: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(1.0);\n            up = right.cross(tangent).normalize().mul(1.0);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(10));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n\n\n        for (let i = 0; i < 7; i++) {\n            let scale = 0.1 + 0.1 * i;\n\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035 + 0.3 * (4 - i)));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04 + 0.3 * (4 - i)));\n\n            /**\n             * Vertex Shader Stage\n             */\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n            for (let n = 0; n < normals.length; n++) {\n                normals2.push(modelViewMartrix.multiply(normals[n]));\n            }\n\n            let ukBasslineBpm = 130 / 2;\n            let ukBasslineClapMs = 60000 / ukBasslineBpm;\n            let smashTime = sync % ukBasslineClapMs;\n            let smash = (this.cosineInterpolate(0, 15, smashTime) - this.cosineInterpolate(15, 200, smashTime) +\n                0.4 * this.cosineInterpolate(200, 300, smashTime) - 0.4 * this.cosineInterpolate(300, 400, smashTime)\n            )\n                * 12;\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -88).multiplyMatrix(modelViewMartrix);\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z; // TODO: use translation matrix!\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) - (y / (-z * 0.0078));\n                // commented out because it breaks the winding. inversion\n                // of y has to be done after back-face culling in the\n                // viewport transform\n                // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            /**\n             * Primitive Assembly and Rasterization Stage:\n             * 1. back-face culling\n             * 2. viewport transform\n             * 3. scan conversion (rasterization)\n             */\n            for (let i = 0; i < index.length; i += 3) {\n\n                // Only render triangles with CCW-ordered vertices\n                // \n                // Reference:\n                // David H. Eberly (2006).\n                // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n                // p. 69. Morgan Kaufmann Publishers, United States.\n                //\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let normal = normals2[i / 3];\n                    let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize()))) + 0.2, 1.0);\n                    let color = 255 << 24 | (scalar * 136) << 16 | (scalar * 215) << 8 | (scalar * 244);\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n                        this.clipConvexPolygon(new Array<Vector3f>(v1, v2, v3), color, false);\n                    } else {\n                        this.drawTriangleDDA(v1, v2, v3, color);\n                        //this.drawTriangleDDA2(v1, v2, v3, new Vector3f(0, 0, 0), new Vector3f(0, 16, 0), new Vector3f(16, 16, 0), color);\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    public shadingTorus5(elapsedTime: number, sync: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction2(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction2(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(0.4);\n            up = right.cross(tangent).normalize().mul(0.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(10));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        let ukBasslineBpm = 130 / 2;\n        let ukBasslineClapMs = 60000 / ukBasslineBpm;\n        let smashTime = sync % ukBasslineClapMs;\n        let smash = (this.cosineInterpolate(0, 15, smashTime) - this.cosineInterpolate(15, 200, smashTime) +\n            0.4 * this.cosineInterpolate(200, 300, smashTime) - 0.4 * this.cosineInterpolate(300, 400, smashTime)\n        )\n            * 12;\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 20,\n            Math.sin(elapsedTime * 0.05) * 8 - smash, -28).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon(new Array<Vector3f>(v1, v2, v3), color, false);\n                } else {\n                    this.drawTriangleDDA(v1, v2, v3, color);\n                    //this.drawTriangleDDA2(v1, v2, v3, new Vector3f(0, 0, 0), new Vector3f(0, 16, 0), new Vector3f(16, 16, 0), color);\n                }\n            }\n        }\n    }\n\n\n    public torusTunnel(elapsedTime: number, sync: number, texture: Texture): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal.normalize());\n        }\n\n        let scale = 1.0;\n\n        let frame = this.torusFunction3(elapsedTime * 0.02);\n        let frame2 = this.torusFunction3(elapsedTime * 0.02 + 0.01);\n\n        let tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize()\n        let right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        let translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        let rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        let finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        let model: any = {\n            points: points,\n            normals: normals,\n            index: index,\n            points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n            normals2: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n        // model = this.getDodecahedronMesh();\n\n        this.drawObject(model, modelViewMartrix, 221, 96, 48, false, false);\n\n\n        let ppoints = new Array<Vector3f>();\n        const num = 40;\n        const STEPS22 = 8 * 2;\n        for (let j = 0; j < num; j++) {\n            let frame = this.torusFunction3(j * 2 * Math.PI / num);\n            let frame2 = this.torusFunction3(j * 2 * Math.PI / num + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(10.4);\n            up = right.cross(tangent).normalize().mul(10.4);\n\n            for (let r = 0; r < STEPS22; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS22)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS22))).add(frame);\n                ppoints.push(new Vector3f(pos.x, pos.y, pos.z));\n            }\n\n        }\n\n        let ppoints2: Array<Vector3f> = new Array<Vector3f>(ppoints.length);\n        ppoints.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            ppoints2.push(transformed);\n        });\n\n        ppoints2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        ppoints2.forEach(element => {\n            //let size = -(2.0 * 192 / (element.z));\n            let size = -(2.3 * 192 / (element.z));\n            if (element.z < -4)\n                this.drawParticle(\n                    Math.round(element.x - size / 2),\n                    Math.round(element.y - size / 2),\n                    Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-90, -55, element.z));\n        });\n\n    }\n\n\n    public shadingTorus4(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector3f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertexArray = new Array<Vertex>(new Vertex(), new Vertex(), new Vertex());\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.2, 0.2, 1).normalize())) * 255), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = textCoords[index[i]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = textCoords[index[i + 1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = textCoords[index[i + 2]];\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector3f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n\n\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n                normals.push(frame.sub(pos).normalize());\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n\n\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n\n    public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n\n        // this.wBuffer.fill(100);\n\n        let result = this.sphereDisp2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Optimization:\n     * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n     * - use delta step method from black art of 3d programming\n     * - generate object only once\n     * - dont use temp arrays / instead use always the same array preallocated\n     */\n\n    public createBunny(): any {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        bunnyJson.vertices.forEach(x => {\n            points.push(new Vector3f(x.x, x.y, x.z));\n        });\n\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        bunnyJson.normals.forEach(x => {\n            normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n        });\n\n        let index: Array<number> = bunnyJson.faces;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < points.length; i++) {\n            points2.push(new Vector3f(0, 0, 0));\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals2.push(new Vector3f(0, 0, 0));\n        }\n\n        let object = {\n            index: index,\n            points: points,\n            normals: normals,\n            points2: points2,\n            normals2: normals2\n        };\n\n        return object;\n    }\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        /**\n         * Vertex Shader Stage\n         */\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            // this is the bottleneck: 20 -> 48 fps speedup\n            // when normalization is removed!\n            // solution: dont use MV for normal transformation\n            // use normal matrix instead\n            // normalMatrix : transpose(inverse(MV))\n\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    // this.drawTriangleDDA(v1, v2, v3, color);\n                    this.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n\n\n    public fakeSphere(normal: Vector3f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n\n    }\n    public shadingTorus3(elapsedTime: number): void {\n        let points: Array<Vector3f> = [];\n        const STEPS = 15 * 2;\n        const STEPS2 = 12 * 2;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let scale = 1.2;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.09));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 25,\n            Math.sin(elapsedTime * 0.05) * 9, -34).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < points2.length; i++) {\n            let v1 = points2[i];\n            let color = 0xffbbffbb;\n            if (v1.x > Framebuffer.minWindow.x && v1.x < Framebuffer.maxWindow.x &&\n                v1.y > Framebuffer.minWindow.y && v1.y < Framebuffer.maxWindow.y) {\n                this.drawPixel(v1.x, v1.y, color);\n            }\n        }\n    }\n\n\n\n    // Sutherland-Hodgman\n    // http://www.sunshine2k.de/coding/java/SutherlandHodgman/SutherlandHodgman.html\n    // http://www.cubic.org/docs/3dclip.htm\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightEdge(),\n        new LeftEdge(),\n        new BottomEdge(),\n        new TopEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     * https://www.npmjs.com/package/npm-check-updates\n     * \n     * @param {Vector3f} v1 \n     * @param {Vector3f} v2 \n     * @param {Vector3f} v3 \n     * @param {number} color \n     * @returns {void} \n     * @memberof Framebuffer\n     */\n    public clipConvexPolygon(subject: Array<Vector3f>, color: number, clipping: boolean = true): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.drawTriangleDDA(output[0], output[1 + i], output[2 + i], color);\n        }\n    }\n\n\n    public clipConvexPolygon2(subject: Array<Vertex>, color: number): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.drawTriangleDDA2(output[0], output[1 + i], output[2 + i], color);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    // TODO: create interesting pattern!\n    public led(elapsedTime: number, texture: Texture): void {\n        let time = elapsedTime * 0.0007 * 1.0;\n        let lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        let radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        let difference: Vector3f = new Vector3f(0, 0, 0);\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                let radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                let waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n    public shadingTorus(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let points: Array<Vector3f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(normal);\n        }\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiply(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            // \n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let normal = normals2[i / 3];\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(0.5, 0.5, 0.5).normalize())) * 100), 255) + 50;\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar + 100;\n                this.drawTriangleDDA(v1, v2, v3, color);\n            }\n        }\n    }\n\n    /**\n     * Full Pipeline:\n     * https://www.ntu.edu.sg/home/ehchua/programming/opengl/CG_BasicsTheory.html\n     * http://www.songho.ca/index.html\n     * https://en.wikipedia.org/wiki/Graphics_pipeline\n     * https://en.wikipedia.org/wiki/Clipping_(computer_graphics)\n     * https://www.ntu.edu.sg/home/ehchua/programming/opengl/CG_BasicsTheory.html\n     * http://www.gamasutra.com/blogs/MichaelKissner/20160112/263097/Writing_a_Game_Engine_from_Scratch__Part_4_Graphics_Library.php\n     * culling:\n     * https://developer.tizen.org/development/guides/native-application/graphics/opengl-es/primitive-assembly-and-rasterization\n     * assumption:\n     * By default, vertices of every 3D triangle are in a counter-clockwise (CCW) order\n     */\n    public shadingDemo(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let index: Array<number> = [\n            1, 2, 3, 4, 1, 3,\n            5, 7, 6, 8, 7, 5,\n\n            2, 6, 7, 7, 3, 2,\n            5, 1, 4, 4, 8, 5,\n\n            4, 3, 7, 7, 8, 4,\n            1, 6, 2, 5, 6, 1\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(-1.0, -1.0, 1.0), new Vector3f(1.0, -1.0, 1.0),\n            new Vector3f(1.0, 1.0, 1.0), new Vector3f(-1.0, 1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0),\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n        ];\n\n        // compute normals\n        let normals: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1] - 1].sub(points[index[i] - 1]).cross(points[index[i + 2] - 1].sub(points[index[i] - 1]));\n            normals.push(normal);\n        }\n\n\n        let colorAr: Array<number> = [\n            255 << 24 | 255 << 0,\n            255 << 24 | 255 << 8,\n            255 << 24 | 255 << 16,\n            255 << 24 | 255 << 16 | 255,\n            255 << 24 | 255 << 16 | 255 << 8,\n            255 << 24 | 255 << 8 | 128,\n        ];\n\n        let scale = 3.2;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        /**\n         * Vertex Shader Stage:\n         * 1. Local Space -> World Space -> Eye Space -> Clip Space -> NDC Space -> Screen Space\n         * 2. Computes Lighting per Vertex\n         */\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        let normals2: Array<Vector3f> = new Array<Vector3f>();\n        normals.forEach(element => {\n            normals2.push(modelViewMartrix.multiply(element));\n        });\n\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 9; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        /**\n         * Primitive Assembly and Rasterization Stage:\n         * 1. back-face culling\n         * 2. viewport transform\n         * 3. scan conversion (rasterization)\n         */\n        for (let i = 0; i < index.length; i += 3) {\n            /**\n             * Only render triangles with CCW-ordered vertices\n             * \n             * Reference:\n             * David H. Eberly (2006).\n             * 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n             * p. 69. Morgan Kaufmann Publishers, United States.\n             */\n            let v1 = points2[index[i] - 1];\n            let v2 = points2[index[i + 1] - 1];\n            let v3 = points2[index[i + 2] - 1];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                let normal = normals2[i / 3];\n\n                let light = new Vector3f(0.5, 0.5, 0.5);\n                let ambient = new Vector3f(50, 100, 50);\n                let diffuse = new Vector3f(90, 90, 90).mul(Math.max(0.0, normal.normalize().dot(light.normalize())));\n                let reflection = new Vector3f(0, 0, 1).sub(light.mul(-1).normalize());\n                // http://www.lighthouse3d.com/tutorials/glsl-tutorial/directional-lights-per-vertex-ii/\n                let specular = new Vector3f(0, 0, 0);\n                let phong: Vector3f = ambient.add(diffuse).add(specular);\n                let color = 255 << 24 | (phong.z & 0xff) << 16 | (phong.y & 0xff) << 8 | (phong.x & 0xff);\n                this.drawTriangleDDA(v1, v2, v3, color);\n            }\n        }\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     * \n     * @private\n     * @param {{ x: number, y: number, z: number }} v1 \n     * @param {{ x: number, y: number, z: number }} v2 \n     * @param {{ x: number, y: number, z: number }} v3 \n     * @returns {boolean} \n     * @memberof Framebuffer\n    \n     * \n     */\n    private isTriangleCCW(v1: { x: number, y: number, z: number }, v2: { x: number, y: number, z: number }, v3: { x: number, y: number, z: number }): boolean {\n        let det: number =  //(v2.x - v1.x) * (v3.y - v1.y) - (v2.y - v1.y) * (v3.x - v1.x);\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    private isTriangleCCW2(v1: { x: number, y: number, z: number }, v2: { x: number, y: number, z: number }, v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        let det: number = //(v2.x - v1.x) * (v3.y - v1.y) - (v2.y - v1.y) * (v3.x - v1.x) - (v3.y - v2.y) * (v4.x - v2.x);\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public scene10(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let index: Array<number> = [\n            1, 2, 3, 4, 1, 3,\n            5, 7, 6, 8, 7, 5,\n\n            2, 6, 7, 7, 3, 2,\n            5, 1, 4, 4, 8, 5,\n\n            4, 3, 7, 7, 8, 4,\n            1, 6, 2, 5, 6, 1\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(-1.0, -1.0, 1.0), new Vector3f(1.0, -1.0, 1.0),\n            new Vector3f(1.0, 1.0, 1.0), new Vector3f(-1.0, 1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0),\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n        ];\n\n        let colorAr: Array<number> = [\n            255 << 24 | 255 << 0,\n            255 << 24 | 255 << 8,\n            255 << 24 | 255 << 16,\n            255 << 24 | 255 << 16 | 255,\n            255 << 24 | 255 << 16 | 255 << 8,\n            255 << 24 | 255 << 8 | 128,\n        ];\n\n        let scale = 3.2;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        for (let i = 0; i < 2; i++) {\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + i * 4 - 2;\n                let y = transformed.y;\n                let z = transformed.z - 9; // TODO: use translation matrix!\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) - (y / (-z * 0.0078));\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            });\n\n            for (let i = 0; i < index.length; i += 3) {\n                if (points2[index[i + 1] - 1].sub(points2[index[i] - 1]).cross(points2[index[i + 2] - 1].sub(points2[index[i] - 1])).z < 0) {\n\n                    // TODO: use eye space triangles for backface culling\n                    let col = 255 << 24 | 255 << 16;\n                    let col2 = 255 << 24 | 255;\n\n\n                    this.drawTriangleDDA(points2[index[i] - 1], points2[index[i + 1] - 1], points2[index[i + 2] - 1], colorAr[(((i) / 6) | 0) % 6]);\n\n                }\n            }\n        }\n\n    }\n\n    public scene9(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let data: any = json;\n\n        let index: Array<number> = data.faces;\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        data.vertices.forEach(x => {\n            points.push(new Vector3f(x.x, x.y, x.z));\n        });\n\n        let scale = 4.0;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 9; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        });\n\n        let color = 255 | 255 << 16 | 255 << 24;\n\n        for (let i = 0; i < index.length; i += 3) {\n            // backface culling\n            if (points2[index[i + 1] - 1].sub(points2[index[i] - 1]).cross(points2[index[i + 2] - 1].sub(points2[index[i] - 1])).z < 0) {\n                let normal = points[index[i + 1] - 1].sub(points[index[i] - 1]).cross(points[index[i + 2] - 1].sub(points[index[i] - 1])).mul(-1);\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector3f(1, -1, 0).normalize())) * 155), 255) + 100;\n\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n                let col3 = 255 << 24 | 0;\n                this.drawTriangleDDA(points2[index[i] - 1], points2[index[i + 1] - 1], points2[index[i + 2] - 1], color);\n                //       this.drawLineDDA(points2[index[i] - 1], points2[index[i + 1] - 1], col3);\n                //      this.drawLineDDA(points2[index[i + 1] - 1], points2[index[i + 2] - 1], col3);\n                //    this.drawLineDDA(points2[index[i + 2] - 1], points2[index[i] - 1], col3);\n            }\n        }\n\n    }\n\n    drawTriangleSpan(dist: number, xpos: number, ypos: number, color: number): void {\n        let framebufferIndex = xpos + ypos * this.width;\n        this.framebuffer.fill(color, framebufferIndex, framebufferIndex + dist);\n    }\n\n    /**\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix\n     * http://www.flipcode.com/archives/articles.shtml\n     * http://lodev.org/cgtutor/\n     * http://lodev.org/cgtutor/lineclipping.html\n     * http://www.hugi.scene.org/online/coding/\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/perspective-correct-interpolation-vertex-attributes\n     * http://simonstechblog.blogspot.de/2012/04/software-rasterizer-part-2.html\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rendering-3d-scene-overview\n     * http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/visibility-problem-depth-buffer-depth-interpolation\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/perspective-correct-interpolation-vertex-attributes\n     * https://gamedev.stackexchange.com/questions/38213/depth-interpolation-for-z-buffer-with-scanline\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/shading-normals\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/transforming-objects-using-matrices\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-polygon-mesh\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/3d-viewing-pinhole-camera\n     * https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points\n     */\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex, color: number): void {\n\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    fillLongLeftTriangle2(v1: Vector3f, v2: Vector3f, v3: Vector3f, t1: Vector3f, t2: Vector3f, t3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.bob.width), this.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.bob.height), this.bob.height - 1), 0) | 0;\n                    let color2 = this.bob.texture[u + v * this.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n\n\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.wBuffer[framebufferIndex]) {\n                    this.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex, color: number): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y == p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3, color);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0), color);\n            }\n        }\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n\n    /**\n     * TODO:\n     * - adjust method in order to have window coordinates as parameter\n     *   that gonna be used to define the area to be displayed\n     * - http://qzx.com/pc-gpe/\n     */\n    drawRotoZoomer(texture: Texture) {\n        let scale = Math.sin(Date.now() * 0.0005) + 1.1;\n\n        let yStepX = Math.sin(Date.now() * 0.0003) * scale;\n        let yStepY = Math.cos(Date.now() * 0.0003) * scale;\n\n        let xStepX = yStepY;\n        let xStepY = -yStepX;\n\n        let texYCoord = Math.sin(Date.now() * 0.0002) * 512;\n        let texXCoord = Math.cos(Date.now() * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < 200; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[framebufferPos++] = texture.texture[(texXCoordInner & 63) + (texYCoordInner & 0xff) * 64];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n    /**\n     * Generates a voxel landscape.\n     * \n     * TODO:\n     * - y-span color interpolation\n     * - texturing\n     * \n     * http://simulationcorner.net/index.php?page=comanche\n     * http://www.flipcode.com/archives/Realtime_Voxel_Landscape_Engines-Part_2_Rendering_the_Landscapes_Structure.shtml\n     * http://www.massal.net/article/voxel/\n     * \n     * @param {Texture} texture The heightmap\n     * @param {number} time Elapsed time in milliseconds\n     * \n     * @memberof Framebuffer\n     */\n    drawVoxelLandscape2(texture: Texture, time: number) {\n        this.clearCol(255 << 24);\n\n        const MIN_DIST = 45;\n        const MAX_DIST = 200;\n\n        let camX = time * 0.008;\n        let camY = 0;\n\n        const focus = 125.7;\n        const center = 300;\n        const eye = 250;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = this.getBilinearFilteredPixel(texture, rayX, rayY);\n                let projHeight = Math.round((height - eye) * focus / dist + center);\n                let color = Math.round(height) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)) * 10);\n                let packedRGB = 255 << 24 | (color + 10) << 16 | (color + 20) << 8 | (color + 13);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearCol(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearCol(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return texture.texture[x + y * texture.width];\n    }\n\n    getBilinearFilteredPixel(texture: Texture, x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(texture, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(texture, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(texture, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(texture, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    getBilinearFilteredPixel2(texture: Texture, x: number, y: number) {\n\n        let x0 = Math.min(x | 0, texture.width - 1);\n        let x1 = Math.min((x | 0) + 1, texture.width - 1);\n        let y0 = Math.min(y | 0, texture.height - 1);\n        let y1 = Math.min((y | 0) + 1, texture.height - 1);\n\n        let x0y0 = this.getPixel2(texture, x0, y0);\n        let x1y0 = this.getPixel2(texture, x1, y0);\n        let x0y1 = this.getPixel2(texture, x0, y1);\n        let x1y1 = this.getPixel2(texture, x1, y1);\n\n\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n\n    drawTitanEffect() {\n        this.clear();\n        const horizontalNum = 320 / 20;\n        const verticalNum = 200 / 20;\n\n\n\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                let scale = ((Math.sin(Date.now() * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                let size = Math.round(scale * 8 + 1) * 2;\n                let offset = (20 / 2 - size / 2) | 0;\n                let color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                this.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n    drawMetaballs() {\n        let balls: Array<Vector3f> = [\n            new Vector3f(Math.sin(Date.now() * 0.002) * 100 + 150,\n                Math.cos(Date.now() * 0.0035) * 70 + 100, 0),\n            new Vector3f(Math.sin(Date.now() * 0.0015) * 100 + 150,\n                Math.cos(Date.now() * 0.002) * 70 + 100, 0),\n            new Vector3f(Math.sin(Date.now() * 0.003) * 100 + 150,\n                Math.cos(Date.now() * 0.0045) * 70 + 100, 0)\n        ]\n\n        let index = 0;\n\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let intensity = 0;\n                for (let b = 0; b < 3; b++) {\n                    let xx = (balls[b].x - x);\n                    let yy = (balls[b].y - y);\n                    let length = Math.sqrt(xx * xx + yy * yy);\n                    intensity += 5500 / length;\n                }\n                this.framebuffer[index++] = 255 << 24 | this.mapColor(intensity);\n            }\n        }\n    }\n\n    private interpolateColor(start: number, end: number, value: number, color1: number, color2: number): number {\n        let scale = this.interpolate(start, end, value);\n        let red = (color1 >> 0 & 0xff) * (1 - scale) + scale * (color2 >> 0 & 0xff);\n        let green = (color1 >> 8 & 0xff) * (1 - scale) + scale * (color2 >> 8 & 0xff);\n        let blue = (color1 >> 16 & 0xff) * (1 - scale) + scale * (color2 >> 16 & 0xff);\n        return red | green << 8 | blue << 16;\n    }\n    private mapColor(intensity: number): number {\n        if (intensity >= 235) {\n            return 255;\n        } else if (intensity >= 230) {\n            return this.interpolateColor(230, 235, intensity, 255 << 8 | 255, 255);\n        } else if (intensity >= 100) {\n            return this.interpolateColor(100, 230, intensity, 255 << 8, 255 << 8 | 255);\n        }\n        return 255 << 8;\n    }\n\n    draw(texture: Texture, time: number) {\n        // this.clearCol(80 << 16 | 80 << 8 | 99 << 0 | 255 << 24)\n        let a = time * 0.001;\n        for (let i = 10; i < 190; i++) {\n            let xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            let rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let x1 = (Math.sin(rot) * 32) | 0;\n            let x2 = (Math.sin(Math.PI * 2 / 4 + rot) * 32) | 0;\n            let x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * 32) | 0;\n            let x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * 32) | 0;\n\n            if (x2 > x1) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                let dist = x2 - x1;\n                let xPos = x1 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n\n            if (x3 > x2) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                let dist = x3 - x2;\n                let xPos = x2 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n\n            if (x4 > x3) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                let dist = x4 - x3;\n                let xPos = x3 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n\n            if (x1 > x4) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                let dist = x1 - x4;\n                let xPos = x4 + 120 + xoff;\n                this.drawSpan(dist, xPos, i, scale, texture);\n            }\n        }\n    }\n\n}\n","import { CullFace } from './CullFace';\nimport Framebuffer from './Framebuffer';\nimport { Vector4f } from './math/index';\nimport { Matrix4f } from './math/Matrix4f';\nimport { Sphere } from './math/Sphere';\nimport { Vector3f } from './math/Vector3f';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport Texture from './Texture';\n\ndeclare function require(resource: string): string;\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private start: number;\n    private texture: Texture;\n    private mask: Texture;\n    private texture2: Texture;\n    private heightmap: Texture;\n    private heightmapSphere: Texture;\n    private texture4: Texture;\n    private texture5: Texture;\n    private baked: Texture;\n    private texture6: Texture;\n    private texture7: Texture;\n    private texture8: Texture;\n    private texture9: Texture;\n    private texture10: Texture;\n    private platonian: Texture;\n    private dirt: Texture;\n    private texture11: Texture;\n    private texture12: Texture;\n    private texture13: Texture;\n    private texture14: Texture;\n    private texture15: Texture;\n    private revision: Texture;\n    private lab2: Texture;\n    private hoodlumLogo: Texture;\n    private blurred: Texture;\n    private envmap: Texture;\n    private particleTexture: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private rave: Texture;\n    private metal: Texture;\n    private micro: Texture;\n    private hlm: Texture;\n    private meth: Texture;\n    private displacementMap: Texture;\n    private cross: Texture;\n    private skybox: {\n        back?: Texture,\n        down?: Texture,\n        front?: Texture,\n        left?: Texture,\n        right?: Texture,\n        up?: Texture\n    } = {};\n    private abstract: Texture;\n    private myAudio: HTMLAudioElement;\n    private spheremap: Texture;\n    private boundRenderLoop: (time: number) => void;\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n\n    constructor(width: number, height: number) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    /**\n     * http://www.hugi.scene.org/online/coding/hugi%20se%204%20-%20index%20sorted%20by%20topic.htm\n     * http://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_01_Prologue.shtml\n     * http://insolitdust.sourceforge.net/code.html\n     *\n     * http://www.wab.com/screen.php?screen=20\n     * http://www.helixsoft.nl/articles/circle/sincos.htm\n     * https://gamedev.stackexchange.com/questions/24957/doing-an-snes-mode-7-affine-transform-effect-in-pygame\n     * https://www.coranac.com/tonc/text/mode7ex.htm\n     *\n     * http://codeincomplete.com/posts/javascript-racer-v1-straight/\n     * http://www.extentofthejam.com/pseudo/\n     *\n     * http://hugi.scene.org/online/hugi24/coding%20graphics%20bonz%20sines%20and%20cosines%20for%20fun%20and%20profit.htm\n     *\n     * @memberof Canvas\n     */\n    public render(): void {\n\n        const currentTime: number = Date.now();\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        let time: number = (Date.now() - this.start);\n        time = time * 3 + 550000;\n        time = time % (1150000);\n\n        this.framebuffer.setCullFace(CullFace.FRONT);\n        /*\n                if (time < 5000) {\n                    this.framebuffer.drawTitanEffect();\n                    this.framebuffer.shadingTorus(time * 0.02);\n                    this.framebuffer.drawTexture(32, 1, this.texture2, 1.0);\n                } else if (time < 15000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.draw(this.texture, time);\n                } else if (time < 25000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.drawLens(this.texture5, this.texture6, time);\n                } else if (time < 30000) {\n                    this.framebuffer.drawRotoZoomer(this.texture);\n                    this.framebuffer.shadingDemo(time * 0.02);\n                } else if (time < 35000) {\n                    this.framebuffer.drawRotoZoomer(this.texture);\n                    this.framebuffer.shadingSphere(time * 0.01);\n                } else if (time < 40000) {\n                    this.framebuffer.drawRotoZoomer(this.texture);\n                    this.framebuffer.wireFrameSphereClipping(time * 0.01);\n                } else if (time < 45000) {\n                    this.framebuffer.drawVoxelLandscape2(this.heightmap, time);\n                    this.framebuffer.drawTexture(32, 1, this.texture2, 1.0);\n                } else if (time < 50000) {\n                    this.framebuffer.drawOldSchoolPlasma(time);\n                } else if (time < 55000) {\n                    // https://www.youtube.com/watch?v=ccYLb7cLB1I&t=773s\n                    this.framebuffer.drawMetaballs();\n                } else if (time < 60000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.shadingTorus2(time * 0.02);\n                } else if (time < 70000) {\n                    this.framebuffer.floodFill(this.texture5, time - 60000);\n                } else if (time < 80000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.drawBobs(this.texture7, time);\n                } else if (time < 95000) {\n                    this.framebuffer.blockFace(this.texture5, time, 80000);\n                } else if (time < 140000) {\n                    this.framebuffer.scrollingBackground(this.texture8, time - 95000);\n                } else if (time < 160000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture9.texture);\n                    this.framebuffer.cinematicScroller(this.texture4, time - 140000);\n                } else if (time < 185000) {\n                    this.framebuffer.shadingSphereClip((time - 170000) * 0.003);\n                    this.framebuffer.cinematicScroller(this.texture4, time - 160000);\n                } else if (time < 200000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture12.texture);\n                    this.framebuffer.shadingTorus(time * 0.02);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                } else if (time < 210000) {\n                    this.framebuffer.blur();\n                    this.framebuffer.shadingTorus3(time * 0.015);\n                    this.framebuffer.drawTexture(32, 70, this.texture2, 1.0);\n                } else if (time < 215000) {\n                    this.framebuffer.led(time, this.texture14);\n                    this.framebuffer.drawTexture(32, 64, this.texture2, 1.0);\n                } else if (time < 230000) {\n                    this.framebuffer.setBob(this.metal);\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.shadingTorus4(time * 0.002);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                    this.framebuffer.cinematicScroller(this.texture4, time);\n                } else if (time < 240000) {\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.clear();\n                    this.framebuffer.shadingTorusENvironment(time * 0.006);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                } else if (time < 250000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.reproduceRazorScene(time * 0.003);\n                    this.framebuffer.drawLensFlare(time - 185000, [\n                        { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                        { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                        { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n                    ]);\n                } else if (time < 260000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.led(time, this.texture14);\n                    this.framebuffer.reflectionBunny(time * 0.002);\n                } else if (time < 270000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.drawBlenderScene(time - 260000, this.texture4);\n                } else if (time < 280000) {\n                    this.framebuffer.drawStarField(time * 0.9);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.reflectionBunny(time * 0.002);\n                    this.framebuffer.scene7(time * 0.2, this.texture7);\n                } else if (time < 290000) {\n                    this.framebuffer.drawPlaneDeformation(time, this.metal);\n                    this.framebuffer.drawTexture(32, 69, this.texture2, 1.0);\n                } else if (time < 330000) {\n                    this.framebuffer.drawLedTunnel(time, this.texture14);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 360000) {\n                    this.framebuffer.drawParticleTorus(time, this.particleTexture);\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 380000) {\n                    this.framebuffer.drawPlanedeformationTunnel(time, this.heightmap, this.metal);\n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 15, smashTime) -\n                        this.framebuffer.cosineInterpolate(15, 200, smashTime) +\n                        0.4 * this.framebuffer.cosineInterpolate(200, 300, smashTime) -\n                        0.4 * this.framebuffer.cosineInterpolate(300, 400, smashTime)) * 35;\n                    this.framebuffer.drawScaledTextureClipBi((320 / 2 - (this.hoodlumLogo.width + smash) / 2) | 0,\n                        (200 / 2 - (this.hoodlumLogo.height - smash) / 2) | 0, this.hoodlumLogo.width + smash, (this.hoodlumLogo.height - smash) | 0, this.hoodlumLogo, 1.0);\n                } else if (time < 400000) {\n                    // THE NEXT LINE IS THE BOTTLENECK NOT THE SPHERE!\n                    this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 420000) {\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n                    this.framebuffer.shadingSphereEnv(time * 0.0002);\n                } else if (time < 440000) {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n                    this.framebuffer.glitchScreen(time, this.noise);\n                    this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n                } else if (time < 450000) {\n                    this.framebuffer.drawVoxelLandscape3(this.heightmap, time);\n                    let tempTexture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y = 0; y < 256; y++) {\n                        for (let x = 0; x < 256; x++) {\n                            let ypos = Math.round(200 / 256 * x);\n                            let xpos = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n                    this.framebuffer.drawPolarDistotion(time, tempTexture);\n                } else if (time < 490000) {\n                    this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n                    let tempTexture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y = 0; y < 256; y++) {\n                        for (let x = 0; x < 256; x++) {\n                            let ypos = 199 - Math.round(200 / 256 * x);\n                            let xpos = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n                    this.framebuffer.drawPolarDistotion2(time, tempTexture);\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 520000) {\n                    this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n                    this.framebuffer.noise(time, this.noise);\n        \n                    let scale = 1 / (99 - ((time * 0.02) % 100));\n                    let width = (this.hoodlumLogo.width * scale * 10) | 0;\n                    let height = (this.hoodlumLogo.height * scale * 10) | 0;\n        \n                    this.framebuffer.drawScaledTextureClipBi(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, this.hoodlumLogo, 1.0);\n                } else if (time < 550000) {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.glitchScreen(time, this.noise);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingPlaneEnv(time * 0.0002);\n                } else if (time < 570000) {\n                    this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n                    let tempTexture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y = 0; y < 256; y++) {\n                        for (let x = 0; x < 256; x++) {\n                            let ypos = 199 - Math.round(200 / 256 * x);\n                            let xpos = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n                    this.framebuffer.drawPolarDistotion2(time, tempTexture);\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 15, smashTime) -\n                        this.framebuffer.cosineInterpolate(15, 200, smashTime) +\n                        0.4 * this.framebuffer.cosineInterpolate(200, 300, smashTime) -\n                        0.4 * this.framebuffer.cosineInterpolate(300, 400, smashTime)) * 35;\n        \n        \n                    let size = Math.round(1 * smash);\n                    let size2 = Math.round(2 * smash);\n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20 + size,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)) + size2,\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n                    this.framebuffer.glitchScreen(time, this.noise);\n                } else if (time < 590000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.drawParticleTorus(time, this.particleTexture2, true);\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture(tmpGlitch, 320, 200);\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = 320 + smash * 320 / 100;\n                    let height = 200 + smash * 200 / 100;\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 650000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n        \n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 50);\n                    let height = Math.round(200 + smash * 200 / 50);\n        \n                    // slow\n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 670000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n        \n                    let source: number = 0;\n                    let dest: number = 319;\n                    for (let y: number = 0; y < 200; y++) {\n                        for (let x: number = 0; x < 160; x++) {\n                            this.framebuffer.framebuffer[dest--] = this.framebuffer.framebuffer[source++];\n                        }\n                        source += 160;\n                        dest += 320 + 160;\n                    }\n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 50);\n                    let height = Math.round(200 + smash * 200 / 50);\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    for (let y = 0; y < 3; y++) {\n                        for (let x = 0; x < 4; x++) {\n                            let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                            let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n        \n                            this.framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n                        }\n                    }\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 690000) {\n        \n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n        \n                    this.framebuffer.shadingSphereEnv(time * 0.0002);\n        \n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                        200 / 2 - 20,\n                        this.micro.width * 2, this.micro.height * 2, this.micro);\n        \n                    this.framebuffer.drawScaledTextureClipAdd(\n                        320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                        200 / 2 - 60,\n                        this.micro.width, this.micro.height, this.micro);\n        \n        \n                    let source: number = 0;\n                    let dest: number = 319;\n                    for (let y: number = 0; y < 100; y++) {\n                        for (let x: number = 0; x < 160; x++) {\n                            this.framebuffer.framebuffer[dest--] = this.framebuffer.framebuffer[source++];\n                        }\n                        source += 160;\n                        dest += 320 + 160;\n                    }\n        \n                    source = 0;\n                    dest = 199 * 320;\n                    for (let y: number = 0; y < 100; y++) {\n                        for (let x: number = 0; x < 320; x++) {\n                            this.framebuffer.framebuffer[dest++] = this.framebuffer.framebuffer[source++];\n                        }\n                        dest -= 320 * 2;\n                    }\n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 50);\n                    let height = Math.round(200 + smash * 200 / 50);\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    for (let y = 0; y < 3; y++) {\n                        for (let x = 0; x < 4; x++) {\n                            let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                            let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n        \n                            this.framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n                        }\n                    }\n        \n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 720000) {\n                    // Rave video & Wobblin Cylinder\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.FRONT);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingCylinderEnv(time * 0.0002);\n        \n                    // Crosses\n                    for (let y = 0; y < 3; y++) {\n                        for (let x = 0; x < 4; x++) {\n                            let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                            let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n                            this.framebuffer.drawTexture(xx, yy, this.cross, 0.2);\n                        }\n                    }\n        \n                    // Motion Blur\n                    let texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture, 0.3 + 0.6 * (0.5 + 0.5 * Math.sin(time * 0.0003)));\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 750000) {\n                    let rng = new RandomNumberGenerator();\n                    rng.setSeed(666);\n                    let texture = new Texture(new Uint32Array(32 * 32), 32, 32);\n                    // FIXME:\n                    // - remove realtime glow and put it pre baked into the texture insteadt!\n                    for (let k = 0; k < 100; k++) {\n                        let x = Math.round(rng.getFloat() * 32);\n                        let y = Math.round(rng.getFloat() * 32);\n                        if (k < 50)\n                            texture.texture[x + y * 32] = 47 | 181 << 8 | 243 << 16;\n                        else\n                            texture.texture[x + y * 32] = 252 | 130 << 8 | 195 << 16;\n                    }\n        \n                    this.framebuffer.drawPlanedeformationTunnelAnim(time, texture);\n        \n        \n                    // GLOW\n                    let glowBuffer = new Uint32Array(16 * 2 * 10 * 2);\n                    let glowBuffer2 = new Uint32Array(16 * 2 * 10 * 2);\n        \n                    // todo filer onlyy brigh parts\n                    // blur if too blocky\n                    // clamp to border when filterting bilinear\n                    // add and dont blend with alpha\n                    for (let y = 0; y < 20; y++) {\n                        for (let x = 0; x < 32; x++) {\n                            let xx = Math.round(10 * x);\n                            let yy = Math.round(10 * y);\n                            let r = this.framebuffer.framebuffer[xx + yy * 320] & 0xff;\n                            let g = this.framebuffer.framebuffer[xx + yy * 320] >> 8 & 0xff;\n                            let b = this.framebuffer.framebuffer[xx + yy * 320] >> 16 & 0xff;\n                            let intensity = (r + g + b) / 3;\n                            let scale = this.framebuffer.cosineInterpolate(200, 130, intensity);\n                            let color = r * scale | g * scale << 8 | b * scale << 16 | 255 << 24;\n                            //  if (intensity > 138) {\n                            glowBuffer[x + y * 32] = this.framebuffer.framebuffer[xx + yy * 320];//color ;\n                            // } \n                        }\n                    }\n        \n                    for (let y = 0; y < 20; y++) {\n                        for (let x = 0; x < 32; x++) {\n                            let col1 = glowBuffer[Math.max(x - 1, 0) + y * 32];\n                            let col2 = glowBuffer[(x) % 32 + y * 32];\n                            let col3 = glowBuffer[Math.min(x + 1, 31) + y * 32];\n                            let r = (col1 & 0xff) * 1 / 4 + (col2 & 0xff) * 2 / 4 + (col3 & 0xff) * 1 / 4;\n                            let g = (col1 >> 8 & 0xff) * 1 / 4 + (col2 >> 8 & 0xff) * 2 / 4 + (col3 >> 8 & 0xff) * 1 / 4;\n                            let b = (col1 >> 16 & 0xff) * 1 / 4 + (col2 >> 16 & 0xff) * 2 / 4 + (col3 >> 16 & 0xff) * 1 / 4;\n                            glowBuffer2[x + y * 32] = r | g << 8 | b << 16;\n                        }\n                    }\n        \n                    for (let y = 0; y < 20; y++) {\n                        for (let x = 0; x < 32; x++) {\n                            let col1 = glowBuffer2[(x) + Math.max(y - 1, 0) * 32];\n                            let col2 = glowBuffer2[(x) + y % 20 * 32];\n                            let col3 = glowBuffer2[(x) + Math.min(y + 1, 19) * 32];\n                            let r = ((col1 & 0xff) * 1 / 4 + (col2 & 0xff) * 2 / 4 + (col3 & 0xff) * 1 / 4);\n                            let g = ((col1 >> 8 & 0xff) * 1 / 4 + (col2 >> 8 & 0xff) * 2 / 4 + (col3 >> 8 & 0xff) * 1 / 4);\n                            let b = ((col1 >> 16 & 0xff) * 1 / 4 + (col2 >> 16 & 0xff) * 2 / 4 + (col3 >> 16 & 0xff) * 1 / 4);\n                            glowBuffer[x + y * 32] = r | g << 8 | b << 16;\n                        }\n                    }\n        \n                    let texture2 = new Texture();\n                    texture2.texture = glowBuffer;\n                    texture2.width = 32;\n                    texture2.height = 20;\n        \n        \n                    this.framebuffer.drawScaledTextureClipBiAdd(\n                        0, 0,\n                        320, 200, texture2, 0.75);\n        \n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.reflectionBunny(time * 0.002);\n                    // Motion Blur\n                    let texture3 = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.8);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    this.framebuffer.noise(time, this.noise);\n                } else {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.FRONT);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingCylinderEnvDisp(time * 0.0002);\n                    this.framebuffer.drawTexture((320 / 2 - 256 / 2) | 0, (200 / 2 - 122 / 2) | 0, this.meth, Math.max(0, Math.sin(time * 0.0002)));\n                    // Motion Blur\n                    let texture3 = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.8);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n        \n        \n                    let tmpGlitch = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n        \n                    let texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n        \n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    let width = Math.round(320 + smash * 320 / 100);\n                    let height = Math.round(200 + smash * 200 / 100);\n        \n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n        \n                    this.framebuffer.noise(time, this.noise);\n                }\n        */\n\n        // music: https://youtu.be/XNUaoQeTu9U\n\n        if (time < 50000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingSphereEnvDisp(time * 0.0002);\n\n            // Motion Blur\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm: number = 140;\n            const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n            const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width: number = Math.round(320 + smash * 320 / 100);\n            const height: number = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClip(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 100000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            // this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.setBob(this.envmap);\n\n            let scale: number = 3.7;\n            let elapsedTime: number = (time - 50000) * 0.0002;\n\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3)));\n\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n                -10 - (Math.sin(elapsedTime * 0.3) * 0.5 + 0.5) * 6)\n                .multiplyMatrix(modelViewMartrix);\n            this.framebuffer.clearDepthBuffer();\n            this.framebuffer.shadingSphereEnvDisp2((time - 50000) * 0.0002, modelViewMartrix);\n\n            // Motion Blur\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm: number = 140;\n            const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n            const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width: number = Math.round(320 + smash * 320 / 100);\n            const height: number = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 150000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.drawParticleTorus(time, this.particleTexture2, true);\n\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm: number = 140;\n            const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n            const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width: number = Math.round(320 + smash * 320 / 100);\n            const height: number = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 200000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n\n            const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n            this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n            const texture: Texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n\n            const ukBasslineBpm = 140;\n            const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n            const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            const width = Math.round(320 + smash * 320 / 100);\n            const height = Math.round(200 + smash * 200 / 100);\n\n            this.framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 250000) {\n            this.framebuffer.raveMoview(time, this.rave);\n            this.framebuffer.glitchScreen(time, this.noise, false);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingPlaneEnv(time * 0.0002);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 300000) {\n            this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n            const tempTexture: Texture = new Texture();\n            tempTexture.texture = new Uint32Array(256 * 256);\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const ypos: number = 199 - Math.round(200 / 256 * x);\n                    const xpos: number = Math.round(320 / 256 * y);\n                    tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                }\n            }\n\n            this.framebuffer.drawPolarDistotion2(time, tempTexture);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.65);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 350000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.setBob(this.spheremap);\n            this.framebuffer.shadingCylinderEnvDisp(time * 0.0002);\n\n            const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 400000) {\n            this.framebuffer.raveMoview(time, this.rave);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n            this.framebuffer.glitchScreen(time, this.noise);\n        } else if (time < 450000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.drawParticleWaves(time, this.particleTexture2, true);\n\n            const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n\n        } else if (time < 500000) {\n            this.framebuffer.drawMetaballs();\n            this.framebuffer.noise(time, this.noise, 0.1);\n        } else if (time < 550000) {\n            this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 600000) {\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.reproduceRazorScene(time * 0.0018, [\n                { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            this.framebuffer.noise(time, this.noise, 0.04);\n        } else if (time < 650000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.drawParticleStreams(time, this.particleTexture2, true);\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.55);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 700000) {\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.torusTunnel(time * 0.007, (Date.now() - this.start), this.particleTexture);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 750000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.drawBlenderScene2(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 800000) {\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.drawBlenderScene3(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n            this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, 0.6);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 850000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.FRONT);\n            this.framebuffer.drawBlenderScene4(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n            //this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, 0.6);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 900000) {\n\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.envmap);\n\n            this.framebuffer.drawBlenderScene5(time, this.texture4,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            this.framebuffer.glitchScreen(time * 0.9, this.noise);\n        } else if (time < 950000) {\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.envmap);\n\n            this.framebuffer.drawBlenderScene6(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 1000000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.baked);\n\n            this.framebuffer.drawBlenderScene7(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            //this.framebuffer.glitchScreen(time * 0.9, this.noise);\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 1050000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.platonian);\n\n            this.framebuffer.drawBlenderScene8(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            //this.framebuffer.glitchScreen(time * 0.9, this.noise);\n            this.framebuffer.noise(time, this.noise);\n        } else if (time < 1100000) {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.lab2);\n\n            this.framebuffer.drawBlenderScene9(time, this.particleTexture2,\n                [\n                    { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt, this.skybox);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n            this.framebuffer.noise(time, this.noise);\n\n        } else {\n\n            this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n            this.framebuffer.setCullFace(CullFace.BACK);\n            this.framebuffer.setBob(this.baked);\n\n            this.framebuffer.drawBlenderScene7(time - 1100000, this.particleTexture2,\n                [\n                    //   { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                    { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                    { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                    { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                    { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                ], this.dirt, this.skybox);\n\n            const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n            this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            //this.framebuffer.glitchScreen(time * 0.9, this.noise);\n            this.framebuffer.noise(time, this.noise);\n        }\n\n        // TODO: Front Mission Modell in Blender\n\n        /**\n         * TODO:\n         * - Draw Vector ART in SVG Inkscape\n         * - Vectorize with Blender and Display\n         */\n        //  this.framebuffer.drawTexture(0, 0, this.hlm, 0.50);\n\n        /**\n         * TODO:\n         * - transition effects with alpha layer\n         * - wormhole particle tunnel\n         * - rubiks cube animation :-)\n         * - cube with animated texture\n         * - Oldskool amiga screen with disk loading and decrunching\n         * - screen exploding intro cubes\n         * - Split red green and blue channels and displace them in x direction\n         */\n\n\n        /**\n         * TODO:\n         * - Stripe landscape: http://farm3.static.flickr.com/2653/5710494901_2ca6ddbfb2_b.jpg\n         *   maybe with sync to bass and fft\n         * - Blender modells (Flat, textured, GI baked)\n         * - particle tunnel\n         * - ribbons on curves\n         * - dof\n         */\n\n        // this.framebuffer.drawRadialBlur();\n\n        this.framebuffer.drawText(8, 18, 'FPS: ' + this.fps.toString(), this.texture4);\n\n\n        /*\n        let bufferLength = this.analyzer.frequencyBinCount;\n        let dataArray = new Uint8Array(bufferLength);\n        this.analyzer.getByteFrequencyData(dataArray);\n    \n        let pos1 = new Vector3f(0,0,0);\n        let pos2 = new Vector3f(0,0,0);\n        const STEPS = 100;\n        for (let i = 0; i < STEPS; i++) {\n            \n            let x = Math.sin(Math.PI * 2 / STEPS * i+time*0.0003);\n            let y = Math.cos(Math.PI * 2 / STEPS * i+time*0.0003);\n            pos1.x = x*60 +320/2;\n            pos1.y = y*60 + 200/2;\n            pos2.y=  y*(60+dataArray[Math.floor(bufferLength/ STEPS * (i))]/255*40)+200/2;\n            pos2.x = x*(60+dataArray[Math.floor(bufferLength/ STEPS * (i))]/255*40)+ 320/2;\n            this.framebuffer.drawLineDDANoZ(pos1, pos2, 255);\n        }\n        */\n\n\n        // TS SoftSynth Project\n        // http://natureofcode.com/book/\n        // https://noisehack.com/generate-noise-web-audio-api/\n        // https://noisehack.com/custom-audio-effects-javascript-web-audio-api/\n        // https://noisehack.com/how-to-build-supersaw-synth-web-audio-api/\n        // https://noisehack.com/build-music-visualizer-web-audio-api/\n        // https://noisehack.com/how-to-build-monotron-synth-web-audio-api/\n        // https://davidwalsh.name/web-audio-api\n        // https://codepen.io/gregh/post/recreating-legendary-8-bit-games-music-with-web-audio-api\n        // https://developer.mozilla.org/en-US/docs/Games/Techniques/Audio_for_Web_Games\n        // https://www.html5rocks.com/en/tutorials/webaudio/intro/\n\n        //this.framebuffer.drawTexture(0, 0, this.displacementMap, 0.8);\n        /*\n        this.framebuffer.drawPolarDistotion3(time, this.revision);\n        this.framebuffer.setCullFace(CullFace.FRONT);\n        this.framebuffer.shadingSphere(time * 0.004);\n        // Motion Blur\n        let texture = new Texture(this.accumulationBuffer, 320, 200);\n        //this.framebuffer.drawTexture(0, 0, texture, 0.75);\n        this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n        this.framebuffer.glitchScreen(time, this.noise);\n        */\n\n        // TODO:\n        // - Progress Bar for Loading\n        // - Web Audio API\n        // - blasphemy line sphere with particles and blur\n        // - fractal landscape fade in / out\n        // - particle emitter\n        // - plane deformation on rendererd scenes\n        // - alpha blend between different or same scene\n        // - fade to white\n        // - spike ball / particle and 3d mesh with normals\n        // - glow\n        // - kewlers cube torus\n        // - kewlsers recht billboard spikeball\n        // - kewslers rect billboard cylinder\n        // seminars:\n        // - https://www.youtube.com/playlist?list=PLwbFJIXXSsXvbpDxOaaBrxSBdLUW1hdax\n        // - https://www.youtube.com/watch?v=XZLqwXdXjqY\n        // - https://www.youtube.com/watch?v=nt-BpAYMeJs&list=PLNqQO7lFY6dmH5kMSWtuRP6ZhBiQdQIU1&index=5\n        // - https://www.youtube.com/watch?v=WgUkCRvti3Y&list=PLNqQO7lFY6dlPOg7cA1SczEU0Y7UW6iMW\n        // - https://www.youtube.com/watch?v=7wYq6O-g2U8&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC\n        // - https://www.youtube.com/watch?v=hszyYAT5R1Q&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC&index=5\n        // - https://www.youtube.com/watch?v=4Q5sgNCN2Jw&list=PL2EEF025A89BAA0FC\n        // - https://www.youtube.com/watch?v=TbcZyAO6K7c\n        // - https://www.youtube.com/watch?v=2p2JcHzRlJU\n        // - https://www.youtube.com/watch?v=QT2ftidLTn4\n        // - https://www.youtube.com/watch?v=Oo-jlpvhTcY\n\n        /*\n              // SCALE\n              let texture = new Texture();\n              texture.texture = this.accumulationBuffer;\n              texture.width = 320;\n              texture.height = 200;\n      \n              let scale = 1 + (1+Math.sin(time*0.00006))*0.5*20;\n              let width = 320 *  scale;\n              let height = 200 * scale;\n      \n              // looks crappy with linear interpolation!\n              // probably  bilinear is required here\n         \n              \n                  this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                  this.framebuffer.drawScaledTextureClipBi(\n                      Math.round(320/2-width/2),\n                      Math.round(200/2-height/2),\n                      width, height, texture, 1.0);\n                  */\n\n        /*\n            // RADIAL BLUR\n    let texture = new Texture();\n    texture.texture = this.accumulationBuffer;\n    texture.width = 320;\n    texture.height = 200;\n    \n    let scale = 1.05;\n    let width = 320 *  scale;\n    let height = 200 * scale;\n    \n    // looks crappy with linear interpolation!\n    // probably  bilinear is required here\n     \n     \n        this.framebuffer.drawScaledTextureClipBi(\n            Math.round(320/2-width/2),\n            Math.round(200/2-height/2),\n            width, height, texture, 0.95);\n     \n            this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n            */\n\n\n        //this.framebuffer.noise(time, this.noise);\n\n        // https://github.com/ninjadev/nin/blob/38e80381415934136c7bd97233a2792df2bffa8d/nin/dasBoot/shims.js\n        /*****/\n        /*\n    \n        let scale =  (99-((time * 0.04) % 100))/99;\n        let width = (this.micro.width * scale * 2) | 0;\n        let height = (this.micro.height * scale * 2) | 0;\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(22);\n        let pos = [];\n        for(let i=0; i < 100; i++) {\n            pos.push({x:rng.getFloat(), y: rng.getFloat()});\n        }\n    \n        let xpos = 20+(320-40) * pos[((time*0.04/99)%100)|0].x;\n        let ypos = 20+(200-40) * pos[((time*0.04/99)%100)|0].y;\n        this.framebuffer.drawScaledTextureClipAdd(\n            Math.round(xpos - width / 2),\n            Math.round(ypos - height / 2),\n            width, height, this.micro, 1.0);\n            */\n\n\n        // this.framebuffer.drawRadialBlur();\n\n        // NEW EFFECTS:\n        // * https://www.youtube.com/watch?v=bg-MTl_nRiU\n        // * SPIKEBALL KYLE\n        // plane deformation with texture to LED\n        // 16 / 9 --> 320 x 180\n\n\n        /*\n        this.framebuffer.setCullFace(CullFace.BACK);\n        //this.framebuffer.drawBlenderScene(time, this.texture4, this.particleTexture2);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);  \n        this.framebuffer.shadingSphereEnv(time*0.0002);\n         this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);  \n        */\n\n        /**\n         * Inspiration:\n         * - https://www.youtube.com/watch?v=7kLNXg4BmM8\n         * - https://www.youtube.com/watch?v=PLrio-uwvwk\n         * - https://www.youtube.com/watch?v=XJKDb4ByZ7Y\n         */\n        /**\n         * TODO:\n         * - http://sol.gfxile.net/gp/ch18.html\n         * - http://insolitdust.sourceforge.net/code.html\n         * - http://sol.gfxile.net/sphere/index.html\n         * - http://4matprojects.blogspot.de/\n         * - http://sol.gfxile.net/particle/index.html\n         * - http://sol.gfxile.net/gp/ch19.html\n         * - http://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_07_Bump_Mapping.shtml\n         * - http://sol.gfxile.net/interpolation/index.html\n         * - http://adrianboeing.blogspot.de/2011/06/deform-textured-interference-effect-in.html\n         * - particle ball pulsating (https://www.youtube.com/watch?v=NPZEkhtXhgE)\n         * - metaballs\n         * - particle stream\n         * - scene with baked lighting & wobbling ball & camera animation\n         * - DOF flares\n         * - demo tool http://peisik.untergrund.net/engines/\n         * - https://www.youtube.com/watch?v=ghX1-EUx-fQ&index=7&list=PLPnuj18PSHazbti_tw1zoQ23fqx8-ZZP7 (min 15)\n         */\n\n        //  this.framebuffer.cinematicScroller(this.texture4, time);\n        //  this.framebuffer.drawTextureScaledLame(0,0, 16,16, this.texture7);\n        // http://doc.babylonjs.com/tutorials/discover_basic_elements\n\n        // implement modells with baked shaods and lighting :)\n        // http://iquilezles.org/www/index.htm\n        // http://iquilezles.org/www/articles/normals/normals.htm\n        // http://iquilezles.org/www/articles/areas/areas.htm\n        // http://iquilezles.org/www/articles/frustum/frustum.htm\n        // http://iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n        // http://iquilezles.org/www/articles/deform/deform.htm\n        // http://www.gamers.org/dEngine/quake/papers/ddjzsort.html\n        // http://fabiensanglard.net/quakeSource/quakeSourceRendition.php\n\n        //  this.framebuffer.shadingSphereClip((time ) * 0.003);\n        // this.framebuffer.cinematicScroller(this.texture4, time );\n        //   this.framebuffer.drawText(8, 192 - 18, 'TRIANGLE NEAR PLANE CLIPPING', this.texture4);\n\n        // TODO:\n        // - textured cube / dynamic textures\n        // - skybox\n        // - specular highlights\n        // - 3d bobs (with shadows)\n        // - plane deformation effect\n        // - sine scroller (color bar texture)\n        // - dot tunnel\n        // - 2d / 3d start field\n        // - 2d vector start\n        // - wobble logo\n        // - text writer\n        // - scroller / sine scroller\n        // - fractalplasma fade in\n        // - water effect\n        // - cross fade\n        // - 2d bump mapping ( maybe on 3d object)\n        // - smooth shading (gouraud)\n        // - voxel landscape with color\n        // - metaballs\n        // - rasterbars\n        // - 3d particles / 3d particle collision\n        // - vector morphing\n        // - voxel tunnel / sphere / torus\n        // - stencil vectors\n        // - chess zoomer / chess waver\n        // - raycaster\n\n        // this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n        // this.framebuffer.shadingTorus2(time * 0.02);\n        // this.framebuffer.drawTexture(32, 60, this.texture2, 1.0);\n\n        //this.framebuffer.clear();\n\n        //this.framebuffer.wireFrameTerrain(time*0.01, this.texture3);\n        // this.framebuffer.pixelate();\n\n\n\n        //     this.framebuffer.wireFrameTerrain(time*0.008,this.texture3);\n        //    this.framebuffer.cinematicScroller(this.texture4, time );\n        // todo: radial blur -> pouet.net\n\n        // http://www.cubic.org/docs/camera.htm\n        // http://www.cubic.org/docs/3dclip.htm\n        // http://www.cubic.org/docs/backcull.htm\n\n        // this.framebuffer.addReflections();\n\n        // this.framebuffer.drawRaster();\n        // this.framebuffer.enableBackfaceCulling();\n        // this.framebuffer.setCullFace(FRONT);\n\n        // TODO: text\n        // 3d line clipping for fly by :)\n        // different transitions:\n        // - stripes etc\n        // - chessboard\n        // wobble logo\n        // ball 3d with precalculated sizes lookup\n        // starfield 2d /3d\n        // wormhole\n        // glitch logo\n    }\n\n    getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        let canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        let context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        let data = context.getImageData(0, 0, image.width, image.height).data;\n        let conv = new Uint32Array(data.length / 4);\n        let c = 0;\n        for (let i = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n    public createTexture(path: string, hasAlpha: boolean): Promise<Texture> {\n        return new Promise((resolve) => {\n            const img = new Image();\n            img.onload = () => {\n                const texture = new Texture();\n                texture.texture = this.getImageData(img, hasAlpha);\n                texture.width = img.width;\n                texture.height = img.height;\n                resolve(texture);\n            };\n            img.onerror = () => resolve();\n            img.src = path;\n        });\n    }\n\n    public createProceduralTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    texture.texture[x + y * 256] = (rng.getFloat() * 256) | 0 | 255 << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralDisplacementMap(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            texture.texture.fill(128 | 255 << 24);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = (texture.texture[x + y * 256] & 0xffffff00) | texture.texture[x + y * 256] & 0xff + (c * 255);\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createProceduralTexture4(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public init(): void {\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n\n        Promise.all([\n            this.createTexture(require('./assets/spheremap.png'), false).then(texture => this.spheremap = texture),\n            this.createTexture(require('./assets/metall.png'), false).then(texture => this.metal = texture),\n            this.createTexture(require('./assets/logo.png'), false).then(texture => this.texture = texture),\n            this.createTexture(require('./assets/razor1911.png'), true).then(texture => this.texture2 = texture),\n            this.createTexture(require('./assets/heightmap.png'), false).then(texture => this.heightmap = texture),\n            this.createTexture(require('./assets/font.png'), true).then(texture => this.texture4 = texture),\n            this.createTexture(require('./assets/atlantis.png'), false).then(texture => this.texture5 = texture),\n            this.createTexture(require('./assets/lens.png'), true).then(texture => this.texture6 = texture),\n            this.createTexture(require('./assets/ball2.png'), true).then(texture => this.texture7 = texture),\n            this.createTexture(require('./assets/pandabear.png'), false).then(texture => this.texture8 = texture),\n            this.createTexture(require('./assets/battleofilona.png'), false).then(texture => this.texture9 = texture),\n            this.createTexture(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            this.createTexture(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            this.createTexture(require('./assets/sky.png'), true).then(texture => this.texture12 = texture),\n            this.createTexture(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            this.createTexture(require('./assets/led.png'), false).then(texture => this.texture14 = texture),\n            this.createTexture(require('./assets/revision.png'), false).then(texture => this.revision = texture),\n            this.createTexture(require('./assets/lab2.png'), false).then(texture => this.lab2 = texture),\n\n            this.createTexture(require('./assets/skybox/skybox_back.png'), false).then(texture => this.skybox.back = texture),\n            this.createTexture(require('./assets/skybox/skybox_down.png'), false).then(texture => this.skybox.down = texture),\n            this.createTexture(require('./assets/skybox/skybox_front.png'), false).then(texture => this.skybox.front = texture),\n            this.createTexture(require('./assets/skybox/skybox_left.png'), false).then(texture => this.skybox.left = texture),\n            this.createTexture(require('./assets/skybox/skybox_right.png'), false).then(texture => this.skybox.right = texture),\n            this.createTexture(require('./assets/skybox/skybox_up.png'), false).then(texture => this.skybox.up = texture),\n\n            this.createTexture(require('./assets/platonian_baked.png'), false).then(texture => this.platonian = texture),\n            this.createTexture(require('./assets/meth.png'), true).then(texture => this.meth = texture),\n            this.createProceduralTexture().then(texture => this.texture15 = texture),\n            this.createProceduralTexture2().then(texture => this.particleTexture = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n            this.createProceduralTexture4().then(texture => this.noise = texture),\n            this.createProceduralDisplacementMap().then(texture => this.displacementMap = texture),\n            this.createTexture(require('./assets/hoodlumLogo.png'), true).then(texture => this.hoodlumLogo = texture),\n            this.createTexture(require('./assets/abstract.png'), false).then(texture => this.abstract = texture),\n            this.createTexture(require('./assets/rave.png'), false).then(texture => this.rave = texture),\n            this.createTexture(require('./assets/microstrange.png'), false).then(texture => this.micro = texture),\n            this.createTexture(require('./assets/Backed.png'), false).then(texture => this.baked = texture),\n            this.createTexture(require('./assets/blurredBackground.png'), false).then(texture => this.blurred = texture),\n            this.createTexture(require('./assets/hlm.png'), true).then(texture => this.hlm = texture),\n            this.createTexture(require('./assets/cross.png'), true).then(texture => this.cross = texture),\n            this.createTexture(require('./assets/envmap.png'), false).then(texture => this.envmap = texture),\n            this.createTexture(require('./assets/heightmapSphere.png'), false).then(texture => this.heightmapSphere = texture),\n            this.createTexture(require('./assets/mask.png'), true).then(texture => this.mask = texture),\n            this.createTexture(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n        ]).then(() => {\n            // Web Audio API\n            // FIXME: put this into a Player Class\n            this.framebuffer.precompute(this.heightmap, this.heightmapSphere);\n\n            let audioContext = new AudioContext();\n            let request = new XMLHttpRequest();\n            request.open('GET', require('./assets/xmix_q2_final.ogg'), true);\n            request.responseType = 'arraybuffer';\n            request.onload = () => {\n                let undecodedAudio = request.response;\n                audioContext.decodeAudioData(undecodedAudio,\n                    (buffer) => {\n                        const sourceBuffer = audioContext.createBufferSource();\n                        sourceBuffer.buffer = buffer;\n                        sourceBuffer.connect(audioContext.destination);\n                        sourceBuffer.loop = true;\n                        sourceBuffer.start(audioContext.currentTime);\n                        this.start = Date.now();\n                        this.renderLoop(0);\n                    });\n            };\n\n            request.send();\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.render();\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import * as AISA from './Canvas';\n\nclass Application {\n\n    public main(): void {\n        const canvas: AISA.Canvas = new AISA.Canvas(320, 200);\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"sourceRoot":""}