{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/examples/titan-effect/Application.ts","webpack:///./src/examples/titan-effect/WobbleScene.ts","webpack:///./src/examples/titan-effect/assets/atlantis.png","webpack:///./src/examples/titan-effect/assets/hoodlumLogo.png","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","Canvas_1","WobbleScene_1","canvas","Canvas","WobbleScene","appendTo","document","getElementById","init","main","AbstractScene_1","texture_1","AbstractScene","accumulationBuffer","Uint32Array","startTime","Date","now","Promise","all","load","then","texture","atlantisBackground","hoodlumLogo","generateProceduralNoise","noise","elapsedTime","fastFramebufferCopy","width","drawVerticalSpan","sin","PI","texture3","drawTexture","y1","y2","delta","abs","textureStep","height","texpos","pixelStep","shiny","pow","texel","alpha","inverseAlpha","fbColor","g","b","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","frame2","up","right","pos","add","cos","buildMesh","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","RandomNumberGenerator_1","resolve","rng","default","setSeed","getFloat","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","framebufferPixel","texturePixel","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","time","render","flipBackbuffer","requestAnimationFrame","putImageData","element","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","rotMat","constructZRotationMatrix","getMesh","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"titan-effect.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 173);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { WobbleScene } from './WobbleScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new WobbleScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class WobbleScene extends AbstractScene {\n\n    private hoodlumLogo: Texture;\n    private atlantisBackground: Texture;\n    private startTime: number;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('./assets/atlantis.png'), false).then(\n                (texture: Texture) => this.atlantisBackground = texture\n            ),\n            TextureUtils.load(require('./assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.hoodlumLogo = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        const elapsedTime: number = 0.004 * time;\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.atlantisBackground.texture);\n\n        /*for (let i: number = 0; i < this.hoodlumLogo.width; i++) {\n            this.drawVerticalSpan(framebuffer, this.hoodlumLogo, i,\n                Math.round(Math.sin(i * 0.02 + elapsedTime + Math.PI * 2 / 4) * 20 + 100 - 50),\n                Math.round(Math.sin(i * 0.02 + elapsedTime + Math.PI * 2 / 4 * 2) * 20 + 100 + 50)\n            );\n        }*/\n\n        for (let i: number = 0; i < this.hoodlumLogo.width; i++) {\n            this.drawVerticalSpan(framebuffer, this.hoodlumLogo, i,\n                Math.round(Math.sin(i * 0.009 + elapsedTime * 0.9 + Math.PI * 2 / 4) * 60 + 100),\n                Math.round(Math.sin(i * 0.009 + elapsedTime * 0.9 + Math.PI * 2 / 4 * 2) * 60 + 100),\n                Math.max(0, Math.sin(i * 0.009 + elapsedTime * 0.9 + Math.PI * 2 / 4 * 2.5)) * 0.85 + 0.15\n            );\n        }\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n        framebuffer.drawTexture(0, 0, texture3, 0.65);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public drawVerticalSpan(framebuffer: Framebuffer, texture: Texture, x: number, y1: number,\n                            y2: number, scale: number = 1.0): void {\n        const delta: number = Math.abs(y2 - y1);\n        const textureStep: number = texture.height / delta;\n        let texpos: number = 0;\n        const pixelStep: number = y2 > y1 ? 320 : -320;\n        let index: number = x + y1 * 320;\n        const shiny: number = Math.pow(scale, 20);\n        for (let i: number = 0; i < delta; i++) {\n            const texel: number = texture.texture[x + Math.round(texpos) * texture.width];\n            let alpha: number = ((texel >> 24) & 0xff) / 255;\n            const inverseAlpha: number = 1 - alpha;\n            alpha *= scale;\n            const fbColor: number = framebuffer.framebuffer[index];\n\n            const r: number = (((fbColor >> 0) & 0xff) * (inverseAlpha) +\n                ((Math.min(255, ((texel >> 0) & 0xff) + shiny * 180))) * (alpha)) | 0;\n            const g: number = (((fbColor >> 8) & 0xff) * (inverseAlpha) +\n                ((Math.min(255, ((texel >> 8) & 0xff) + shiny * 100))) * (alpha)) | 0;\n            const b: number = (((fbColor >> 16) & 0xff) * (inverseAlpha) +\n                ((Math.min(255, ((texel >> 16) & 0xff) + shiny * 100))) * (alpha)) | 0;\n\n            framebuffer.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n            texpos += textureStep;\n            index += pixelStep;\n        }\n    }\n\n}\n","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","module.exports = __webpack_public_path__ + \"042200790f9c9b7eb4c1dcdc1bfa6778.png\";","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}