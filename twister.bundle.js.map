{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/examples/twister/assets/logo.png","webpack:///./src/examples/twister/assets/atlantis.png","webpack:///./src/examples/twister/TwisterScene.ts","webpack:///./src/examples/twister/Application.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Vertex.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Framebuffer_1","math_1","Vertex_1","AbstractClipEdge_1","BottomClipEdge","AbstractClipEdge","Framebuffer","minWindow","position","p1","p2","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","TopClipEdge","maxWindow","LeftClipEdge","RightClipEdge","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","AbstractScene_1","texture_1","TwisterScene","AbstractScene","Promise","all","load","then","texture","backgroundTexture","logoTexture","time","Date","now","fastFramebufferCopy","draw","a","xoff","sin","rot","PI","x1","x2","x3","x4","max","dist","xPos","drawSpan","xpos","ypos","framebufferIndex","textureIndex","width","textureForwardDifference","hightlight","pow","j","color","min","g","b","Canvas_1","TwisterScene_1","canvas","Canvas","appendTo","document","getElementById","init","main","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","computeColor","triangulateConvexPolygon","triangleRasterizer","drawTriangleDDA","scalar","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","frame2","up","right","pos","add","cos","buildMesh","alpha","ScaleClipBlitter","xp","yp","height","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","inverseAlpha","framebufferPixel","texturePixel","RandomNumberGenerator_1","resolve","Uint32Array","rng","default","setSeed","getFloat","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","TexturingRenderingPipeline","points2","vertexArray","p3","uv","clipConvexPolygon2","zClipTriangle2","t1","computeNearPlaneIntersection2","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","TexturedTriangleRasterizer","temp","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","yDistanceLeft","yDistanceRight","slope1","slope2","tslope1u","tslope2u","tslope1v","tslope2v","zslope1","zslope2","curx1","curx2","curz1","curz2","curu1","curv1","curu2","curv2","xPosition","xPosition2","yPosition","spanzStep","spanuStep","spanvStep","wStart","uStart","vStart","wBuffer","bob","color2","t2","t3","TriangleRasterizer","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","plane","getNormal","getDistance","mat","multiplyHom","angle","xScale","yScale","zScale","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","elapsedTime","xdist","ydist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","element","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","scene","coords","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","clearDepthBuffer","num","constructTranslationMatrix","sort","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"twister.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 163);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","module.exports = __webpack_public_path__ + \"36fbc222529fa8e2b722e7de1ca8f010.png\";","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('./assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('./assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n        const elapsedTime: number = 0.02 * time;\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < 190; i++) {\n            let xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            let rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let x1 = (Math.sin(rot) * 32) | 0;\n            let x2 = (Math.sin(Math.PI * 2 / 4 + rot) * 32) | 0;\n            let x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * 32) | 0;\n            let x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * 32) | 0;\n\n            if (x2 > x1) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                let dist = x2 - x1;\n                let xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture);\n            }\n\n            if (x3 > x2) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                let dist = x3 - x2;\n                let xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture);\n            }\n\n            if (x4 > x3) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                let dist = x4 - x3;\n                let xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture);\n            }\n\n            if (x1 > x4) {\n                let scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                let dist = x1 - x4;\n                let xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture);\n            }\n        }\n    }\n\n    private drawSpan(framebuffer: Framebuffer, dist: number,\n                     xpos: number, ypos: number, scale: number, texture: Texture): void {\n        let framebufferIndex = xpos + ypos * 320;\n        let textureIndex = (((ypos - Date.now() * 0.029) | 0) & 0xff) * texture.width;\n        let textureForwardDifference = texture.width / dist;\n        let hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            let color = texture.texture[textureIndex | 0];\n\n            let r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            let g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            let b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Canvas } from '../../Canvas';\nimport { TwisterScene } from './TwisterScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TwisterScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}