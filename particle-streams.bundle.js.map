{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/examples/particle-streams/Application.ts","webpack:///./src/examples/particle-streams/ParticleStreamsScene.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/assets/blurredBackground.png","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Canvas_1","ParticleStreamsScene_1","canvas","Canvas","ParticleStreamsScene","appendTo","document","getElementById","init","main","AbstractScene_1","Texture_1","texture_1","AbstractScene","accumulationBuffer","Uint32Array","Promise","all","TextureUtils","load","then","texture","blurred","generateProceduralParticleTexture","particleTexture2","generateProceduralNoise","noise","time","Date","now","fastFramebufferCopy","drawParticleStreams","texture3","Texture","drawTexture","elapsedTime","noClear","points","Array","radius","radius2","sin","PI","j","num","cos","push","constructXRotationMatrix","multiply","modelViewMartrix","constructTranslationMatrix","multiplyMatrix","constructZRotationMatrix","constructYRotationMatrix","points2","forEach","element","transformed","project","sort","a","b","size","drawParticleNoDepth","interpolate","TextureUtils_1","AbstractGeometricObject","index","normals","normal","sub","cross","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","frame2","up","right","pos","add","buildMesh","alpha","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","RandomNumberGenerator_1","resolve","rng","default","setSeed","getFloat","width","height","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","clearColorBuffer","clearDepthBuffer","drawParticle","WHITE","drawLineDDANoZ","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"particle-streams.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 144);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { ParticleStreamsScene } from './ParticleStreamsScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new ParticleStreamsScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(texture => this.particleTexture2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2, true);\n        const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            let radius = 2.8;\n            let radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                let x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                let y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                let z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                let transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort(function (a, b) {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                //let size = -(2.0 * 192 / (element.z));\n                let size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, 1 / element.z, framebuffer.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","module.exports = __webpack_public_path__ + \"bbaba2795420534ca9f0184e07fb74f8.png\";","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}