{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/examples/starfield/StarfieldScene.ts","webpack:///./src/examples/starfield/Application.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Vertex.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Framebuffer_1","math_1","Vertex_1","AbstractClipEdge_1","BottomClipEdge","AbstractClipEdge","Framebuffer","minWindow","position","p1","p2","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","TopClipEdge","maxWindow","LeftClipEdge","RandomNumberGenerator_1","AbstractScene_1","StarfieldScene","AbstractScene","drawStarField","Date","now","frambuffer","elapsedTime","rng","default","setSeed","stars","Array","stars2","push","getFloat","clearColorBuffer","drawPixel","Canvas_1","StarfieldScene_1","canvas","Canvas","appendTo","document","getElementById","init","main","RightClipEdge","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractGeometricObject","points","index","normals","normal","sub","cross","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","sin","add","cos","buildMesh","alpha","ScaleClipBlitter","xp","yp","width","height","texture","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","Promise","resolve","Uint32Array","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","TexturingRenderingPipeline","points2","vertexArray","p3","uv","clipConvexPolygon2","zClipTriangle2","t1","computeNearPlaneIntersection2","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","TexturedTriangleRasterizer","temp","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","yDistanceLeft","yDistanceRight","slope1","slope2","tslope1u","tslope2u","tslope1v","tslope2v","zslope1","zslope2","curx1","curx2","curz1","curz2","curu1","curv1","curu2","curv2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","spanuStep","spanvStep","wStart","uStart","vStart","wBuffer","bob","color2","t2","t3","TriangleRasterizer","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","plane","getNormal","getDistance","mat","multiplyHom","angle","xScale","yScale","zScale","Geometry_1","texture_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","time","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","fastFramebufferCopy","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","element","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","scene","coords","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","then","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","all","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"starfield.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 133);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class StarfieldScene extends AbstractScene {\n\n    public render(framebuffer: Framebuffer): void {\n        this.drawStarField(framebuffer, Date.now());\n    }\n    \n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        let darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        let lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        let backgroundColor = 255 << 24 | 87 << 16 | 62 << 8 | 47;\n\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        let stars = new Array<Vector3f>();\n        let stars2 = new Array<Vector3f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        \n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % 320, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % 320, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { StarfieldScene } from './StarfieldScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new StarfieldScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}