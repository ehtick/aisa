{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/examples/sine-scroller/Application.ts","webpack:///./src/examples/sine-scroller/SineScrollerScene.ts","webpack:///./src/examples/sine-scroller/FontRenderer.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/examples/sine-scroller/assets/fraxionFont.png","webpack:///./src/examples/sine-scroller/assets/atlantis.png","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/geometrical-objects/Cube.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","Canvas_1","SineScrollerScene_1","canvas","Canvas","SineScrollerScene","appendTo","document","getElementById","init","main","Cube_1","RandomNumberGenerator_1","FlatShadingRenderingPipeline_1","AbstractScene_1","texture_1","FontRenderer_1","AbstractScene","cubeMesh","Cube","setCullFace","renderingPipeline","startTime","Date","now","fontRenderer","FontRenderer","Promise","all","load","then","texture","atlantisBackground","elapsedTime","drawStarField","clearDepthBuffer","drawText","constructTranslationMatrix","multiplyMatrix","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","frambuffer","rng","default","setSeed","stars","stars2","getFloat","clearColorBuffer","drawPixel","BACKGROUND_COLOR","BLACK","file","witdh","height","charToIndex","Map","fonts","addCharInex","charCodeAt","fontTexture","drawTextureRectFastAlpha","text","time","xpos","xFonts","width","xOff","floor","textOff","asciiCode","has","tx","ty","xs","ys","xt","yt","startW","endW","w","yDisp","sin","texIndex","frIndex","h","char","set","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","add","cos","buildMesh","alpha","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tz","sx","sy","sz","result","vector","resolve","Uint32Array","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","element","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","toColor","count","fill","alpha2","firstIndex","interpolate","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","fastFramebufferCopy","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","points2","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","num","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","seed","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"sine-scroller.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 177);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { SineScrollerScene } from './SineScrollerScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new SineScrollerScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Vector3f, Matrix4f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { FlatShadingRenderingPipeline } from '../../rendering-pipelines/FlatShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { FontRenderer } from './FontRenderer';\nimport { CubeScene } from '../cube/CubeScene';\n\nexport class SineScrollerScene extends AbstractScene {\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n\n    private atlantisBackground: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private renderingPipeline: FlatShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new FlatShadingRenderingPipeline(framebuffer);\n        this.startTime = Date.now();\n        this.fontRenderer = new FontRenderer(framebuffer, require('./assets/fraxionFont.png'));\n        return Promise.all([\n            TextureUtils.load(require('./assets/atlantis.png'), false).then(\n                (texture: Texture) => this.atlantisBackground = texture\n            ),\n            this.fontRenderer.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        const elapsedTime: number = time;\n\n        //framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.atlantisBackground.texture);\n        this.drawStarField(framebuffer, elapsedTime);\n\n        framebuffer.clearDepthBuffer();\n\n      //  this.renderingPipeline.draw(this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime * 0.007), 100, 200, 100);\n\n        this.fontRenderer.drawText(0, 80, '   TEAM GENESIS IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', elapsedTime);\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(0, 0, -9).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        let darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        let lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        let backgroundColor = 255 << 24 | 87 << 16 | 62 << 8 | 47;\n\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        let stars = new Array<Vector3f>();\n        let stars2 = new Array<Vector3f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector3f(rng.getFloat() * 320, Math.round(rng.getFloat() * 200), 0));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % 320, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % 320, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private witdh: number = 32;\n    private height: number = 34;\n    private charToIndex: Map<number, number>;\n\n    constructor(private framebuffer: Framebuffer, private file: string) {\n        this.charToIndex = new Map<number, number>();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText(x: number, y: number, text: string, time: number): void {\n        let xpos: number = x;\n        const firstIndex: number = 'A'.charCodeAt(0);\n        const xFonts: number = this.fontTexture.width / this.witdh;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.witdh;\n        const textOff: number = Math.floor((time * speed) / this.witdh) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(320 / this.witdh + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.witdh;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(xpos,\n                y, tx, ty, this.witdh, this.height, this.fontTexture, time);\n            xpos += this.witdh;\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, 320) - xs;\n        for (let w: number = startW; w < endW; w++) {\n            const yDisp: number = Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 40);\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * 320;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += 320;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","module.exports = __webpack_public_path__ + \"8726950e0ab1836ba5502e60d8ac796f.png\";","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        let a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}