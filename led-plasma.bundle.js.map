{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/examples/led-plasma/Application.ts","webpack:///./src/examples/led-plasma/LedPlasmaScene.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/assets/led.png","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Canvas_1","LedPlasmaScene_1","canvas","Canvas","LedPlasmaScene","appendTo","document","getElementById","init","main","AbstractScene_1","texture_1","AbstractScene","Promise","all","TextureUtils","load","then","texture","ledTexture","led","Date","now","elapsedTime","time","lineDirection","sin","cos","radialWaveCenter","add","difference","directionalWave","intensity","drawTextureRectNoAlpha","Texture_1","Texture","TextureUtils_1","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","buildMesh","alpha","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","RandomNumberGenerator_1","resolve","Uint32Array","rng","default","setSeed","getFloat","width","height","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","element","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","fastFramebufferCopy","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","noClear","clearColorBuffer","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"led-plasma.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 142);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { LedPlasmaScene } from './LedPlasmaScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new LedPlasmaScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LedPlasmaScene extends AbstractScene {\n\n    private ledTexture: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/led.png'), false).then(\n                (texture: Texture) => this.ledTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        this.led(framebuffer, Date.now(), this.ledTexture);\n    }\n\n     // TODO: create interesting pattern!\n     public led(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        let time = elapsedTime * 0.0007 * 1.0;\n        let lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        let radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        let difference: Vector3f = new Vector3f(0, 0, 0);\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                let radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                let waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                let intensity = ((waveSum * 15) | 0) % 16;\n                framebuffer.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","module.exports = __webpack_public_path__ + \"b456e9dc15d272b079029a5ca6468305.png\";","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}