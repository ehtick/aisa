{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/examples/toxic-dots/Application.ts","webpack:///./src/examples/toxic-dots/ToxicDotsScene.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Texture_1","Texture","TextureUtils_1","TextureUtils","Canvas_1","ToxicDotsScene_1","canvas","Canvas","ToxicDotsScene","appendTo","document","getElementById","init","main","AbstractScene_1","AbstractScene","tmp","Uint32Array","tmp2","time","Date","now","blur","shadingTorus3","elapsedTime","points","frame","torusFunction","PI","frame2","up","right","sub","cross","pos","sin","add","cos","push","modelViewMartrix","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","Array","constructTranslationMatrix","transformed","multiply","xx","yy","color","drawPixel","g","b","index","sumIndex","fastFramebufferCopy","AbstractGeometricObject","normals","normal","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","buildMesh","alpha","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","RandomNumberGenerator_1","Promise","resolve","texture","rng","default","setSeed","getFloat","width","height","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","then","render","flipBackbuffer","requestAnimationFrame","putImageData","element","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","texture_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","clearDepthBuffer","num","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","all","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"toxic-dots.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 158);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Canvas } from '../../Canvas';\nimport { ToxicDotsScene } from './ToxicDotsScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new ToxicDotsScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector3f, Matrix4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class ToxicDotsScene extends AbstractScene {\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        this.blur(framebuffer);\n        this.shadingTorus3(framebuffer, time * 0.003);\n    }\n\n    public shadingTorus3(framebuffer: Framebuffer, elapsedTime: number): void {\n        let points: Array<Vector3f> = [];\n        const STEPS = 15 * 2;\n        const STEPS2 = 12 * 2;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = framebuffer.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = framebuffer.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        let scale = 1.2;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.09));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 25,\n            Math.sin(elapsedTime * 0.05) * 9, -34).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        for (let i = 0; i < points2.length; i++) {\n            let v1 = points2[i];\n            let color = 0xffbbffbb;\n            if (v1.x > Framebuffer.minWindow.x && v1.x < Framebuffer.maxWindow.x &&\n                v1.y > Framebuffer.minWindow.y && v1.y < Framebuffer.maxWindow.y) {\n                framebuffer.drawPixel(v1.x, v1.y, color);\n            }\n        }\n    }\n\n    // optimization:\n    // - downscale image to half the size before bluring\n    // render result to texture in order to not blur the logo\n    tmp = new Uint32Array(320 * 200);\n    tmp2 = new Uint32Array(320 * 200);\n    public blur(framebuffer: Framebuffer) {\n        let scale = 1 / (3.1);\n        let r: number = 0;\n        let g: number = 0;\n        let b: number = 0;\n        let index = 1 + 320;\n        let sumIndex = 320;\n        let color: number;\n        for (let y = 0; y < 198; y++) {\n            for (let x = 0; x < 318; x++) {\n                color = framebuffer.framebuffer[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex++;\n\n                color = framebuffer.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                color = framebuffer.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                sumIndex -= 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp[index] = r | g << 8 | b << 16 | 255 << 24;\n                index++;\n            }\n            sumIndex += 2;\n            index += 2;\n        }\n\n        index = 320 + 1;\n        sumIndex = 1;\n        for (let x = 1; x < 320 - 1; x++) {\n            //   index = x + 320;\n            sumIndex = x;\n            for (let y = 0; y < 198; y++) {\n                color = this.tmp[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex += 320;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += 320;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += 320;\n\n                sumIndex -= 320 * 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp2[index] = r | g << 8 | b << 16 | 255 << 24;\n                index += 320;\n            }\n            index += -198 * 320 + 1;\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.tmp2);\n    }\n\n}\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}