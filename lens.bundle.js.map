{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/texture/index.ts","webpack:///./src/examples/lens/assets/lens.png","webpack:///./src/examples/lens/assets/atlantis.png","webpack:///./src/examples/lens/LensScene.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/examples/lens/Application.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Vertex.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/Canvas.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Framebuffer_1","math_1","Vertex_1","AbstractClipEdge_1","BottomClipEdge","AbstractClipEdge","Framebuffer","minWindow","position","p1","p2","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","TopClipEdge","maxWindow","LeftClipEdge","RightClipEdge","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractScene_1","texture_1","LensScene","AbstractScene","Promise","all","load","then","texture","texture5","texture6","time","Date","now","fastFramebufferCopy","drawLens","tex","xoff","cos","yoff","sin","radius","xx","yy","xx2","yy2","col","index","drawTexture","AbstractGeometricObject","points","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Canvas_1","LensScene_1","canvas","Canvas","appendTo","document","getElementById","init","main","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","modelViewMartrix","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","add","buildMesh","alpha","ScaleClipBlitter","xp","yp","width","height","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","RandomNumberGenerator_1","resolve","Uint32Array","rng","default","setSeed","getFloat","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","forEach","TexturingRenderingPipeline","points2","vertexArray","p3","uv","clipConvexPolygon2","zClipTriangle2","t1","computeNearPlaneIntersection2","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","TexturedTriangleRasterizer","temp","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","yDistanceLeft","yDistanceRight","slope1","slope2","tslope1u","tslope2u","tslope1v","tslope2v","zslope1","zslope2","curx1","curx2","curz1","curz2","curu1","curv1","curu2","curv2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","spanuStep","spanvStep","wStart","uStart","vStart","wBuffer","bob","color2","t2","t3","TriangleRasterizer","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","CohenSutherlandLineClipper","start","end","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","plane","getNormal","getDistance","mat","multiplyHom","angle","xScale","yScale","zScale","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","renderingPipeline","texturedRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","texture2","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","elapsedTime","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","element","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","scene","coords","computeBoundingSphere","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","clearDepthBuffer","num","constructTranslationMatrix","sort","a","size","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","draw","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"lens.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 160);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","module.exports = __webpack_public_path__ + \"dad0119c8dd1a33ab48b6870bfa8b432.png\";","module.exports = __webpack_public_path__ + \"bed841884f7920591d4279314a1b53da.png\";","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LensScene extends AbstractScene {\n\n    private texture5: Texture;\n    private texture6: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('./assets/atlantis.png'), false).then(\n                (texture: Texture) => this.texture5 = texture\n            ),\n            TextureUtils.load(require('./assets/lens.png'), true).then(\n                (texture: Texture) => this.texture6 = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n        const elapsedTime: number = 0.02 * time;\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.texture5.texture);\n        this.drawLens(framebuffer, this.texture5, this.texture6, time);\n    }\n\n\n    public drawLens(framebuffer: Framebuffer, texture: Texture, tex: Texture, time: number) {\n\n        const radius = 47;\n        let xoff = 320 / 2 + Math.cos(6 * time * 0.0002) * (320 / 2 - 50);\n        let yoff = 200 / 2 + Math.sin(4 * time * 0.0002) * (200 / 2 - 50);\n\n        // TODO: precalculate displacement in an array\n        for (let y = -radius; y <= radius; y++) {\n            for (let x = -radius; x <= radius; x++) {\n                if (x * x + y * y <= radius * radius) {\n\n                    let xx = Math.round(x + xoff);\n                    let yy = Math.round(y + yoff);\n\n                    let z = 1 + Math.sqrt(radius * radius - x * x - y * y) * 0.03;\n                    let xx2 = Math.round(x / z + xoff);\n                    let yy2 = Math.round(y / z + yoff);\n                    let col = texture.texture[xx2 + yy2 * 320];\n\n                    let index = xx + yy * 320;\n                    framebuffer.framebuffer[index] = col;\n                }\n            }\n        }\n\n        framebuffer.drawTexture(Math.round(xoff - 50), Math.round(yoff - 50), tex, 1.0);\n    }\n\n\n}\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { LensScene } from './LensScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new LensScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}