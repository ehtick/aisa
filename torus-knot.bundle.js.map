{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/examples/torus-knot/Application.ts","webpack:///./src/examples/torus-knot/TorusKnotScene.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/CullFace.ts","webpack:///./src/assets/rave.png","webpack:///./src/geometrical-objects/TorusKnot.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Texture_1","Texture","TextureUtils_1","TextureUtils","Canvas_1","TorusKnotScene_1","canvas","Canvas","TorusKnotScene","appendTo","document","getElementById","init","main","AbstractScene_1","texture_1","TorusKnot_1","RandomNumberGenerator_1","AbstractScene","torus","TorusKnot","setCullFace","Promise","all","load","then","texture","rave","generateProceduralNoise","noise","time","Date","now","raveMoview","shadingTorus5","glitchScreen","elapsedTime","fastFramebufferCopyOffset","glitchFactor","sin","rng","default","setSeed","texture2","height","width","getFloat","drawTextureRect","fastFramebufferCopy","tmpGlitch","rng2","k","yStart","size","off","offset","abs","cos","index","glIndex","max","count","clearDepthBuffer","modelViewMartrix","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","smashTime","smash","cosineInterpolate","constructTranslationMatrix","renderingPipeline","draw","getMesh","AbstractGeometricObject","points","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","FlatShadingRenderingPipeline","flatShading","lightDirection","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","project","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","j","triangleRasterizer","drawTriangleDDA","scalar","min","dot","Color","toPackedFormat","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","PI","frame2","up","right","pos","add","buildMesh","alpha","index_1","Sphere_1","ComputationalGeometryUtils","vertices","Error","Sphere","center","radius","forEach","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","w","resolve","Uint32Array","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","b","scene","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","render","flipBackbuffer","requestAnimationFrame","putImageData","element","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","Geometry_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","FlatShadingRenderingPipeline_1","TexturingRenderingPipeline_1","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","TexturingRenderingPipeline","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","set","toColor","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","startTime","fadeArray","clear","dest","xdist","ydist","dist","atan2","color1","distScale","zDist","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","points2","transformed","multiply","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","y1","sphere","sphereFunction2","getRadius","getCenter","file","disp","flat","coords","uv","computeBoundingSphere","obj","normals2","boundingSphere","dist2","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","clearColorBuffer","num","sort","a","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","drawSoftParticle","IMG_WIDTH","IMG_HEIGHT","rotMat","constructZRotationMatrix","y2","mu","mu2","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","torusFunction3","tangent","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","y0","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"torus-knot.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 152);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Canvas } from '../../Canvas';\nimport { TorusKnotScene } from './TorusKnotScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TorusKnotScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { Canvas } from '../../Canvas';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Vector3f, Matrix4f } from '../../math';\nimport { Torus } from '../../geometrical-objects/Torus';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\n\nexport class TorusKnotScene extends AbstractScene {\n\n    private rave: Texture;\n    private torus: TorusKnot = new TorusKnot();\n    private noise: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        framebuffer.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/rave.png'), false).then(texture => this.rave = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n        const elapsedTime: number = 0.02 * time;\n\n        this.raveMoview(framebuffer, time * 5, this.rave);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.shadingTorus5(framebuffer, Date.now() * 0.03);\n        this.glitchScreen(framebuffer, time, this.noise);\n        // framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n    }\n\n    public raveMoview(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        framebuffer.fastFramebufferCopyOffset(framebuffer.framebuffer, texture.texture, -(Math.round(elapsedTime / 200) % 11) * 200);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.0003) * 0.5 + 0.5);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        let texture2 = new Texture();\n        texture2.height = 200;\n        texture2.width = 320;\n        texture2.texture = framebuffer.framebuffer;\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(20 * (16 - x), 20 * ((16 * rng.getFloat()) | 0), 20 * x, 20 * y, 20, 20, texture2, 0.1 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < 16; x++) {\n                for (let y = 0; y < 10; y++) {\n                    framebuffer.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        let rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            let scale = rng2.getFloat() * glitchFactor;\n            let off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * 320;\n                let glIndex = yStart * 320 + 320 - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * 320;\n                let count = 320 - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n\n    private shadingTorus5(framebuffer: Framebuffer, time: number) {\n        framebuffer.clearDepthBuffer();\n\n        let scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.035));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.04));\n\n        let ukBasslineBpm = 130 / 2;\n        let ukBasslineClapMs = 60000 / ukBasslineBpm;\n        let smashTime = (time * 10) % ukBasslineClapMs;\n        let smash = (framebuffer.cosineInterpolate(0, 15, smashTime) - framebuffer.cosineInterpolate(15, 200, smashTime) +\n            0.4 * framebuffer.cosineInterpolate(200, 300, smashTime) - 0.4 * framebuffer.cosineInterpolate(300, 400, smashTime)\n        )\n            * 12;\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(time * 0.04) * 20,\n            Math.sin(time * 0.05) * 8 - smash * 5, -28 - 250).multiplyMatrix(modelViewMartrix);\n\n        framebuffer.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 200, 100, 100);\n    }\n\n}\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","module.exports = __webpack_public_path__ + \"539826c16dd852792e84c205811ca9f8.png\";","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            let tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize()\n            let right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        \n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n\n        this.buildMesh(points, index);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}