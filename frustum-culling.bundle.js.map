{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/math/index.ts","webpack:///./src/math/Vector3f.ts","webpack:///./src/screen-space-clipping/RightClipEdge.ts","webpack:///./src/screen-space-clipping/LeftClipEdge.ts","webpack:///./src/screen-space-clipping/TopClipEdge.ts","webpack:///./src/screen-space-clipping/BottomClipEdge.ts","webpack:///./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack:///./src/texture/index.ts","webpack:///./src/geometrical-objects/AbstractGeometricObject.ts","webpack:///./src/examples/frustum-culling/Application.ts","webpack:///./src/examples/frustum-culling/FrustumCullingScene.ts","webpack:///./src/animation/CameraAnimator.ts","webpack:///./src/rendering-pipelines/FlatShadingRenderingPipeline.ts","webpack:///./src/animation/CameraKeyFrame.ts","webpack:///./src/clustered-culling/BoundingVolumeExpander.ts","webpack:///./src/geometrical-objects/Torus.ts","webpack:///./src/math/Geometry.ts","webpack:///./src/Vertex.ts","webpack:///./src/math/Matrix4f.ts","webpack:///./src/texture/TextureUtils.ts","webpack:///./src/blitter/ScaleClipBlitter.ts","webpack:///./src/Canvas.ts","webpack:///./src/math/Matrix3.ts","webpack:///./src/math/Sphere.ts","webpack:///./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack:///./src/rasterizer/TriangleRasterizer.ts","webpack:///./src/rasterizer/TexturedTriangleRasterizer.ts","webpack:///./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack:///./src/Framebuffer.ts","webpack:///./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack:///./src/scenes/AbstractScene.ts","webpack:///./src/blender/BlenderJsonParser.ts","webpack:///./src/math/Vector4f.ts","webpack:///./src/camera/BasicCamera.ts","webpack:///./src/math/Plane.ts","webpack:///./src/screen-space-clipping/AbstractClipEdge.ts","webpack:///./src/camera/index.ts","webpack:///./src/camera/ControllableCamera.ts","webpack:///./src/clustered-culling/FrustumCuller.ts","webpack:///./src/CullFace.ts","webpack:///./src/RandomNumberGenerator.ts","webpack:///./src/core/Color.ts","webpack:///./src/texture/Texture.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector4f_1","Vector4f","Vector3f_1","Vector3f","Matrix3_1","Matrix3f","Matrix4f_1","Matrix4f","[object Object]","x","y","z","this","scale","vec","vec1","vec2","scal","Math","sqrt","reci","length","mul","Framebuffer_1","Vertex_1","AbstractClipEdge_1","RightClipEdge","AbstractClipEdge","position","p1","p2","Framebuffer","maxWindow","round","vertex","Vertex","textCoord","TextureCoordinate","u","textureCoordinate","v","LeftClipEdge","minWindow","math_1","TopClipEdge","BottomClipEdge","CullFace_1","AbstractRenderingPipeline","framebuffer","NEAR_PLANE_Z","cullMode","CullFace","BACK","face","v1","v2","v3","det","v4","Texture_1","Texture","TextureUtils_1","TextureUtils","AbstractGeometricObject","points","index","normals","Array","normal","sub","cross","push","inverse","normalize","faces","mesh","transformedPoints","map","transformedNormals","Canvas_1","FrustumCullingScene_1","canvas","Canvas","FrustumCullingScene","appendTo","document","getElementById","init","main","CameraAnimator_1","CameraKeyFrame_1","BlenderJsonParser_1","BoundingVolumeExpander_1","FrustumCuller_1","RandomNumberGenerator_1","FlatShadingRenderingPipeline_1","AbstractScene_1","AbstractScene","accumulationBuffer","Uint32Array","renderingPipeline","FlatShadingRenderingPipeline","setCullFace","world","BoundingVolumeExpander","expand","BlenderJsonParser","parse","Promise","all","time","Date","now","drawBlenderScene","elapsedTime","texture","texture2","clearColorBuffer","clearDepthBuffer","keyFrames","CameraKeyFrame","cameraAnimator","CameraAnimator","setKeyFrames","modelViewMartrix","getViewMatrix","frustumCuller","FrustumCuller","updateFrustum","pos","j","model","isPotentiallyVisible","draw","colLine","drawBoundingSphere","rng","default","setSeed","getFloat","sin","points2","forEach","element","transformed","project","multiply","sort","a","b","size","drawSoftParticle","drawScreenBounds","camera_1","CosineInterpolate","y1","y2","mu","mu2","cos","PI","CubicInterpolate","y0","y3","a0","a1","a2","a3","first","zero","second","third","fraction","look","rotation","add","BasicCamera","Color_1","SutherlandHodgman2DClipper_1","AbstractRenderingPipeline_1","flatShading","lightDirection","red","green","blue","normalMatrix","computeNormalMatrix","multiplyHomArr","isInFrontOfNearPlane","projected","renderConvexPolygon","output","zClipTriangle","ratio","subject","input","S","point","computeNearPlaneIntersection","isTriangleCCW","isTriangleCCW2","clippedPolygon","SutherlandHodgman2DClipper","clipConvexPolygon","color","computeColor","triangulateConvexPolygon","triangleRasterizer","drawTriangleDDA","scalar","min","max","dot","Color","toPackedFormat","Geometry_1","scene","sphere","ComputationalGeometryUtils","computeBoundingSphere","getCenter","w","AbstractGeometricObject_1","Torus","invert","super","frame","torusFunction","frame2","up","right","buildMesh","alpha","index_1","Sphere_1","vertices","Error","Sphere","center","radius","matrix","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","transpose","inverseTranslation","constructIdentityMatrix","inverseRotation","multiplyMatrix","modelView","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","sx","sy","sz","result","vector","resolve","width","height","dx","dy","filename","transparency","image","Image","onload","getImageData","onerror","src","withAlpha","createElement","context","getContext","drawImage","data","conv","ScaleClipBlitter","xp","yp","alphaBlend","newHeight","newWidth","yStart","xStart","xTextureStart","xStep","yStep","xx","yy","alphaScale","index2","textureIndex","inverseAlpha","framebufferPixel","texturePixel","g","style","cssText","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","boundRenderLoop","renderLoop","fullscreen","lastClick","addEventListener","evt","preventDefault","currentClick","toggleFullscreen","then","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","angle","xScale","yScale","zScale","plane","getNormal","getDistance","mat","multiplyHom","CohenSutherlandLineClipper","start","end","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","drawLineDDA","regionCode","TriangleRasterizer","p3","temp","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","slope1","slope2","zslope1","zslope2","curx1","curx2","curz1","curz2","xPosition","xPosition2","yPosition","framebufferIndex","spanzStep","wStart","wBuffer","yDistanceLeft","yDistanceRight","TexturedTriangleRasterizer","fillLongRightTriangle2","tex","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","bob","color2","t1","t2","t3","RightClipEdge_1","LeftClipEdge_1","BottomClipEdge_1","TopClipEdge_1","clipRegion","edge","isInside","computeIntersection","texture_1","CohenSutherlandLineClipper_1","Torus_1","TriangleRasterizer_1","ScaleClipBlitter_1","TexturedTriangleRasterizer_1","TexturingRenderingPipeline_1","torus","linerClipper","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","TexturingRenderingPipeline","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","unsignedIntArray","Uint8ClampedArray","set","toColor","count","fill","alpha2","text","xpos","firstIndex","charCodeAt","floor","drawTextureRectFastAlpha","interpolate","xs","ys","xt","yt","h","texIndex","frIndex","fbPixel","txPixel","drawBox2","readPixel","xoff","yoff","current","offset","fastFramebufferCopyOffset","startTime","fadeArray","clear","drawTextureRect","dest","k","xdist","ydist","dist","atan2","color1","distScale","zDist","fastFramebufferCopy","drawScaledTextureClip","getBilinearFilteredPixel2","textureRowOffset","framebufferRowOffset","div","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","nearPlaneClipping","cohenSutherlandLineClipper","theta","phi","x1","sphereFunction2","getRadius","file","disp","flat","coords","uv","obj","normals2","boundingSphere","dist2","cosineInterpolate","final","xdist2","ydist2","finalDist","cScale","distance","intensity","drawTextureRectNoAlpha","noClear","num","constructTranslationMatrix","drawParticle","WHITE","drawLineDDANoZ","texture3","dirt","camera","mv","blenderObj4","model2","blenderObj5","lensflareScreenSpace","drawLensFlare","blenderObj6","blenderObj7","scale2","IMG_WIDTH","IMG_HEIGHT","abs","rotMat","constructZRotationMatrix","getMesh","steps","vn1","vn2","vn3","divideSphere","pointsA","find","idx","indexOf","xx2","yy2","createSphere","newPoints","asin","xpos2","ypos","ypos2","disp_x0y0","disp_x1y0","disp_x0y1","disp_x1y1","x0","z0","z1","isInside2","computeIntersection2","drawTriangleDDA2","screenPos","dir","drawTexture","drawTextureRectAdd","xDistance","sign","wDelta","drawPixel","camX","dirX","dirY","highestPoint","rayX","rayY","projHeight","packedRGB","vertexArray","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","f","yaw","pitch","roll","translation","Plane","dot1","dot2","BasicCamera_1","ControllableCamera_1","ControllableCamera","speed","deltaTime","Plane_1","planes","modelViewMatrix","getInverseRotation","boundingVolume","isInsidePositiveHalfSpace","seed","BLACK","RED","LIME","BLUE","YELLOW","CYAN","MAGENTA","SLATE_GRAY","x0y0","getPixel","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp"],"mappings":"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","file":"frustum-culling.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 167);\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number, y:number, z:number) {\n        this.x=x;\n        this.y=y;\n        this.z=z;\n    }\n\n    public mult(scale: number) {\n        return new Vector3f(this.x*scale, this.y * scale, this.z * scale);\n    }\n\n    sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    sub2(vec1: Vector3f, vec2: Vector3f): void {\n       this.x = vec1.x - vec2.x;\n       this.y = vec1.y - vec2.y;\n       this.z =  vec1.z - vec2.z;\n    }\n\n    mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    add2(vec: Vector3f,vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y =  vec.y + vec2.y;\n        this.z =  vec.z + vec2.z;\n    }\n\n    cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    cross2(vec1: Vector3f,vec2: Vector3f): void {\n        this.x =vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y =vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z =vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    length() {\n        return Math.sqrt(this.x*this.x +this.y*this.y +this.z*this.z);\n    }\n\n    normalize(): Vector3f {\n        let reci = 1.0/this.length();\n        return this.mul(reci);\n    }\n\n    normalize2(): void {\n        let reci = 1.0/this.length();\n       this.x *= reci;\n       this.y *= reci;\n       this.z *= reci;\n    }\n\n    dot(vec:Vector3f): number {\n        return this.x*vec.x+this.y*vec.y+this.z*vec.z;\n    }\n\n}","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x < 320;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < 320;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.maxWindow.x + 1,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.x + 1 - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { AbstractClipEdge } from \"./AbstractClipEdge\";\nimport { Vector3f } from \"../math/Vector3f\";\nimport { Vertex, TextureCoordinate } from \"../Vertex\";\nimport { Framebuffer } from \"../Framebuffer\";\nimport { Vector4f } from \"../math/Vector4f\";\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(Framebuffer.minWindow.x,\n            Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)),\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(Framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f, Vector4f } from \"../math\";\nimport { TextureCoordinate, Vertex } from \"../Vertex\";\nimport { AbstractClipEdge } from \"./AbstractClipEdge\";\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < Framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)),\n            Framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.maxWindow.y + 1 - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        let vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        let textCoord = new TextureCoordinate();\n        let z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n    public isInside(p: Vector3f): boolean {\n        return p.y >= Framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= Framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f {\n        return new Vector3f(\n            Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)),\n            Framebuffer.minWindow.y,\n            1 / (1 / p1.z + (1 / p2.z - 1 / p1.z) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y)));\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                Framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (Framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n                         v2: { x: number, y: number, z: number },\n                         v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n                          v2: { x: number, y: number, z: number },\n                          v3: { x: number, y: number, z: number },\n                          v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","import { Vector4f } from '../math';\nimport { FlatShadedFace } from './Face';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>): void {\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            let normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        let faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n                normal: i / 3\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points: points,\n            normals: normals,\n            faces: faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { FrustumCullingScene } from './FrustumCullingScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new FrustumCullingScene());\n        canvas.appendTo(document.getElementById('aisa'));\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n","import { CameraAnimator } from '../../animation/CameraAnimator';\nimport { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Canvas } from '../../Canvas';\nimport { BoundingVolumeExpander } from '../../clustered-culling/BoundingVolumeExpander';\nimport { FrustumCuller } from '../../clustered-culling/FrustumCuller';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { Sphere } from '../../math/Sphere';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { FlatShadingRenderingPipeline } from '../../rendering-pipelines/FlatShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FrustumCullingScene extends AbstractScene {\n\n    private world: Array<[FlatshadedMesh, Sphere]>;\n\n    private accumulationBuffer: Uint32Array = new Uint32Array(320 * 200);\n    private renderingPipeline: FlatShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new FlatShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.world = BoundingVolumeExpander.expand(BlenderJsonParser.parse(require('../../assets/world2.json')));\n\n        return Promise.all([\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        this.drawBlenderScene(framebuffer, time - 260000, null);\n    }\n\n    public drawBlenderScene(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, texture2?: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        let keyFrames: Array<CameraKeyFrame> = [\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(0, 0, 0)),\n            new CameraKeyFrame(new Vector3f(5, 10, 10), new Vector3f(0, 0, 0.1)),\n            new CameraKeyFrame(new Vector3f(5, 10, 0), new Vector3f(1.5, -1, -0.2)),\n            new CameraKeyFrame(new Vector3f(5, 3, -10), new Vector3f(2.5, 0, -0.09)),\n            new CameraKeyFrame(new Vector3f(-5, 7, -10), new Vector3f(3.5, 0, 1)),\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(4, 0, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 3, -2), new Vector3f(3, -0.2, 0.)),\n            new CameraKeyFrame(new Vector3f(18, 2, -0), new Vector3f(2, -0.4, 0.)),\n            new CameraKeyFrame(new Vector3f(15, 4, -0), new Vector3f(2, -0.5, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 7, -10), new Vector3f(2.5, 0, -0.09)),\n        ];\n\n        let cameraAnimator = new CameraAnimator();\n        cameraAnimator.setKeyFrames(keyFrames);\n\n        let modelViewMartrix: Matrix4f = cameraAnimator.getViewMatrix(elapsedTime);\n\n        let count = 0;\n\n        let frustumCuller = new FrustumCuller();\n        frustumCuller.updateFrustum(modelViewMartrix, cameraAnimator.pos);\n        let i = 0;\n\n        for (let j = 0; j <  this.world.length; j++) {\n\n            const model: [FlatshadedMesh, Sphere] =  this.world[j];\n\n            if (frustumCuller.isPotentiallyVisible(model[1])) {\n                this.renderingPipeline.draw(model[0], modelViewMartrix, 144, 165, 116);\n                let colLine = 255 << 24 | 255 << 8;\n                framebuffer.drawBoundingSphere(model[1], modelViewMartrix, colLine);\n                count++;\n            } else {\n                let colLine = 255 << 24 | 255;\n                framebuffer.drawBoundingSphere(model[1], modelViewMartrix, colLine);\n            }\n        }\n\n        if (texture2) {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(66);\n            for (let i = 0; i < 640; i++) {\n                //points.push(new Vector3f(rng.getFloat() * 30 - 15, rng.getFloat() * 10 - 1, rng.getFloat() * 30 - 15));\n                let x = rng.getFloat() * 30 - 15;\n                x += Math.sin(elapsedTime * 0.0008 + x) * 2;\n                let y = rng.getFloat() * 30 - 15;\n                y += Math.sin(elapsedTime * 0.0009 + y) * 2;\n                let z = rng.getFloat() * 30 - 15;\n                z += Math.sin(elapsedTime * 0.0011 + z) * 2;\n                points.push(new Vector3f(x, y, z));\n            }\n\n            let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n                let transformed = framebuffer.project(modelViewMartrix.multiply(element));\n                points2.push(transformed);\n            });\n\n            points2.sort(function (a, b) {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                let size = -(3.1 * 192 / (element.z));\n                framebuffer.drawSoftParticle(\n                    Math.round(element.x - size * 0.5),\n                    Math.round(element.y - size * 0.5),\n                    Math.round(size), Math.round(size), texture2, 1 / element.z, 1.0);\n            });\n        }\n        // framebuffer.drawText(8, 18 + 8, 'RENDERED OBJECTS: ' + count + '/' + this.world.length, texture);\n        framebuffer.drawScreenBounds(framebuffer);\n    }\n\n}\n","import { BasicCamera } from '../camera';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class CameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        let keyFrameDuration = 5000;\n\n        let first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        let zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        let second = (first + 1) % this.keyFrames.length;\n        let third = (first + 2) % this.keyFrames.length;\n        let fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        let mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\n        let position = new Vector3f(\n            CosineInterpolate(this.keyFrames[first].position.x, this.keyFrames[second].position.x, fraction),\n            CosineInterpolate(this.keyFrames[first].position.y, this.keyFrames[second].position.y, fraction),\n            CosineInterpolate(this.keyFrames[first].position.z, this.keyFrames[second].position.z, fraction)\n        );\n        position = new Vector3f(\n            CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        look = new Vector3f(\n            CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new BasicCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\nfunction CosineInterpolate(y1: number, y2: number, mu: number): number {\n    let mu2: number;\n    mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n    return (y1 * (1 - mu2) + y2 * mu2);\n}\n\nfunction CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n    let a0: number;\n    let a1: number;\n    let a2: number;\n    let a3: number;\n    let mu2: number;\n\n    mu2 = mu * mu;\n    a0 = y3 - y2 - y0 + y1;\n    a1 = y0 - y1 - a0;\n    a2 = y2 - y0;\n    a3 = y1;\n\n    return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n}\n","import { Color } from '../core/Color';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class FlatShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public flatShading: boolean = false;\n    private lightDirection: Vector4f = new Vector4f(0.5, 0.5, 0.3, 0.0).normalize();\n\n    public draw(mesh: FlatshadedMesh, modelViewMartrix: Matrix4f,\n                red: number, green: number, blue: number): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal: Vector4f = mesh.transformedNormals[mesh.faces[i].normal];\n\n            if (this.isInFrontOfNearPlane(v1) && this.isInFrontOfNearPlane(v2) && this.isInFrontOfNearPlane(v3)) {\n                const projected: Array<Vector3f> = [\n                    this.framebuffer.project(v1),\n                    this.framebuffer.project(v2),\n                    this.framebuffer.project(v3)\n                ];\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                const output: Array<Vector4f> = this.zClipTriangle(new Array<Vector4f>(v1, v2, v3));\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                const projected: Array<Vector3f> = output.map<Vector3f>((v: Vector4f) => {\n                    return this.framebuffer.project(v);\n                });\n\n                this.renderConvexPolygon(projected, normal, red, green, blue);\n            }\n        }\n    }\n\n    public computeNearPlaneIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.z) / (p2.z - p1.z);\n        return new Vector4f(\n            ratio * (p2.x - p1.x) + p1.x,\n            ratio * (p2.y - p1.y) + p1.y,\n            this.NEAR_PLANE_Z\n        );\n    }\n\n    public zClipTriangle(subject: Array<Vector4f>): Array<Vector4f> {\n        const input: Array<Vector4f> = subject;\n        const output: Array<Vector4f> = new Array<Vector4f>();\n        let S: Vector4f = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vector4f = input[i];\n            if (this.isInFrontOfNearPlane(point)) {\n                if (!this.isInFrontOfNearPlane(S)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(projected: Array<Vector3f>, normal: Vector4f,\n                                red: number, green: number, blue: number): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(projected[0], projected[1], projected[2])) {\n            return;\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0],\n                projected[1],\n                projected[2],\n                projected[3])\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vector3f> = SutherlandHodgman2DClipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        const color: number = this.computeColor(normal, this.lightDirection, red, green, blue);\n\n        this.triangulateConvexPolygon(clippedPolygon, color);\n    }\n\n    private triangulateConvexPolygon(clippedPolygon: Array<Vector3f>, color: number): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.framebuffer.triangleRasterizer.drawTriangleDDA(\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j],\n                color\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, lightDirection: Vector4f, red: number, green: number, blue: number): number {\n\n        if (this.flatShading) {\n            return 255 << 24 | blue << 16 | green << 8 | red;\n        }\n\n        // TODO: do lighting only if triangle is visible\n        let scalar: number = Math.min((Math.max(0.0, normal.dot(lightDirection))), 1.0);\n        scalar = scalar * 0.85 + 0.15;\n        return new Color(scalar * red, scalar * green, scalar * blue, 255).toPackedFormat();\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { Sphere } from '../math/Sphere';\n\nexport class BoundingVolumeExpander {\n\n    public static expand(scene: Array<FlatshadedMesh>): Array<[FlatshadedMesh, Sphere]> {\n        return scene.map((mesh: FlatshadedMesh): [FlatshadedMesh, Sphere] => {\n            const sphere: Sphere = new ComputationalGeometryUtils().computeBoundingSphere(mesh.points);\n            sphere.getCenter().w = 1;\n            return [mesh, sphere];\n        });\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> =  [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f, Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f, Vector4f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n\nexport class Vertex {\n    public position: Vector4f;\n    public textureCoordinate: TextureCoordinate;\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\nimport { Matrix3f } from './Matrix3';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public transpose(): Matrix4f {\n        let transpose = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        let inverseTranslation = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        let scale = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        let scale = 1.0 ;\n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n        \n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n    \n        let inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21 ;\n        inverseRotation.m31 = this.m31 ;\n\n        inverseRotation.m12 = this.m12 ;\n        inverseRotation.m22 = this.m22 ;\n        inverseRotation.m32 = this.m32 ;\n\n        inverseRotation.m13 = this.m13 ;\n        inverseRotation.m23 = this.m23 ;\n        inverseRotation.m33 = this.m33 ;\n        \n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        let planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        let planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        let lightPosition: Vector3f =new Vector3f(0, 11, 0);\n        //modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        let d = -planePoint.dot(planeNormal);\n        let NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        let shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n        \n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        let matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        let result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            let rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    let dx = 127 - x\n                    let dy = 127 - y\n                    let r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Texture } from \"../texture/Texture\";\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n\n    private boundRenderLoop: (time: number) => void;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        this.context.oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        this.context.webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(320, 200);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    //  Move parts\n    public init(): void {\n        // FIXME: move fullsccreen handling into utils class\n        let fullscreen = false;\n        let toggleFullscreen = function () {\n            if (!fullscreen) {\n                fullscreen = true;\n                if ('requestFullscreen' in this) {\n                    this['requestFullscreen']();\n                } else if ('webkitRequestFullScreen' in this) {\n                    this['webkitRequestFullScreen']();\n                } else if ('mozRequestFullScreen' in this) {\n                    this['mozRequestFullScreen']();\n                } else if ('msRequestFullscreen' in this) {\n                    this['msRequestFullscreen']();\n                } else {\n                    fullscreen = false;\n                }\n            } else {\n                fullscreen = false;\n                if ('exitFullscreen' in document) {\n                    document['exitFullscreen']();\n                } else if ('mozCancelFullScreen' in document) {\n                    document['mozCancelFullScreen']();\n                } else if ('webkitExitFullscreen' in document) {\n                    document['webkitExitFullscreen']();\n                } else if ('msExitFullScreen' in document) {\n                    document['msExitFullScreen']();\n                } else {\n                    fullscreen = true;\n                }\n            }\n        };\n        let lastClick = 0;\n        // click supported on mobile and desktop. dblclick only supported on browser\n        // so emulate dblclick\n        this.canvas.addEventListener('click', function (evt) {\n            evt.preventDefault();\n            let currentClick = Date.now();\n            if (currentClick - lastClick < 200) {\n                toggleFullscreen.bind(this)();\n            }\n            lastClick = currentClick;\n        });\n        this.scene.init(this.framebuffer).then(() => {\n            this.renderLoop(0);\n        });\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        let matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        let result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\nimport { Vector3f } from './Vector3f';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 == CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    let tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    let tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = Math.round(p1.x + (p2.x - p1.x) * (Framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = Framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) != CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = Math.round(p1.y + (p2.y - p1.y) * (Framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = Framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < Framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > Framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < Framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > Framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math/Vector3f\";\n\nexport class TriangleRasterizer {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     * TODO: rotate around center and check for correctness!!\n     */\n    public drawTriangleDDA(p1: Vector3f, p2: Vector3f, p3: Vector3f, color: number): void {\n        if (p1.y > p3.y) {\n            let temp: Vector3f = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y > p2.y) {\n            let temp: Vector3f = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.y > p3.y) {\n            let temp: Vector3f = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.y == p3.y) {\n            return;\n        } else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } else {\n            let x = (p3.x - p1.x) * (p2.y - p1.y) / (p3.y - p1.y) + p1.x;\n            if (x > p2.x) {\n                this.fillLongRightTriangle(p1, p2, p3, color);\n            } else {\n                this.fillLongLeftTriangle(p1, p2, p3, color);\n            }\n        }\n    }\n\n\n\n    fillBottomFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistance = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v1.x) / yDistance;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let length = Math.round(yDistance);\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillTopFlatTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n        let yDistance = v3.y - v1.y;\n        let slope1 = (v3.x - v1.x) / yDistance;\n        let slope2 = (v3.x - v2.x) / yDistance;\n\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistance;\n        let zslope2 = (1 / v3.z - 1 / v2.z) / yDistance;\n\n        let curx1 = v1.x;\n        let curx2 = v2.y;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v2.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v2.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistance; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            for (let j = 0; j < length; j++) {\n                let wStart = (curz2 - curz1) / (length) * j + curz1;\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n    fillLongRightTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceLeft = v2.y - v1.y;\n        let yDistanceRight = v3.y - v1.y;\n\n        let slope1 = (v2.x - v1.x) / yDistanceLeft;\n        let slope2 = (v3.x - v1.x) / yDistanceRight;\n\n        let zslope1 = (1 / v2.z - 1 / v1.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.z - 1 / v1.z) / yDistanceRight;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceLeft = v3.y - v2.y;\n        slope1 = (v3.x - v2.x) / yDistanceLeft;\n        zslope1 = (1 / v3.z - 1 / v2.z) / yDistanceLeft;\n        curx1 = v2.x;\n        curz1 = 1.0 / v2.z;\n        xPosition = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n\n    fillLongLeftTriangle(v1: Vector3f, v2: Vector3f, v3: Vector3f, color: number): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let wStart = curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    this.framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vertex } from '../Vertex';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class TexturedTriangleRasterizer {\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA2(p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        let temp: Vertex;\n\n        if (p1.position.y > p3.position.y) {\n            temp = p1;\n            p1 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            temp = p2;\n            p2 = p3;\n            p3 = temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } /*else if (p2.y == p3.y) {\n            if (p2.x > p3.x) {\n                let temp: Vector3f = p2;\n                p2 = p3;\n                p3 = temp;\n            }\n            this.fillBottomFlatTriangle(p1, p2, p3, color);\n        } else if (p1.y == p2.y) {\n            if (p1.x > p2.x) {\n                let temp: Vector3f = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n            this.fillTopFlatTriangle(p1, p2, p3, color);\n        } */else {\n            let x = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) / (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(p1, p2, p3);\n            } else {\n                let tex = p1.textureCoordinate;\n                let tex2 = p2.textureCoordinate;\n                let tex3 = p3.textureCoordinate;\n                this.fillLongLeftTriangle2(p1.position, p2.position, p3.position, new Vector3f(tex.u, tex.v, 0), new Vector3f(tex2.u, tex2.v, 0), new Vector3f(tex3.u, tex3.v, 0));\n            }\n        }\n    }\n\n    fillLongRightTriangle2(v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n        let yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        let slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        let tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        let tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        let zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curx1 = v1.position.x;\n        let curx2 = v1.position.x;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    /** shading code */\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curx1 = v2.position.x;\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    \n    fillLongLeftTriangle2(v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        let yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        let slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        let tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        let tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        let zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            let length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * 320 + Math.round(xPosition)\n\n\n            let spanzStep = (curz2 - curz1) / length;\n            let spanuStep = (curu2 - curu1) / length;\n            let spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    let z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    //let scale = ((color >> 8) & 0xff) / 255;\n                    //let r = (color2 & 0xff) * scale;\n                    //let g = ((color2 >> 8) & 0xff) * scale;\n                    //let b = ((color2 >> 16) & 0xff) * scale;\n                    //this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | 255 << 24;\n                    this.framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\n\nexport class SutherlandHodgman2DClipper {\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public static clipConvexPolygon(subject: Array<Vector3f>): Array<Vector3f> {\n\n        let output = subject;\n\n        for (let j = 0; j < SutherlandHodgman2DClipper.clipRegion.length; j++) {\n            const edge = SutherlandHodgman2DClipper.clipRegion[j];\n            const input = output;\n            output = new Array<Vector3f>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","\nimport { ComputationalGeometryUtils } from './math/Geometry';\nimport { Sphere } from './math/Sphere';\nimport { CullFace } from './CullFace';\nimport { TextureCoordinate, Vertex } from './Vertex';\nimport { Texture } from './texture';\nimport { Matrix3f, Matrix4f, Vector3f, Vector4f } from './math';\nimport { ControllableCamera } from './camera';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { Color } from './core/Color';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { Torus } from './geometrical-objects/Torus';\nimport { TriangleRasterizer } from './rasterizer/TriangleRasterizer';\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\n\n//let bunnyJson = <any>require('./assets/bunny.json');\n// let roomJson = <any>require('./assets/room.json');\n// let hoodlumJson = <any>require('./assets/hoodlum.json');\n//let labJson = <any>require('./assets/lab.json');\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n//let hlm2018Json = <any>require('./assets/hoodlum2018.json');\n\nexport class Framebuffer {\n\n    static PIXEL_SIZE_IN_BYTES = 4;\n\n    private width: number;\n    private height: number;\n    private imageData: ImageData;\n    public framebuffer: Uint32Array;\n    private unsignedIntArray: Uint8ClampedArray;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n\n    private torus = new Torus();\n    private bunnyObj: any;\n    private blenderObj: any;\n    private blenderObj4: any;\n    private blenderObj5: any;\n    private blenderObj6: any;\n    private blenderObj7: any;\n    public bob: Texture;\n    private sphere: any;\n    private plane: any;\n    private cylinder: any;\n    private cylinder2: any;\n    private sphereDisp: any;\n    private sphereDisp2: any;\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public triangleRasterizer = new TriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    private scaleClipBlitter = new ScaleClipBlitter(this);\n    public renderingPipeline = new FlatShadingRenderingPipeline(this);\n    public texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    setTexture(texture: Texture) {\n        this.bob = texture;\n    }\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(320, 200);\n        this.wBuffer = new Float32Array(320 * 200);\n        let arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n    }\n\n    public precompute(texture: Texture, texture2: Texture): void {\n        //this.bunnyObj = this.createBunny();\n        //this.blenderObj4 = this.getBlenderScene(roomJson, false);\n        //this.blenderObj5 = this.getBlenderScene(hoodlumJson, false);\n        //this.blenderObj6 = this.getBlenderScene(labJson, false);\n        //this.blenderObj7 = this.getBlenderScene(hlm2018Json, false);\n\n        //this.sphere = this.createSphere();\n\n        //this.plane = this.createPlane();\n        //this.cylinder = this.createCylinder();\n        //this.cylinder2 = this.createCylinder2(texture);\n        //this.sphereDisp = this.createSphereDistplaced(texture);\n        //this.sphereDisp2 = this.createSphereDistplaced(texture2);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        let color: number = this.toColor(0);\n        let count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        let alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        let inverseAlpha = 1 - alpha;\n\n        let r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n        + ((color >> 0) & 0xff) * (alpha)) | 0;\n        let g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n        ((color >> 8) & 0xff) * (alpha)) | 0;\n        let b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n        ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public readPixel(x: number, y: number, color: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public toColor(red: number): number {\n        return (255 << 24) |\n            (red << 16) |\n            (red << 8) |\n            (red);\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x, y, width, height, color) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += 320 - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        let firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            let index = text.charCodeAt(i) - firstIndex;\n            let tx = Math.floor(index % 32) * 8;\n            let ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        let start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < 320; x++) {\n                this.framebuffer[(start + i) * 320 + x] = this.framebuffer[(start - i * 3 - 1) * 320 + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 10) | 0]\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                let texIndex = (xt + w) + ((yt + h) * texture.width);\n                let frIndex = (xs + w) + ((ys + h) * 320);\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                let g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                let b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                let g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                let b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * 320;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                let alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                let inverseAlpha = 1 - alpha;\n\n                let fbPixel = this.framebuffer[frIndex];\n                let txPixel = texture.texture[texIndex];\n\n                let r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                let g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                let b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += 320 - width;\n        }\n    }\n\n    public pixelate() {\n        let xoff = 20;\n        let yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff, 0));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public scrollingBackground(texture: Texture, time: number) {\n        let offset = Math.round(-(1 - this.interpolate(250, 10250, time * 0.25)) * (texture.height - 200));\n        this.fastFramebufferCopyOffset(this.framebuffer, texture.texture, offset);\n    }\n\n    public blockFace(texture: Texture, time: number, startTime: number) {\n        let fadeArray = new Array<number>(16 * 10);\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        // TODO: different fadeArray algorithms\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                fadeArray[x + y * 16] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n        this.clear();\n        for (let y = 0; y < 10; y++) {\n            for (let x = 0; x < 16; x++) {\n                this.drawTextureRect(x * 20, y * 20, x * 20, y * 20, 20, 20, texture,\n                    this.interpolate(startTime + fadeArray[x + y * 16], startTime + fadeArray[x + y * 16] + 700, time));\n            }\n        }\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = 320 * 200 / 32 + 1;\n        let k = 320 * 200;\n        let l = 320 * (200 - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        src.set(dest);\n    }\n\n    tmpGlitch = new Uint32Array(320 * 200);\n\n    public drawPolarDistotion(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 1.355;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        let distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                let angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                let color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture, scale);\n            }\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    let inverseAlpha = 1 - alpha;\n                    let framebufferPixel = this.framebuffer[index2];\n                    let texturePixel = texture.texture[textureIndex];\n\n                    let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                let inverseAlpha = 1 - alpha;\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    let zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    let inverseAlpha = 1 - alpha;\n\n                    let r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    let g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    let b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawRadialBlur(): void {\n        this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        let texture = new Texture();\n        texture.texture = this.tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n        let width = 320;\n        let height = 200;\n        for (let i = 0; i < 16; i++) {\n            width += 320 * 0.09;\n            height += 200 * 0.09;\n            this.scaleClipBlitter.drawScaledTextureClip(\n                320 / 2 - width / 2,\n                200 / 2 - height / 2,\n                width, height, texture, 0.19 * (15 - i) / 15);\n            this.fastFramebufferCopy(this.tmpGlitch, this.framebuffer);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let alpha = 255 * alphaScale;\n                let inverseAlpha = 1 - alpha;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                let g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                let b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                //let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                let color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = color;\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture): void {\n        let xStep = texture.width / width;\n        let yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > 199 ||\n            xp + width < 0 ||\n            xp > 319) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - 200, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - 200, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - 320, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - 320, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * 320;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                let framebufferPixel = this.framebuffer[index2];\n                let texturePixel = texture.texture[textureIndex];\n\n                let r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff), 255);\n                let g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff), 255);\n                let b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff), 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + 320;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = 320;\n        const SCREEN_HEIGHT = 200;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                let inverseAlpha = 1 - alpha;\n\n                let r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                let g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                let b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        let framebufferRowOffset = this.width - texture.width;\n\n        for (let y = 0; y < texture.height; y++) {\n            for (let x = 0; x < texture.width; x++) {\n                let color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        let index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        let points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        let scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            let transformed = modelViewMartrix.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            let color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            let t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            let ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            let t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        let pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n    public drawBox() {\n        let height = Framebuffer.maxWindow.y - Framebuffer.minWindow.y + 1;\n        let width = Framebuffer.maxWindow.x - Framebuffer.minWindow.x + 1;\n        let index = Framebuffer.minWindow.y * 320 + Framebuffer.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += 320\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * 320 + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += 320\n        }\n    }\n    /*\n        public wireFrameSphereClipping(elapsedTime: number): void {\n\n            this.wBuffer.fill(100);\n\n            let points: Array<Vector4f> = [];\n\n            const STEPS = 16;\n            const STEPS2 = 16;\n\n            // TODO: move into setup method\n            for (let i = 0; i <= STEPS; i++) {\n                for (let r = 0; r < STEPS2; r++) {\n                    points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n                }\n            }\n\n            let index: Array<number> = [];\n\n            for (let j = 0; j < STEPS; j++) {\n                for (let i = 0; i < STEPS2; i++) {\n                    index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                    index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                    index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                    index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n                }\n            }\n\n            // Create MV Matrix\n            let scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n            let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n            modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -36).multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n                let x = transformed.x;\n                let y = transformed.y;\n                let z = transformed.z;\n\n                let xx = (320 * 0.5) + (x / (-z * 0.0078));\n                let yy = (200 * 0.5) + (y / (-z * 0.0078));\n\n                points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n            }\n\n            // draw clip region\n            let colred = 255 << 24 | 230 << 16 | 200 << 16 | 200;\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.maxWindow.y + 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.minWindow.y - 1, 0), new Vector3f(Framebuffer.maxWindow.x + 1, Framebuffer.minWindow.y - 1, 0), colred);\n            this.drawLineDDA(new Vector3f(Framebuffer.minWindow.x - 1, Framebuffer.maxWindow.y + 1, 0), new Vector3f(Framebuffer.maxWindow.x + 2, Framebuffer.maxWindow.y + 1, 0), colred);\n\n            this.drawBox();\n\n            for (let i = 0; i < index.length; i += 3) {\n                let v1 = points2[index[i]];\n                let v2 = points2[index[i + 1]];\n                let v3 = points2[index[i + 2]];\n\n                let colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n                if (this.isTriangleCCW(v1, v2, v3)) {\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                    this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n                }\n            }\n        }\n    */\n    public static minWindow: Vector3f = new Vector3f(0, 0, 0);\n    public static maxWindow: Vector3f = new Vector3f(319, 199, 0);\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (200 * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        let points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                let pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); //4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); //3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        let modelViewMartrix = matrix;\n\n        let points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let v2 = points2[index[i + 1]];\n            let v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n\n    public getBlenderScene(file: any, disp: boolean = true, flat: boolean = false): any {\n        let scene = [];\n\n        file.forEach(object => {\n            let points: Array<Vector4f> = new Array<Vector4f>();\n            let normals: Array<Vector4f> = new Array<Vector4f>();\n            let faces: Array<{ vertices: number[], normals: number[] }> = new Array();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v) => {\n                    let uv = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            let sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            let obj = {\n                points: points,\n                normals: normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let xdist = (x - 320 / 2);\n                let ydist = (y - 200 / 2);\n                let dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                let dist2 = dist + elapsedTime * 0.002;\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                let color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                let scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                let r = ((color1 >> 0) & 0xff) * scale;\n                let g = ((color1 >> 8) & 0xff) * scale;\n                let b = ((color1 >> 16) & 0xff) * scale;\n                let final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    /**\n     * This code is pretty slow. About 12 fps with 6 x slowdown int chrome!\n     * FIXME:\n     * - optimize\n     * - precompute dist & angle\n     * - maybe use 8 * 8 block interpolation\n     */\n    drawPlanedeformationTunnelV2(elapsedTime: number, texture: Texture, texture2: Texture) {\n        let i = 0;\n        for (let y = 0; y < 200; y++) {\n            for (let x = 0; x < 320; x++) {\n                let scale = 1.2;\n                let xdist = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001) * 80 * scale;\n                let ydist = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001) * 80 * scale;\n                let xdist2 = (x - 320 / 2) + Math.sin(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let ydist2 = (y - 200 / 2) + Math.cos(elapsedTime * 0.0001 + Math.PI) * 80 * scale;\n                let dist = 256 * 20 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                dist += Math.sin(Math.atan2(xdist, ydist) * 5) * 8;\n                let dist2 = 256 * 20 / Math.max(1.0, Math.sqrt(xdist2 * xdist2 + ydist2 * ydist2));\n                dist2 += Math.sin(Math.atan2(xdist2, ydist2) * 5) * 8;\n                let finalDist = dist - dist2 + elapsedTime * 0.019;\n\n                let angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n                angle -= (Math.atan2(xdist2, ydist2) / Math.PI + 1.0) * 128.5 + elapsedTime * 0.0069;\n\n                // FIXME: scale by 256\n                let color1 = texture.texture[(finalDist & 0xff) + (angle & 0xff) * 255];\n                let cScale = Math.min(60 / (dist * 2), 1.0) * Math.min(60 / (dist2 * 2), 1.0);\n                let r = (color1 & 0xff) * cScale;\n                let g = (color1 >> 8 & 0xff) * cScale;\n                let b = (color1 >> 16 & 0xff) * cScale;\n\n                this.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                let distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                let waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                let intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n    drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        this.clearDepthBuffer();\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                let x = (j - num / 2) * scale;\n                let y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                let z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = 320 / 2;\n        const height: number = 200 / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n\n    public drawBlenderScene5(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -54 + (Math.sin(elapsedTime * 0.0006) * 0.5 + 0.5) * 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.8 - 0.1).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, -13, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(9, 9, 9));\n\n        for (let j = 0; j < this.blenderObj4.length; j++) {\n            let model = this.blenderObj4[j];\n            if (j !== 0 && j !== 2)\n                this.renderingPipeline.draw(model, mv, 200, 255, 216);\n\n            if (j === 0)\n                this.renderingPipeline.draw(model, mv, 244, 200, 216);\n            if (j === 2)\n                this.renderingPipeline.draw(model, mv, 244, 225, 216);\n\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 14.2, -4).multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 9).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(\n                    Math.PI * 2 * this.cosineInterpolate(0, 1300, Math.floor(elapsedTime * 0.7) % 4000)))\n            ));\n\n        let model2 = this.blenderObj5[0];\n        this.renderingPipeline.draw(model2, mv, 200, 255, 216);\n\n        const scale: number = 8;\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, 19, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(scale, scale, scale)))\n\n        //   this.shadingSphereEnvDisp2(elapsedTime * 0.0003, mv);\n\n\n\n        let lensflareScreenSpace = this.project(camera.multiply(new Vector3f(20, 19, -90)));\n\n        this.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.15, texture, dirt);\n    }\n\n    public drawBlenderScene6(elapsedTime: number, texture3: Texture, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n\n        this.clearDepthBuffer();\n\n        let camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        let scal = Math.sin(elapsedTime * 0.003) * 0.5 + 0.5;\n        for (let j = 0; j < this.blenderObj6.length; j++) {\n            let model = this.blenderObj6[j];\n            this.renderingPipeline.draw(model, mv, 244 * scal, 225 * scal, 216 * scal);\n        }\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        let model = this.blenderObj7[0];\n        this.renderingPipeline.draw(model, mv, 244, 100, 116);\n\n        let points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                let y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                let scale2 = (1 + 4 * this.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                let x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                let z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n\n        let modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n\n\n            let transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(4.3 * 192 / (element.z));\n            this.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < 200; y++) {\n            let yy = (-1.00 + 2.00 * y / 200);\n\n            for (let x = 0; x < 320; x++) {\n\n                let xx = (-1.00 + 2.00 * x / 320);\n\n                let d = Math.sqrt(xx * xx + yy * yy);\n                let a = Math.atan2(yy, xx);\n\n                // magic formulas here\n                let u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                let v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                let scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                let r = ((color >> 0) & 0xff) * scale;\n                let g = ((color >> 8) & 0xff) * scale;\n                let b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    /**\n     * this rountine is pretty slow:\n     * - optimize scaled blittinh\n     * - optimize geometry stage by reusing arrays\n     * - dont us forEach!\n     */\n    public scene7(elapsedTime: number, texture: Texture): void {\n        let points: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let i = 0; i < 120; i++) {\n            points.push(new Vector3f(Math.sin(i * 0.25) * 8, i * 0.3 - 18, Math.cos(i * 0.25) * 8));\n        }\n\n        points.push(new Vector3f(0, 0, 5));\n\n        let rotMat = Matrix3f.constructYRotationMatrix(elapsedTime * 0.0005);\n        rotMat = rotMat.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.0002));\n\n        let points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach(element => {\n            let alpha = -elapsedTime * 0.0013;\n\n            let transformed = rotMat.multiply(element);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z - 10;\n            let xx = 320 / 2 + (x / (z * 0.0058));\n            let yy = 200 / 2 + (y / (z * 0.0058));\n            points2.push(new Vector3f(xx, yy, z));\n        });\n\n        points2.sort(function (a, b) {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            let size = -(1.9 / (element.z * 0.0058)) | 0;\n            this.drawSoftParticle((element.x - size / 2) | 0, (element.y - size / 2) | 0, size, size, texture, 1 / element.z, 1.0);\n        });\n    }\n\n    public shadingSphereClip(elapsedTime: number): void {\n        this.clearDepthBuffer();\n        let scale = 1.6;\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.1).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(-elapsedTime * 0.02).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0, -21)\n            .multiplyMatrix(modelViewMartrix));\n\n        this.renderingPipeline.draw(this.torus.getMesh(), modelViewMartrix, 215, 30, 120);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    private torusFunction2(alpha: number): Vector3f {\n        let p = 2, q = 3;\n        let r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha));\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        let mu2: number;\n        if (mu <= y1) return 0;\n        if (mu >= y2) return 1;\n        mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(200 * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n    public divideSphere(points: Array<Vector3f>, index: Array<number>, steps: number) {\n\n        let points2: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            let v1 = points[index[i]];\n            let v2 = points[index[i + 1]];\n            let v3 = points[index[i + 2]];\n\n            let vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            let vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            let vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n    public createSphere() {\n\n        let pointsA: Array<Vector3f> = [\n            new Vector3f(0.0, -1.0, 0.0),\n            new Vector3f(1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, 1.0),\n            new Vector3f(-1.0, 0.0, 0.0),\n            new Vector3f(0.0, 0.0, -1.0),\n            new Vector3f(0.0, 1.0, 0.0)\n        ];\n\n        let indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        let k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.index.forEach(i => {\n            let p = k.points[i];\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n\n    public createPlane() {\n\n\n        let k = {\n            points: []\n        }\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public createCylinder() {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                let yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n        let texture: Array<TextureCoordinate> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        }\n    }\n\n    public createSphereDistplaced(texture: Texture) {\n        let sphere: {\n            points: Array<Vector3f>,\n            points2: Array<Vector3f>,\n            normals: Array<Vector3f>,\n            normals2: Array<Vector3f>,\n            index: Array<number>\n        } = this.createSphere();\n        let newPoints: Array<Vector3f> = new Array<Vector3f>();\n        sphere.points.forEach((point) => {\n            let x = point.x;\n            let y = point.y;\n            let z = point.z;\n            const radius = 1.0;\n            let u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            let v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            let disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public createCylinder2(texture: Texture) {\n        let k = {\n            points: []\n        }\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                let xpos = (x / LOOPX * 256) & 0xff;\n                let xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                let ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                let ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                let disp_x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                let disp_x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                let disp_x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                let disp_x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                let x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                let z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                let x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                let z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                let scale = 1;\n                k.points.push(new Vector3f(x0 * disp_x0y0, 0 + y, z0 * disp_x0y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n\n                k.points.push(new Vector3f(x1 * disp_x1y0, 0 + y, z1 * disp_x1y0));\n                k.points.push(new Vector3f(x0 * disp_x0y1, 1 + y, z0 * disp_x0y1));\n                k.points.push(new Vector3f(x1 * disp_x1y1, 1 + y, z1 * disp_x1y1));\n            }\n        }\n        // optimize\n        let points: Array<Vector3f> = [];\n        let points2: Array<Vector3f> = [];\n        let normals: Array<Vector3f> = [];\n        let normals2: Array<Vector3f> = [];\n\n        let index: Array<number> = [];\n\n        k.points.forEach(i => {\n            let p = i;\n\n            let point = points.find(point => point.sub(p).length() < 0.001);\n\n            if (point) {\n                let idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(p => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    /*\n    public shadingSphereEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.sphere;\n\n        for (let i = 0; i < result.points.length; i++) {\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x + Math.sin(result.points[i].y * 5.2 + elapsedTime * 5.83) * 0.3;\n            result.points2[i].z = result.points[i].z + Math.sin(result.points[i].x * 10.2 + elapsedTime * 3.83) * 0.15;\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 37.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 3.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 2.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 1.0) * 46, Math.sin(elapsedTime * 1.2) * 20\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (2006).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n    /*\n        public shadingSphereEnvDisp2(elapsedTime: number, modelViewMartrix: Matrix4f): void {\n            let result = this.sphereDisp2;\n\n            let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n            for (let i = 0; i < result.points.length; i++) {\n                let y = result.points[i].z;\n                let x = result.points[i].x;\n                let length = Math.sqrt(x * x + y * y);\n                let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n                rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n                result.points2[i].y = result.points[i].y;\n                result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n                result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n                result.normals[i].x = 0;\n                result.normals[i].y = 0;\n                result.normals[i].z = 0;\n            }\n\n            let points = result.points2;\n            let index = result.index;\n            let normals = result.normals;\n\n            let norm: Vector3f = new Vector3f(0, 0, 0);\n            let norm2: Vector3f = new Vector3f(0, 0, 0);\n            let cross: Vector3f = new Vector3f(0, 0, 0);\n            for (let i = 0; i < index.length; i += 3) {\n                let v1: Vector3f = points[index[i]];\n                let v2: Vector3f = points[index[i + 1]];\n                let v3: Vector3f = points[index[i + 2]];\n                norm.sub2(v2, v1);\n                norm2.sub2(v3, v1);\n                cross.cross2(norm, norm2);\n                let normal = cross;\n                normals[index[i]].add2(normals[index[i]], normal);\n                normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n                normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals[i].normalize2();\n            }\n\n            let points2: Array<Vector3f> = result.points2;\n            let normals2: Array<Vector3f> = result.normals2;\n\n            let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n            for (let n = 0; n < normals.length; n++) {\n                normalMatrix.multiplyArr(normals[n], normals2[n]);\n            }\n\n            for (let p = 0; p < points.length; p++) {\n                let transformed = modelViewMartrix.multiply(points[p]);\n\n                points2[p].x = Math.round((320 * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n                points2[p].y = Math.round((200 * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n                points2[p].z = transformed.z;\n            }\n\n            let vertex1 = new Vertex();\n            vertex1.textureCoordinate = new TextureCoordinate();\n            let vertex2 = new Vertex();\n            vertex2.textureCoordinate = new TextureCoordinate();\n            let vertex3 = new Vertex();\n            vertex3.textureCoordinate = new TextureCoordinate();\n            let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n            for (let i = 0; i < index.length; i += 3) {\n\n                let v1 = points2[index[i]];\n                let n1 = normals2[index[i]];\n\n                let v2 = points2[index[i + 1]];\n                let n2 = normals2[index[i + 1]];\n\n                let v3 = points2[index[i + 2]];\n                let n3 = normals2[index[i + 2]];\n\n                if (this.isTriangleCCW(v1, v2, v3)) {\n\n                    let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                    vertexArray[0].position = v1;\n                    this.fakeSphere(n1, vertex1);\n\n                    vertexArray[1].position = v2;\n                    this.fakeSphere(n2, vertex2);\n\n                    vertexArray[2].position = v3;\n                    this.fakeSphere(n3, vertex3);\n\n                    if (v1.x < Framebuffer.minWindow.x ||\n                        v2.x < Framebuffer.minWindow.x ||\n                        v3.x < Framebuffer.minWindow.x ||\n                        v1.x > Framebuffer.maxWindow.x ||\n                        v2.x > Framebuffer.maxWindow.x ||\n                        v3.x > Framebuffer.maxWindow.x ||\n                        v1.y < Framebuffer.minWindow.y ||\n                        v2.y < Framebuffer.minWindow.y ||\n                        v3.y < Framebuffer.minWindow.y ||\n                        v1.y > Framebuffer.maxWindow.y ||\n                        v2.y > Framebuffer.maxWindow.y ||\n                        v3.y > Framebuffer.maxWindow.y) {\n\n\n                        this.clipConvexPolygon2(vertexArray, color);\n                    } else {\n                        this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                    }\n                }\n            }\n        }\n    */\n    /*\n        public createBunny(): any {\n            let points: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.vertices.forEach(x => {\n                points.push(new Vector3f(x.x, x.y, x.z));\n            });\n\n            let normals: Array<Vector3f> = new Array<Vector3f>();\n\n            bunnyJson.normals.forEach(x => {\n                normals.push(new Vector3f(x.x, x.y, x.z).normalize());\n            });\n\n            let index: Array<number> = bunnyJson.faces;\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n            let normals2: Array<Vector3f> = new Array<Vector3f>();\n\n            for (let i = 0; i < points.length; i++) {\n                points2.push(new Vector3f(0, 0, 0));\n            }\n\n            for (let i = 0; i < normals.length; i++) {\n                normals2.push(new Vector3f(0, 0, 0));\n            }\n\n            let object = {\n                index: index,\n                points: points,\n                normals: normals,\n                points2: points2,\n                normals2: normals2\n            };\n\n            return object;\n        }\n    */\n    /*\n    public reflectionBunny(elapsedTime: number): void {\n        this.clearDepthBuffer();\n\n        let obj = this.bunnyObj;\n\n        let scale = 64.1;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.30));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -8).multiplyMatrix(modelViewMartrix);\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < obj.normals.length; n++) {\n            normalMatrix.multiplyArr(obj.normals[n], obj.normals2[n]);\n        }\n\n        for (let p = 0; p < obj.points.length; p++) {\n            let transformed = modelViewMartrix.multiply(obj.points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (320 * 0.5) + (x / (-z * 0.0078));\n            let yy = (200 * 0.5) - (y / (-z * 0.0078));\n\n            obj.points2[p].x = Math.round(xx);\n            obj.points2[p].y = Math.round(yy);\n            obj.points2[p].z = z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n\n        for (let i = 0; i < obj.index.length; i += 6) {\n            let v1 = obj.points2[obj.index[i]];\n            let v2 = obj.points2[obj.index[i + 1]];\n            let v3 = obj.points2[obj.index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                vertexArray[0].position = v1;\n                this.fakeSphere(obj.normals2[obj.index[i + 3]], vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(obj.normals2[obj.index[i + 4]], vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(obj.normals2[obj.index[i + 5]], vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n                    this.clipConvexPolygon2(vertexArray, 0);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], 0);\n                }\n            }\n        }\n    }\n*/\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        //vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        //vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    private static clipRegion = new Array<AbstractClipEdge>(\n        new RightClipEdge(),\n        new LeftClipEdge(),\n        new BottomClipEdge(),\n        new TopClipEdge()\n    );\n\n    public clipConvexPolygon2(subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < Framebuffer.clipRegion.length; j++) {\n            let edge = Framebuffer.clipRegion[j];\n            let input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                let point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        };\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.texturedTriangleRasterizer.drawTriangleDDA2(output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n    lensFlareVisible: boolean = false;\n    lensFlareStart = 0;\n    lensFlareEnd = 0;\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: { tex: Texture, scale: number, alpha: number }[], dirt: Texture): void {\n        let pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < 320 &&\n            pos.y > 0 && pos.y < 200 &&\n            this.wBuffer[pos.x + (pos.y * 320)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible != true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        let dir = new Vector3f(320 / 2, 200 / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                let temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        this.drawTextureRectAdd(0, 0, 0, 0, 320, 200, dirt, 0.03 + 0.15 * scale);\n    }\n\n    /**\n     * digital differential analyser line drawing algorithm\n     * using fixed point math.\n     * renders approx 1400 lines per millisecond on my machine\n     */\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        let wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320]) {\n                this.wBuffer[Math.round(xPosition) + Math.round(yPosition) * 320] = wStart;\n                this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        let xDistance: number = end.x - start.x;\n        let yDistance: number = end.y - start.y;\n\n        let dx: number, dy: number, length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n    drawVoxelLandscape3(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 10;\n        const MAX_DIST = 100;\n\n        let camX = time * 0.006;\n        let camY = 0;\n\n        const focus = 28.7;\n        const center = 220;\n        const eye = 120;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX = Math.cos(time * 0.0005 + x * 0.005) * 0.4;\n            let dirY = Math.sin(time * 0.0005 + x * 0.005) * 0.4;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 0.4;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * 0.6;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n    drawVoxelLandscape4(texture: Texture, time: number) {\n        this.clearColorBuffer(255 << 24);\n\n        const MIN_DIST = 14;\n        const MAX_DIST = 80;\n\n        let camX = time * 0.02;\n        let camY = 0;\n\n        const focus = 29.7;\n        const center = 90;\n        const eye = 10;\n\n        for (let x = 0; x < 320; x++) {\n            let dirX;\n            let dirY;\n\n            dirX = Math.cos(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n            dirY = Math.sin(time * 0.0001 + Math.PI * 2 / 320 * x) * 1.99;\n\n            let highestPoint = 0;\n\n            let rayX = camX + dirX * MIN_DIST;\n            let rayY = camY + dirY * MIN_DIST;\n\n            for (let dist = MIN_DIST; dist < MAX_DIST; dist++) {\n\n                let height = //this.getBilinearFilteredPixel(texture, rayX, rayY)*0.6;\n                    (texture.texture[(rayX & 0xff) + (rayY & 0xff) * 256] & 0xff) * Math.sin(Math.abs((dist - MIN_DIST) * 0.5 / (MAX_DIST - MIN_DIST))) * 3.5;\n                let projHeight = Math.round((height - eye) * focus / dist + center) - 50;\n                let color = (Math.round(height) * 200 / 255 + 55) * Math.min(1.0, (1 - (dist - MIN_DIST) / (MAX_DIST - MIN_DIST)));\n                let packedRGB = 255 << 24 | (color * 0.7) << 16 | (color) << 8 | (color * 0.8);\n\n                if (projHeight > highestPoint) {\n                    let index = x + (199 - highestPoint) * 320;\n                    let max = Math.min(projHeight, 200);\n\n                    for (let i = highestPoint; i < max; i++) {\n                        this.framebuffer[index] = packedRGB;\n                        index -= 320;\n                    }\n\n                    if (max == 200) {\n                        break;\n                    }\n\n                    highestPoint = projHeight;\n                }\n\n                rayX += dirX;\n                rayY += dirY;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { TextureCoordinate, Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public draw(mesh: TexturedMesh, modelViewMartrix: Matrix4f): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        const vertexArray: Array<Vertex> = new Array<Vertex>(\n            new Vertex(),\n            new Vertex(),\n            new Vertex()\n        );\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                const p1: Vector4f = this.project(v1);\n                const p2: Vector4f = this.project(v2);\n                const p3: Vector4f = this.project(v3);\n\n                if (this.isTriangleCCW(p1, p2, p3)) {\n                    vertexArray[0].position = p1; // p1 is Vector3f\n                    vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    vertexArray[1].position = p2;\n                    vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    vertexArray[2].position = p3;\n                    vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.framebuffer.clipConvexPolygon2(vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                vertexArray[0].position = v1; // v1 is Vector4f\n                vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((320 / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((200 / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.framebuffer.clipConvexPolygon2(projected);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public abstract render(framebuffer: Framebuffer): void;\n\n}\n","import { FlatShadedFace } from '../geometrical-objects/Face';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\n\nexport class BlenderJsonParser {\n\n    public static parse(file: any, disp: boolean = true, flat: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    normal: f.normals[0],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    normalize(): Vector4f {\n        let reci = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}","import { Matrix4f, Vector3f } from '../math';\n\nexport class BasicCamera {\n\n    protected position: Vector3f;\n    protected yaw: number;\n    protected pitch: number;\n    protected roll: number;\n\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\n        this.position = position;\n        this.yaw = yaw;\n        this.pitch = pitch;\n        this.roll = roll;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        let roll  = Matrix4f.constructZRotationMatrix(-this.roll);\n        let pitch = Matrix4f.constructXRotationMatrix(-this.pitch);\n        let yaw   = Matrix4f.constructYRotationMatrix(-this.yaw);\n\n        let translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return roll.multiplyMatrix(pitch).multiplyMatrix(yaw).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Defines a plane as used for primitive clipping against the\n * view frustum.\n */\nimport { Vector4f } from './';\n\nexport class Plane {\n\n    public distance: number;\n    public normal: Vector4f;\n\n    constructor(normal: Vector4f, distance: number) {\n        this.normal = normal;\n        this.distance = distance;\n    }\n\n    public getNormal(): Vector4f {\n        return this.normal;\n    }\n\n    public getDistance(): number {\n        return this.distance;\n    }\n\n    public isInside(point: Vector4f): boolean {\n        const dot: number = point.dot(this.normal);\n        return dot >= this.distance;\n    }\n\n    public computeIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const dot1: number = p1.dot(this.normal);\n        const dot2: number = p2.dot(this.normal);\n        const scale: number = (this.distance - dot1) / (dot2 - dot1);\n        return p2.sub(p1).mul(scale).add(p1);\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vector3f): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vector3f, p2: Vector3f): Vector3f;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","export { BasicCamera } from './BasicCamera';\nexport { ControllableCamera } from './ControllableCamera';","import { Vector3f } from '../math';\nimport { BasicCamera } from './BasicCamera';\n\nexport class ControllableCamera extends BasicCamera {\n\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\n        super(position, yaw, pitch, roll);\n    }\n\n    public moveForward(speed: number, deltaTime: number): void {\n        let distance = speed * deltaTime;\n        this.position.x += distance * -Math.sin(this.yaw);\n        this.position.z += distance * -Math.cos(this.yaw);\n    }\n\n    public moveBackward(speed: number, deltaTime: number): void {\n        let distance = speed * deltaTime;\n        this.position.x -= distance * -Math.sin(this.yaw);\n        this.position.z -= distance * -Math.cos(this.yaw);\n    }\n\n    public turnLeft(speed: number, deltaTime: number): void {\n        let distance = speed * deltaTime;\n        this.yaw += distance;\n    }\n\n    public turnRight(speed: number, deltaTime: number): void {\n        let distance = speed * deltaTime;\n        this.yaw -= distance;\n    }\n\n    public turnUp(speed: number, deltaTime: number): void {\n        let distance = speed * deltaTime;\n        this.pitch += distance;\n    }\n\n    public turnDown(speed: number, deltaTime: number): void {\n        let distance = speed * deltaTime;\n        this.pitch -= distance;\n    }\n\n}","import { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Plane } from '../math/Plane';\nimport { Sphere } from '../math/Sphere';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class FrustumCuller {\n\n    private planes: Array<Plane>;\n    private pos: Vector4f;\n    private normals: Array<Vector4f>;\n\n    public constructor() {\n        this.planes = new Array<Plane>();\n\n        for (let i: number = 0; i < 4; i++) {\n            this.planes.push(new Plane(new Vector4f(0, 0, 0, 0), 0));\n        }\n\n        this.pos = new Vector4f(0, 0, 0, 0);\n\n        // for some reason this is fucked up\n        // READ: http://www.cubic.org/docs/3dclip.htm\n        this.normals = [\n            //  new Vector4f(Math.cos(-HALF_HORIZONTAL_FOV), 0, Math.sin(-HALF_HORIZONTAL_FOV), 0.0),\n            //  new Vector4f(-Math.cos(HALF_HORIZONTAL_FOV), 0, -Math.sin(HALF_HORIZONTAL_FOV), 0.0),\n            //  new Vector4f(0, -Math.cos(HALF_VERTICAL_FOV), -Math.sin(HALF_VERTICAL_FOV), 0.0),\n            // new Vector4f(0, Math.cos(-HALF_VERTICAL_FOV), Math.sin(-HALF_VERTICAL_FOV), 0.0),\n            // new Vector4f(0.0, 0.0, -1.0, 0.0),\n            // new Vector4f(0.0, 0.0, 1.0, 0.0)\n        ];\n\n        const vertices: Array<Vector4f> = [\n            new Vector4f(-160 / 2, -100 / 2, 292),\n            new Vector4f(160 / 2, -100 / 2, 292),\n            new Vector4f(160 / 2, 100 / 2, 292),\n            new Vector4f(-160 / 2, 100 / 2, 292),\n        ];\n        for (let i: number = 0; i < vertices.length; i++) {\n            const normal: Vector4f = vertices[i].cross(vertices[(i + 1) % vertices.length]).normalize().mul(-1);\n            this.normals.push(normal);\n        }\n\n    }\n\n    public updateFrustum(modelViewMatrix: Matrix4f, position: Vector3f): void {\n        const inverseRotation: Matrix4f = modelViewMatrix.getInverseRotation();\n\n        inverseRotation.multiplyHomArr(this.normals[0], this.planes[0].normal); // left\n        inverseRotation.multiplyHomArr(this.normals[1], this.planes[1].normal); // right\n        inverseRotation.multiplyHomArr(this.normals[2], this.planes[2].normal); // bottom\n        inverseRotation.multiplyHomArr(this.normals[3], this.planes[3].normal); // top\n        // inverseRotation.multiplyHomArr(this.normals[4], this.planes[4].normal); // near\n        // inverseRotation.multiplyHomArr(this.normals[5], this.planes[5].normal); // far\n\n        this.pos.x = -position.x;\n        this.pos.y = -position.y;\n        this.pos.z = -position.z;\n\n        this.planes[0].distance = -this.planes[0].normal.dot(this.pos);\n        this.planes[1].distance = -this.planes[1].normal.dot(this.pos);\n        this.planes[2].distance = -this.planes[2].normal.dot(this.pos);\n        this.planes[3].distance = -this.planes[3].normal.dot(this.pos);\n        // TODO: bugfix near and far plane!\n        // this.planes[4].distance = -this.planes[4].normal.dot(this.pos) + this.near;\n        // this.planes[5].distance = -this.planes[3].normal.dot(this.pos) - this.far;\n    }\n\n    public getPlanes(): Array<Plane> {\n        return this.planes;\n    }\n\n    public isPotentiallyVisible(boundingVolume: Sphere): boolean {\n        for (let i: number = 0; i < this.planes.length; i++) {\n            if (!boundingVolume.isInsidePositiveHalfSpace(this.planes[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","/**\n * Color\n * \n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK = new Color(0, 0, 0, 255);\n    public static readonly WHITE = new Color(255, 255, 255, 255);\n    public static readonly RED = new Color(255, 0, 0, 255);\n    public static readonly LIME = new Color(0, 255, 0, 255);\n    public static readonly BLUE = new Color(0, 0, 255, 255);\n    public static readonly YELLOW = new Color(255, 255, 0, 255);\n    public static readonly CYAN = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY = new Color(112,128,144, 255);\n    \n    constructor(private r: number, private g: number, private b: number, private a: number) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n}","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    getPixel(texture: Texture, x: number, y: number) {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    getBilinearFilteredPixel( x: number, y: number) {\n        let x0 = (((x | 0) % 256) + 256) % 256;\n        let x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        let y0 = (((y | 0) % 256) + 256) % 256;\n        let y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        let x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        let x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        let x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        let x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = Math.min(x | 0, this.width - 1);\n        let x1 = Math.min((x | 0) + 1, this.width - 1);\n        let y0 = Math.min(y | 0, this.height - 1);\n        let y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        let x0y0 = this.getPixel2(this, x0, y0);\n        let x1y0 = this.getPixel2(this, x1, y0);\n        let x0y1 = this.getPixel2(this, x0, y1);\n        let x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    getPixel2(texture: Texture, x: number, y: number) {\n        return this.texture[x + y * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1) {\n        let col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        let col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        let col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n"],"sourceRoot":""}